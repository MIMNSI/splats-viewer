{"version":3,"file":"gaussian-splats-3d.umd.cjs","sources":["../src/SplatBuffer.js","../src/AbortablePromise.js","../src/Util.js","../src/SplatCompressor.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splattree/SplatTreeNode.js","../src/splattree/SplatTree.js","../src/SplatMesh.js","../src/worker/sorter.wasm","../src/Constants.js","../src/worker/SortWorker.js","../src/Viewer.js","../src/DropInViewer.js"],"sourcesContent":["import * as THREE from 'three';\n\nlet fbf;\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerScale: 12,\n            BytesPerColor: 4,\n            BytesPerRotation: 16,\n            ScaleRange: 1\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerScale: 6,\n            BytesPerColor: 4,\n            BytesPerRotation: 8,\n            ScaleRange: 32767\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n    static CovarianceSizeBytes = 24;\n\n    static HeaderSizeBytes = 1024;\n\n    constructor(bufferData) {\n        this.headerBufferData = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n        this.headerArrayUint8 = new Uint8Array(this.headerBufferData);\n        this.headerArrayUint32 = new Uint32Array(this.headerBufferData);\n        this.headerArrayFloat32 = new Float32Array(this.headerBufferData);\n        this.headerArrayUint8.set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n        this.versionMajor = this.headerArrayUint8[0];\n        this.versionMinor = this.headerArrayUint8[1];\n        this.headerExtraK = this.headerArrayUint8[2];\n        this.compressionLevel = this.headerArrayUint8[3];\n        this.splatCount = this.headerArrayUint32[1];\n        this.bucketSize = this.headerArrayUint32[2];\n        this.bucketCount = this.headerArrayUint32[3];\n        this.bucketBlockSize = this.headerArrayFloat32[4];\n        this.halfBucketBlockSize = this.bucketBlockSize / 2.0;\n        this.bytesPerBucket = this.headerArrayUint32[5];\n        this.compressionScaleRange = this.headerArrayUint32[6] || SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        this.compressionScaleFactor = this.halfBucketBlockSize / this.compressionScaleRange;\n\n        const dataBufferSizeBytes = bufferData.byteLength - SplatBuffer.HeaderSizeBytes;\n        this.splatBufferData = new ArrayBuffer(dataBufferSizeBytes);\n        new Uint8Array(this.splatBufferData).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes, dataBufferSizeBytes));\n\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor + this.bytesPerRotation;\n\n        fbf = this.fbf.bind(this);\n\n        this.linkBufferArrays();\n    }\n\n    linkBufferArrays() {\n        let FloatArray = (this.compressionLevel === 0) ? Float32Array : Uint16Array;\n        this.centerArray = new FloatArray(this.splatBufferData, 0, this.splatCount * SplatBuffer.CenterComponentCount);\n        this.scaleArray = new FloatArray(this.splatBufferData, this.bytesPerCenter * this.splatCount,\n                                         this.splatCount * SplatBuffer.ScaleComponentCount);\n        this.colorArray = new Uint8Array(this.splatBufferData, (this.bytesPerCenter + this.bytesPerScale) * this.splatCount,\n                                         this.splatCount * SplatBuffer.ColorComponentCount);\n        this.rotationArray = new FloatArray(this.splatBufferData,\n                                             (this.bytesPerCenter + this.bytesPerScale + this.bytesPerColor) * this.splatCount,\n                                              this.splatCount * SplatBuffer.RotationComponentCount);\n        this.bucketsBase = this.splatCount * this.bytesPerSplat;\n    }\n\n    fbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.fromHalfFloat(f);\n        }\n    };\n\n    getHeaderBufferData() {\n        return this.headerBufferData;\n    }\n\n    getSplatBufferData() {\n        return this.splatBufferData;\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getSplatCenter(index, outCenter, transform) {\n        let bucket = [0, 0, 0];\n        const centerBase = index * SplatBuffer.CenterComponentCount;\n        if (this.compressionLevel > 0) {\n            const sf = this.compressionScaleFactor;\n            const sr = this.compressionScaleRange;\n            const bucketIndex = Math.floor(index / this.bucketSize);\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n            outCenter.x = (this.centerArray[centerBase] - sr) * sf + bucket[0];\n            outCenter.y = (this.centerArray[centerBase + 1] - sr) * sf + bucket[1];\n            outCenter.z = (this.centerArray[centerBase + 2] - sr) * sf + bucket[2];\n        } else {\n            outCenter.x = this.centerArray[centerBase];\n            outCenter.y = this.centerArray[centerBase + 1];\n            outCenter.z = this.centerArray[centerBase + 2];\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n\n        return function(index, outScale, outRotation, transform) {\n            const scaleBase = index * SplatBuffer.ScaleComponentCount;\n            outScale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n            const rotationBase = index * SplatBuffer.RotationComponentCount;\n            outRotation.set(fbf(this.rotationArray[rotationBase + 1]), fbf(this.rotationArray[rotationBase + 2]),\n                            fbf(this.rotationArray[rotationBase + 3]), fbf(this.rotationArray[rotationBase]));\n            if (transform) {\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            }\n        };\n\n    }();\n\n    getSplatColor(index, outColor, transform) {\n        const colorBase = index * SplatBuffer.ColorComponentCount;\n        outColor.set(this.colorArray[colorBase], this.colorArray[colorBase + 1],\n                     this.colorArray[colorBase + 2], this.colorArray[colorBase + 3]);\n        // TODO: apply transform for spherical harmonics\n    }\n\n    fillSplatCenterArray(outCenterArray, destOffset, transform) {\n        const splatCount = this.splatCount;\n        let bucket = [0, 0, 0];\n        const center = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const centerSrcBase = i * SplatBuffer.CenterComponentCount;\n            const centerDestBase = (i + destOffset) * SplatBuffer.CenterComponentCount;\n            if (this.compressionLevel > 0) {\n                const bucketIndex = Math.floor(i / this.bucketSize);\n                bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n                const sf = this.compressionScaleFactor;\n                const sr = this.compressionScaleRange;\n                center.x = (this.centerArray[centerSrcBase] - sr) * sf + bucket[0];\n                center.y = (this.centerArray[centerSrcBase + 1] - sr) * sf + bucket[1];\n                center.z = (this.centerArray[centerSrcBase + 2] - sr) * sf + bucket[2];\n            } else {\n                center.x = this.centerArray[centerSrcBase];\n                center.y = this.centerArray[centerSrcBase + 1];\n                center.z = this.centerArray[centerSrcBase + 2];\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    fillSplatCovarianceArray(covarianceArray, destOffset, transform) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n        const rotationMatrix = new THREE.Matrix3();\n        const scaleMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n        const tempMatrix4 = new THREE.Matrix4();\n\n        for (let i = 0; i < splatCount; i++) {\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\n            scale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\n            rotation.set(fbf(this.rotationArray[rotationBase + 1]),\n                         fbf(this.rotationArray[rotationBase + 2]),\n                         fbf(this.rotationArray[rotationBase + 3]),\n                         fbf(this.rotationArray[rotationBase]));\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n            const covBase = SplatBuffer.CovarianceSizeFloats * (i + destOffset);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            covarianceArray[covBase] = transformedCovariance.elements[0];\n            covarianceArray[covBase + 1] = transformedCovariance.elements[3];\n            covarianceArray[covBase + 2] = transformedCovariance.elements[6];\n            covarianceArray[covBase + 3] = transformedCovariance.elements[4];\n            covarianceArray[covBase + 4] = transformedCovariance.elements[7];\n            covarianceArray[covBase + 5] = transformedCovariance.elements[8];\n        }\n    }\n\n    fillSplatColorArray(outColorArray, destOffset, transform) {\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const colorSrcBase = i * SplatBuffer.ColorComponentCount;\n            const colorDestBase = (i + destOffset) * SplatBuffer.ColorComponentCount;\n            outColorArray[colorDestBase] = this.colorArray[colorSrcBase];\n            outColorArray[colorDestBase + 1] = this.colorArray[colorSrcBase + 1];\n            outColorArray[colorDestBase + 2] = this.colorArray[colorSrcBase + 2];\n            outColorArray[colorDestBase + 3] = this.colorArray[colorSrcBase + 3];\n            // TODO: implement application of transform for spherical harmonics\n        }\n    }\n}\n","/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily to added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda gross. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    constructor(promiseFunc, abortHandler) {\n\n        let promiseResolve;\n        let promiseReject;\n        this.promise = new Promise((resolve, reject) => {\n            promiseResolve = resolve.bind(this);\n            promiseReject = reject.bind(this);\n        });\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort() {\n        if (this.abortHandler) this.abortHandler();\n    }\n\n    static resolve(data) {\n        return new AbortablePromise((resolve) => {\n            resolve(data);\n        });\n    }\n\n    static reject(error) {\n        return new AbortablePromise((resolve, reject) => {\n            reject(error);\n        });\n    }\n}\n","import { AbortablePromise } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress) {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    let rejectFunc = null;\n    const abortHandler = () => {\n        abortController.abort();\n        rejectFunc('Fetch aborted');\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        rejectFunc = reject;\n        fetch(path, { signal })\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk);\n                        }\n                        const buffer = new Blob(chunks).arrayBuffer();\n                        resolve(buffer);\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    chunks.push(chunk);\n                    if (onProgress) {\n                        onProgress(percent, percentLabel, chunk);\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    }, abortHandler);\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n","import * as THREE from 'three';\nimport { SplatBuffer } from './SplatBuffer.js';\nimport { clamp } from './Util.js';\n\nconst SplatBufferBucketSize = 256;\nconst SplatBufferBucketBlockSize = 5.0;\n\nclass UncompressedSplatArray {\n\n    constructor() {\n        this.splatCount = 0;\n        this.scale_0 = [];\n        this.scale_1 = [];\n        this.scale_2 = [];\n        this.rot_0 = [];\n        this.rot_1 = [];\n        this.rot_2 = [];\n        this.rot_3 = [];\n        this.x = [];\n        this.y = [];\n        this.z = [];\n        this.f_dc_0 = [];\n        this.f_dc_1 = [];\n        this.f_dc_2 = [];\n        this.opacity = [];\n    }\n\n    addSplat(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\n        this.x.push(x);\n        this.y.push(y);\n        this.z.push(z);\n        this.scale_0.push(scale0);\n        this.scale_1.push(scale1);\n        this.scale_2.push(scale2);\n        this.rot_0.push(rot0);\n        this.rot_1.push(rot1);\n        this.rot_2.push(rot2);\n        this.rot_3.push(rot3);\n        this.f_dc_0.push(r);\n        this.f_dc_1.push(g);\n        this.f_dc_2.push(b);\n        this.opacity.push(opacity);\n        this.splatCount++;\n    }\n}\n\nexport class SplatCompressor {\n\n    constructor(compressionLevel = 0, minimumAlpha = 1, blockSize = SplatBufferBucketBlockSize, bucketSize = SplatBufferBucketSize) {\n        this.compressionLevel = compressionLevel;\n        this.minimumAlpha = minimumAlpha;\n        this.bucketSize = bucketSize;\n        this.blockSize = blockSize;\n    }\n\n    static createEmptyUncompressedSplatArray() {\n        return new UncompressedSplatArray();\n    }\n\n    uncompressedSplatArrayToSplatBuffer(splatArray) {\n\n        const validSplats = SplatCompressor.createEmptyUncompressedSplatArray();\n        validSplats.addSplat(0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0);\n\n        for (let i = 0; i < splatArray.splatCount; i++) {\n            let alpha;\n            if (splatArray['opacity'][i]) {\n                alpha = splatArray['opacity'][i];\n            } else {\n                alpha = 255;\n            }\n            if (alpha >= this.minimumAlpha) {\n                validSplats.addSplat(splatArray['x'][i], splatArray['y'][i], splatArray['z'][i],\n                                     splatArray['scale_0'][i], splatArray['scale_1'][i], splatArray['scale_2'][i],\n                                     splatArray['rot_0'][i], splatArray['rot_1'][i], splatArray['rot_2'][i], splatArray['rot_3'][i],\n                                     splatArray['f_dc_0'][i], splatArray['f_dc_1'][i], splatArray['f_dc_2'][i], splatArray['opacity'][i]);\n            }\n        }\n\n        const buckets = this.computeBucketsForUncompressedSplatArray(validSplats);\n\n        const paddedSplatCount = buckets.length * this.bucketSize;\n        const headerSize = SplatBuffer.HeaderSizeBytes;\n        const header = new Uint8Array(new ArrayBuffer(headerSize));\n        header[3] = this.compressionLevel;\n        (new Uint32Array(header.buffer, 4, 1))[0] = paddedSplatCount;\n\n        let bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        let bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        let bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        let bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n        const centerBuffer = new ArrayBuffer(bytesPerCenter * paddedSplatCount);\n        const scaleBuffer = new ArrayBuffer(bytesPerScale * paddedSplatCount);\n        const colorBuffer = new ArrayBuffer(bytesPerColor * paddedSplatCount);\n        const rotationBuffer = new ArrayBuffer(bytesPerRotation * paddedSplatCount);\n\n        const blockHalfSize = this.blockSize / 2.0;\n        const compressionScaleRange = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n        const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n        const bucketCenter = new THREE.Vector3();\n        const bucketCenterDelta = new THREE.Vector3();\n        let outSplatIndex = 0;\n        for (let b = 0; b < buckets.length; b++) {\n            const bucket = buckets[b];\n            bucketCenter.fromArray(bucket.center);\n            for (let i = 0; i < bucket.splats.length; i++) {\n                let row = bucket.splats[i];\n                let invalidSplat = false;\n                if (row === 0) {\n                    invalidSplat = true;\n                }\n\n                if (this.compressionLevel === 0) {\n                    const center = new Float32Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\n                    const scale = new Float32Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Float32Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    if (validSplats['scale_0'][row] !== undefined) {\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\n                        quat.normalize();\n                        rot.set([quat.w, quat.x, quat.y, quat.z]);\n                        scale.set([validSplats['scale_0'][row], validSplats['scale_1'][row], validSplats['scale_2'][row]]);\n                    } else {\n                        scale.set([0.01, 0.01, 0.01]);\n                        rot.set([1.0, 0.0, 0.0, 0.0]);\n                    }\n                    center.set([validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]]);\n                } else {\n                    const center = new Uint16Array(centerBuffer, outSplatIndex * bytesPerCenter, 3);\n                    const scale = new Uint16Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Uint16Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n                    if (validSplats['scale_0'][row] !== undefined) {\n                        const quat = new THREE.Quaternion(validSplats['rot_1'][row], validSplats['rot_2'][row],\n                                                          validSplats['rot_3'][row], validSplats['rot_0'][row]);\n                        quat.normalize();\n                        rot.set([thf(quat.w), thf(quat.x), thf(quat.y), thf(quat.z)]);\n                        scale.set([thf(validSplats['scale_0'][row]), thf(validSplats['scale_1'][row]), thf(validSplats['scale_2'][row])]);\n                    } else {\n                        scale.set([thf(0.01), thf(0.01), thf(0.01)]);\n                        rot.set([thf(1.), 0, 0, 0]);\n                    }\n                    bucketCenterDelta.set(validSplats['x'][row], validSplats['y'][row], validSplats['z'][row]).sub(bucketCenter);\n                    bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                    center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                }\n\n                const rgba = new Uint8ClampedArray(colorBuffer, outSplatIndex * bytesPerColor, 4);\n                if (invalidSplat) {\n                    rgba[0] = 255;\n                    rgba[1] = 0;\n                    rgba[2] = 0;\n                    rgba[3] = 0;\n                } else {\n                    if (validSplats['f_dc_0'][row] !== undefined) {\n                        rgba.set([validSplats['f_dc_0'][row], validSplats['f_dc_1'][row], validSplats['f_dc_2'][row]]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (validSplats['opacity'][row] !== undefined) {\n                        rgba[3] = validSplats['opacity'][row];\n                    } else {\n                        rgba[3] = 255;\n                    }\n                }\n\n                outSplatIndex++;\n            }\n        }\n\n        const bytesPerBucket = 12;\n        const bucketsSize = bytesPerBucket * buckets.length;\n        const splatDataBufferSize = centerBuffer.byteLength + scaleBuffer.byteLength +\n                                    colorBuffer.byteLength + rotationBuffer.byteLength;\n\n        const headerArrayUint32 = new Uint32Array(header.buffer);\n        const headerArrayFloat32 = new Float32Array(header.buffer);\n        let unifiedBufferSize = headerSize + splatDataBufferSize;\n        if (this.compressionLevel > 0) {\n            unifiedBufferSize += bucketsSize;\n            headerArrayUint32[2] = this.bucketSize;\n            headerArrayUint32[3] = buckets.length;\n            headerArrayFloat32[4] = this.blockSize;\n            headerArrayUint32[5] = bytesPerBucket;\n            headerArrayUint32[6] = SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        }\n\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n        new Uint8Array(unifiedBuffer, 0, headerSize).set(header);\n        new Uint8Array(unifiedBuffer, headerSize, centerBuffer.byteLength).set(new Uint8Array(centerBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength, scaleBuffer.byteLength).set(new Uint8Array(scaleBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength,\n                    colorBuffer.byteLength).set(new Uint8Array(colorBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + centerBuffer.byteLength + scaleBuffer.byteLength + colorBuffer.byteLength,\n                    rotationBuffer.byteLength).set(new Uint8Array(rotationBuffer));\n\n        if (this.compressionLevel > 0) {\n            const bucketArray = new Float32Array(unifiedBuffer, headerSize + splatDataBufferSize, buckets.length * 3);\n            for (let i = 0; i < buckets.length; i++) {\n                const bucket = buckets[i];\n                const base = i * 3;\n                bucketArray[base] = bucket.center[0];\n                bucketArray[base + 1] = bucket.center[1];\n                bucketArray[base + 2] = bucket.center[2];\n            }\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    computeBucketsForUncompressedSplatArray(splatArray) {\n        let splatCount = splatArray.splatCount;\n        const blockSize = this.blockSize;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const center = [splatArray['x'][i], splatArray['y'][i], splatArray['z'][i]];\n            const xBlock = Math.ceil((center[0] - min.x) / blockSize);\n            const yBlock = Math.ceil((center[1] - min.y) / blockSize);\n            const zBlock = Math.ceil((center[2] - min.z) / blockSize);\n\n            blockCenter.x = (xBlock - 1) * blockSize + min.x + halfBlockSize;\n            blockCenter.y = (yBlock - 1) * blockSize + min.y + halfBlockSize;\n            blockCenter.z = (zBlock - 1) * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= this.bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        // fill partially full buckets with invalid splats (splat 0)\n        // to get them up to this.bucketSize\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    while (bucket.splats.length < this.bucketSize) {\n                        bucket.splats.push(0);\n                    }\n                    fullBuckets.push(bucket);\n                }\n            }\n        }\n\n        return fullBuckets;\n    }\n}\n","import { SplatCompressor } from './SplatCompressor.js';\n\nexport class PlyParser {\n\n    constructor(plyBuffer) {\n        this.plyBuffer = plyBuffer;\n    }\n\n    decodeHeader(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n\n        console.log('.PLY size: ' + plyBuffer.byteLength + ' bytes');\n\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            const endHeaderTestChunk = new Uint8Array(plyBuffer, Math.max(0, headerOffset - readChunkSize * 2), readChunkSize * 2);\n            const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n            if (endHeaderTestText.includes('end_header')) {\n                break;\n            }\n        }\n\n        const headerLines = headerText.split('\\n');\n\n        let splatCount = 0;\n        let propertyTypes = {};\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === 'end_header') {\n                break;\n            }\n        }\n\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'vertexData': vertexData,\n            'headerOffset': headerOffset\n        };\n    }\n\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize) {\n\n        const startTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT...');\n\n        const {splatCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\n\n        // figure out the SH degree from the number of coefficients\n        let nRestCoeffs = 0;\n        for (const propertyName in propertyTypes) {\n            if (propertyName.startsWith('f_rest_')) {\n                nRestCoeffs += 1;\n            }\n        }\n        const nCoeffsPerColor = nRestCoeffs / 3;\n\n        // TODO: Eventually properly support multiple degree spherical harmonics\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n        const sphericalHarmonicsDegree = 0;\n\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n        // figure out the order in which spherical harmonics should be read\n        const shFeatureOrder = [];\n        for (let rgb = 0; rgb < 3; ++rgb) {\n            shFeatureOrder.push(`f_dc_${rgb}`);\n        }\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n            }\n        }\n\n        let plyRowSize = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = plyRowSize;\n                plyRowSize += fieldSize[type];\n            }\n        }\n\n        let rawVertex = {};\n\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\n\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\n\n        for (let row = 0; row < splatCount; row++) {\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\n            if (rawVertex['scale_0'] !== undefined) {\n                splatArray['scale_0'][row] = Math.exp(rawVertex['scale_0']);\n                splatArray['scale_1'][row] = Math.exp(rawVertex['scale_1']);\n                splatArray['scale_2'][row] = Math.exp(rawVertex['scale_2']);\n            } else {\n                splatArray['scale_0'][row] = 0.01;\n                splatArray['scale_1'][row] = 0.01;\n                splatArray['scale_2'][row] = 0.01;\n            }\n\n            if (rawVertex['f_dc_0'] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                splatArray['f_dc_0'][row] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\n                splatArray['f_dc_1'][row] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\n                splatArray['f_dc_2'][row] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\n            } else {\n                splatArray['f_dc_0'][row] = 0;\n                splatArray['f_dc_1'][row] = 0;\n                splatArray['f_dc_2'][row] = 0;\n            }\n            if (rawVertex['opacity'] !== undefined) {\n                splatArray['opacity'][row] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\n            }\n\n            splatArray['rot_0'][row] = rawVertex['rot_0'];\n            splatArray['rot_1'][row] = rawVertex['rot_1'];\n            splatArray['rot_2'][row] = rawVertex['rot_2'];\n            splatArray['rot_3'][row] = rawVertex['rot_3'];\n\n            splatArray['x'][row] = rawVertex['x'];\n            splatArray['y'][row] = rawVertex['y'];\n            splatArray['z'][row] = rawVertex['z'];\n            splatArray.splatCount++;\n        }\n\n        const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\n        const splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\n\n        console.log('Total valid splats: ', splatBuffer.getSplatCount(), 'out of', splatCount);\n\n        const endTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT complete!');\n        console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\n\n        return splatBuffer;\n    }\n\n}\n","import { PlyParser } from './PlyParser.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class PlyLoader {\n\n    constructor() {\n        this.splatBuffer = null;\n    }\n\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize) {\n        return fetchWithProgress(fileName, onProgress).then((plyFileData) => {\n            const plyParser = new PlyParser(plyFileData);\n            const splatBuffer = plyParser.parseToSplatBuffer(compressionLevel, minimumAlpha, blockSize, bucketSize);\n            this.splatBuffer = splatBuffer;\n            return splatBuffer;\n        });\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from './SplatBuffer.js';\nimport { SplatCompressor } from './SplatCompressor.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class SplatLoader {\n\n    constructor(splatBuffer = null) {\n        this.splatBuffer = splatBuffer;\n        this.downLoadLink = null;\n    }\n\n    static isFileSplatFormat(fileName) {\n        return SplatLoader.isCustomSplatFormat(fileName) || SplatLoader.isStandardSplatFormat(fileName);\n    }\n\n    static isCustomSplatFormat(fileName) {\n        return fileName.endsWith('.ksplat');\n    }\n\n    static isStandardSplatFormat(fileName) {\n        return fileName.endsWith('.splat');\n    }\n\n    loadFromURL(fileName, onProgress, compressionLevel, minimumAlpha, blockSize, bucketSize) {\n        return fetchWithProgress(fileName, onProgress).then((bufferData) => {\n            let splatBuffer;\n            if (SplatLoader.isCustomSplatFormat(fileName)) {\n                splatBuffer = new SplatBuffer(bufferData);\n            } else {\n                const splatCompressor = new SplatCompressor(compressionLevel, minimumAlpha, blockSize, bucketSize);\n                const splatArray = SplatLoader.parseStandardSplatToUncompressedSplatArray(bufferData);\n                splatBuffer = splatCompressor.uncompressedSplatArrayToSplatBuffer(splatArray);\n            }\n            return splatBuffer;\n        });\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const InBufferRowSizeBytes = 32;\n        const splatCount = inBuffer.byteLength / InBufferRowSizeBytes;\n\n        const splatArray = SplatCompressor.createEmptyUncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inCenterSizeBytes = 3 * 4;\n            const inScaleSizeBytes = 3 * 4;\n            const inColorSizeBytes = 4;\n            const inBase = i * InBufferRowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + inCenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + inCenterSizeBytes + inScaleSizeBytes + inColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplat(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n    setFromBuffer(splatBuffer) {\n        this.splatBuffer = splatBuffer;\n    }\n\n    downloadFile(fileName) {\n        const headerData = new Uint8Array(this.splatBuffer.getHeaderBufferData());\n        const splatData = new Uint8Array(this.splatBuffer.getSplatBufferData());\n        const blob = new Blob([headerData.buffer, splatData.buffer], {\n            type: 'application/octet-stream',\n        });\n\n        if (!this.downLoadLink) {\n            this.downLoadLink = document.createElement('a');\n            document.body.appendChild(this.downLoadLink);\n        }\n        this.downLoadLink.download = fileName;\n        this.downLoadLink.href = URL.createObjectURL(blob);\n        this.downLoadLink.click();\n    }\n\n}\n","import {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","export class LoadingSpinner {\n\n    constructor(message, container) {\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerDivContainerOuter = document.createElement('div');\n        this.spinnerDivContainerOuter.className = 'outerContainer';\n        this.spinnerDivContainerOuter.style.display = 'none';\n\n        this.spinnerDivContainer = document.createElement('div');\n        this.spinnerDivContainer.className = 'container';\n\n        this.spinnerDiv = document.createElement('div');\n        this.spinnerDiv.className = 'loader';\n\n        this.messageDiv = document.createElement('div');\n        this.messageDiv.className = 'message';\n        this.messageDiv.innerHTML = this.message;\n\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\n        this.spinnerDivContainer.appendChild(this.messageDiv);\n        this.spinnerDivContainerOuter.appendChild(this.spinnerDivContainer);\n        this.container.appendChild(this.spinnerDivContainerOuter);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .message {\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                padding-top:15px;\n                width: 180px;\n            }\n\n            .outerContainer {\n                width: 100%;\n                height: 100%;\n            }\n\n            .container {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n            }\n\n            .loader {\n                width: 120px;        /* the size */\n                padding: 15px;       /* the border thickness */\n                background: #07e8d6; /* the color */\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n                margin-left: 30px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerDivContainerOuter.appendChild(style);\n    }\n\n    show() {\n        this.spinnerDivContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.spinnerDivContainerOuter.style.display = 'none';\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.spinnerDivContainerOuter);\n        }\n        this.container = container;\n        this.container.appendChild(this.spinnerDivContainerOuter);\n        this.spinnerDivContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n    }\n\n    setMessage(msg) {\n        this.messageDiv.innerHTML = msg;\n    }\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\n\nexport class SceneHelper {\n\n    constructor(scene) {\n        this.scene = scene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyMaterial = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        this.renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        this.renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this.renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.scene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            this.meshCursor.children.forEach((child) => {\n                child.geometry.dispose();\n                child.material.dispose();\n            });\n            this.scene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            const sphereMesh = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n            this.focusMarker = sphereMesh;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            this.focusMarker.position.copy(tempPosition);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        const planeGeometry = new THREE.PlaneGeometry(1, 1);\n        planeGeometry.rotateX(-Math.PI / 2);\n        const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n        planeMaterial.transparent = true;\n        planeMaterial.opacity = 0.6;\n        planeMaterial.depthTest = false;\n        planeMaterial.depthWrite = false;\n        planeMaterial.side = THREE.DoubleSide;\n        const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n        const arrowDir = new THREE.Vector3(0, 1, 0);\n        arrowDir.normalize();\n        const arrowOrigin = new THREE.Vector3(0, 0, 0);\n        const arrowLength = 0.5;\n        const arrowRadius = 0.01;\n        const arrowColor = 0x00dd00;\n        const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n        this.controlPlane = new THREE.Object3D();\n        this.controlPlane.add(planeMesh);\n        this.controlPlane.add(arrowHelper);\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.scene.add(this.debugRoot);\n        this.scene.add(this.secondaryDebugRoot);\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n    }\n\n    set(origin, normal, distance) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction) {\n        this.ray = new Ray(origin, direction);\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const localRay = new Ray();\n\n        return function(splatMesh, outHits = []) {\n            fromLocal.copy(splatMesh.matrixWorld);\n            toLocal.copy(fromLocal).invert();\n            localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n            localRay.direction.copy(this.ray.direction).transformDirection(toLocal);\n\n            const splatTree = splatMesh.getSplatTree();\n            if (splatTree.rootNode) {\n                this.castRayAtSplatTreeNode(localRay, splatTree, splatTree.rootNode, outHits);\n            }\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n            outHits.forEach((hit) => {\n                hit.origin.applyMatrix4(fromLocal);\n                hit.normal.transformDirection(fromLocal);\n            });\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        // Used for raycasting against splat ellipsoid\n        /*\n        const origin = new THREE.Vector3(0, 0, 0);\n        const tempRotationMatrix = new THREE.Matrix4();\n        const tempScaleMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n        */\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatGlobalIndex = node.data.indexes[i];\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    // Simple approximated sphere intersection\n                    const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\n                    if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                        outHits.push(tempHit.clone());\n                    }\n\n                    // Raycast against actual splat ellipsoid ... doesn't actually work as well\n                    // as the approximated sphere approach\n                    /*\n                    splatBuffer.getRotation(splatLocalIndex, tempRotation, splatTransform);\n                    tempScaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                    tempRotationMatrix.makeRotationFromQuaternion(tempRotation);\n                    fromSphereSpace.copy(tempScaleMatrix).premultiply(tempRotationMatrix);\n                    toSphereSpace.copy(fromSphereSpace).invert();\n                    tempRay.origin.copy(this.ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                    tempRay.direction.copy(this.ray.direction).transformDirection(toSphereSpace).normalize();\n                    if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                        const hitClone = tempHit.clone();\n                        hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                        outHits.push(hitClone);\n                    }\n                    */\n\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nlet idGen = 0;\n\nexport class SplatTreeNode {\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || idGen++;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTreeNode } from './SplatTreeNode.js';\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.splatMesh = [];\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n    }\n\n    processSplatMesh(splatMesh, filterFunc = () => true) {\n        const center = new THREE.Vector3();\n        this.splatMesh = splatMesh;\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n        this.globalSplatIndexToLocalSplatIndexMap = {};\n        this.globalSplatIndexToSplatBufferIndexMap = {};\n\n        let validSplatCount = 0;\n        const indexes = [];\n        const splatCount = this.splatMesh.getSplatCount();\n        for (let i = 0; i < splatCount; i++) {\n            if (filterFunc(i)) {\n                this.splatMesh.getSplatCenter(i, center);\n                if (validSplatCount === 0 || center.x < this.sceneMin.x) this.sceneMin.x = center.x;\n                if (validSplatCount === 0 || center.x > this.sceneMax.x) this.sceneMax.x = center.x;\n                if (validSplatCount === 0 || center.y < this.sceneMin.y) this.sceneMin.y = center.y;\n                if (validSplatCount === 0 || center.y > this.sceneMax.y) this.sceneMax.y = center.y;\n                if (validSplatCount === 0 || center.z < this.sceneMin.z) this.sceneMin.z = center.z;\n                if (validSplatCount === 0 || center.z > this.sceneMax.z) this.sceneMax.z = center.z;\n                validSplatCount++;\n                indexes.push(i);\n            }\n        }\n\n        this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);\n\n        this.rootNode = new SplatTreeNode(this.sceneMin, this.sceneMax, 0);\n        this.rootNode.data = {\n            'indexes': indexes\n        };\n        this.processNode(this.rootNode, splatMesh);\n    }\n\n    processNode(node, splatMesh) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < this.maxCentersPerNode || node.depth > this.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!this.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    this.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            this.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\n\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            this.splatMesh.getSplatCenter(splatGlobalIndex, center);\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new SplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            this.processNode(child, splatMesh);\n        }\n    }\n\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        return visitLeavesFromNode(this.rootNode, visitFunc);\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { uintEncodedFloat, rgbaToInteger } from './Util.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\n/**\n * SplatMesh: Container for one or more SplatBuffer instances, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1, enableDistancesComputationOnGPU = true) {\n        super(dummyGeometry, dummyMaterial);\n        this.renderer = undefined;\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        this.devicePixelRatio = devicePixelRatio;\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n        this.splatBuffers = [];\n        this.splatBufferOptions = [];\n        this.splatBufferTransforms = [];\n        this.splatTree = null;\n        this.splatDataTextures = null;\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n        };\n        this.globalSplatIndexToLocalSplatIndexMap = {};\n        this.globalSplatIndexToSplatBufferIndexMap = {};\n    }\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @return {THREE.ShaderMaterial}\n     */\n    static buildMaterial() {\n\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\n        // 2D covariance) that is ultimately rasterized\n        const vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform vec2 focal;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vPosition = position.xy * 2.0;\n\n                vec4 viewCenter = modelViewMatrix * vec4(splatCenter, 1.0);\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Compute the 2D covariance matrix from the upper-right portion of the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n                mat3 W = transpose(mat3(modelViewMatrix));\n                mat3 T = W * J;\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\n                // matrix (called 'conic') to determine fragment opacity.\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(trace * trace / 4.0 - D);\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = max(traceOver2 - term2, 0.00); // prevent negative eigen value\n\n                const float maxSplatSize = 1024.0;\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport;\n\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // compute the negative squared distance from the center of the splat to the\n                // current fragment in the splat's local space.\n                float A = -dot(vPosition, vPosition);\n                if (A < -4.0) discard;\n                vec3 color = vColor.rgb;\n                A = exp(A) * vColor.a;\n                gl_FragColor = vec4(color.rgb, A);\n            }`;\n\n        const uniforms = {\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static buildGeomtery(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = maxSplatCount;\n\n        return geometry;\n    }\n\n    /**\n     * Build a Three.js transformation matrix for each splat buffer based on options (position, scale, rotation)\n     * passed to the splat mesh during the build process. These are all optional and allow for the customization of\n     * a given splat buffer's position, scale, and orientation relative to the others.\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {Array<THREE.Matrix4>} splatBufferTransforms Existing transforms, if there are any\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildSplatBufferTransforms(splatBufferOptions, splatBufferTransforms = null) {\n        splatBufferTransforms = splatBufferTransforms || [];\n        splatBufferTransforms.length = splatBufferOptions.length;\n        for (let i = 0; i < splatBufferOptions.length; i++) {\n            if (!splatBufferTransforms[i]) {\n                const options = splatBufferOptions[i];\n                if (options) {\n                    let positionArray = options['position'] || [0, 0, 0];\n                    let rotationArray = options['rotation'] || [0, 0, 0, 1];\n                    let scaleArray = options['scale'] || [1, 1, 1];\n                    const position = new THREE.Vector3().fromArray(positionArray);\n                    const rotation = new THREE.Quaternion().fromArray(rotationArray);\n                    const scale = new THREE.Vector3().fromArray(scaleArray);\n                    const splatBufferTransform = new THREE.Matrix4();\n                    splatBufferTransform.compose(position, rotation, scale);\n                    splatBufferTransforms[i] = splatBufferTransform;\n                }\n            }\n        }\n        return splatBufferTransforms;\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single splat buffer.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = new Map();\n        const splatBufferIndexMap = new Map();\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const splatCount = splatBuffer.getSplatCount();\n            for (let i = 0; i < splatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                splatBufferIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            splatBufferIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {SplatMesh} splatMesh SplatMesh instance for which the splat tree will be built\n     * @return {SplatTree}\n     */\n    static buildSplatTree(splatMesh) {\n        // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n        // be configured on a per-scene basis\n        const splatTree = new SplatTree(8, 1000);\n        console.time('SplatTree build');\n        const splatColor = new THREE.Vector4();\n        splatTree.processSplatMesh(splatMesh, (splatIndex) => {\n            splatMesh.getSplatColor(splatIndex, splatColor);\n            const splatBufferIndex = splatMesh.getSplatBufferIndexForSplat(splatIndex);\n            const splatBufferOptions = splatMesh.splatBufferOptions[splatBufferIndex];\n            return splatColor.w >= (splatBufferOptions.splatAlphaRemovalThreshold || 1);\n        });\n        console.timeEnd('SplatTree build');\n\n        let leavesWithVertices = 0;\n        let avgSplatCount = 0;\n        let maxSplatCount = 0;\n        let nodeCount = 0;\n\n        splatTree.visitLeaves((node) => {\n            const nodeSplatCount = node.data.indexes.length;\n            if (nodeSplatCount > 0) {\n                avgSplatCount += nodeSplatCount;\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                nodeCount++;\n                leavesWithVertices++;\n            }\n        });\n        console.log(`SplatTree leaves: ${splatTree.countLeaves()}`);\n        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n        avgSplatCount = avgSplatCount / nodeCount;\n        console.log(`Avg splat count per node: ${avgSplatCount}`);\n        console.log(`Total splat count: ${splatMesh.getSplatCount()}`);\n        return splatTree;\n    }\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} splatBufferOptions Dynamic options for each splat buffer {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {Boolean} keepExistingSplatBufferTransforms If the transform for a splat buffer has been changed since a\n     *                                                    previous call to build(), this flag says to preserve it. The assumption\n     *                                                    is that the current call to build() will be using the same splat buffers\n     *                                                    as the previous call.\n     */\n    build(splatBuffers, splatBufferOptions, keepExistingSplatBufferTransforms = true) {\n        this.disposeMeshData();\n        const totalSplatCount = SplatMesh.getTotalSplatCountForSplatBuffers(splatBuffers);\n        this.splatBufferTransforms = SplatMesh.buildSplatBufferTransforms(splatBufferOptions, keepExistingSplatBufferTransforms ?\n                                                                          this.splatBufferTransforms : null);\n        this.geometry = SplatMesh.buildGeomtery(totalSplatCount);\n        this.material = SplatMesh.buildMaterial();\n        const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n        this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n        this.globalSplatIndexToSplatBufferIndexMap = indexMaps.splatBufferIndexMap;\n        this.splatTree = SplatMesh.buildSplatTree(this);\n\n        this.splatBuffers = splatBuffers;\n        this.splatBufferOptions = splatBufferOptions;\n\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        this.resetDataFromSplatBuffer();\n    }\n\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        if (this.enableDistancesComputationOnGPU) {\n            this.disposeDistancesComputationGPUResources();\n        }\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n        this.splatTree = null;\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    /**\n     * Refresh data textures and GPU buffers for splat distance pre-computation with data from the splat buffers for this mesh.\n     */\n    resetDataFromSplatBuffer() {\n        this.uploadSplatDataToTextures();\n        if (this.enableDistancesComputationOnGPU) {\n            this.updateGPUCentersBufferForDistancesComputation();\n        }\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     */\n    uploadSplatDataToTextures() {\n\n        const splatCount = this.getSplatCount();\n\n        const covariances = new Float32Array(splatCount * 6);\n        const centers = new Float32Array(splatCount * 3);\n        const colors = new Uint8Array(splatCount * 4);\n        this.fillSplatDataArrays(covariances, centers, colors);\n\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\n\n        const covariancesTextureSize = new THREE.Vector2(4096, 1024);\n        while (covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL < splatCount * 6) {\n            covariancesTextureSize.y *= 2;\n        }\n\n        const centersColorsTextureSize = new THREE.Vector2(4096, 1024);\n        while (centersColorsTextureSize.x * centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL < splatCount * 4) {\n            centersColorsTextureSize.y *= 2;\n        }\n\n        let covariancesTexture;\n        let paddedCovariances;\n        if (this.halfPrecisionCovariancesOnGPU) {\n            paddedCovariances = new Uint16Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            for (let i = 0; i < covariances.length; i++) {\n                paddedCovariances[i] = THREE.DataUtils.toHalfFloat(covariances[i]);\n            }\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.HalfFloatType);\n        } else {\n            paddedCovariances = new Float32Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            paddedCovariances.set(covariances);\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.FloatType);\n        }\n        covariancesTexture.needsUpdate = true;\n        this.material.uniforms.covariancesTexture.value = covariancesTexture;\n        this.material.uniforms.covariancesTextureSize.value.copy(covariancesTextureSize);\n\n        const paddedCenterColors = new Uint32Array(centersColorsTextureSize.x *\n                                                   centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        for (let c = 0; c < splatCount; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaToInteger(colors[colorsBase], colors[colorsBase + 1],\n                                                                 colors[colorsBase + 2], colors[colorsBase + 3]);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n        }\n        const centersColorsTexture = new THREE.DataTexture(paddedCenterColors, centersColorsTextureSize.x,\n                                                           centersColorsTextureSize.y, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColorsTexture.internalFormat = 'RGBA32UI';\n        centersColorsTexture.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColorsTexture;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColorsTextureSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'covariances': {\n                'data': paddedCovariances,\n                'texture': covariancesTexture,\n                'size': covariancesTextureSize\n            },\n            'centerColors': {\n                'data': paddedCenterColors,\n                'texture': centersColorsTexture,\n                'size': centersColorsTextureSize\n            }\n        };\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(2.0 / viewport.x, 2.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return SplatMesh.getTotalSplatCountForSplatBuffers(this.splatBuffers);\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                this.updateGPUCentersBufferForDistancesComputation();\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentRenderer;\n        let currentSplatCount;\n\n        return function() {\n            const splatCount = this.getSplatCount();\n\n            if (!this.renderer || (currentRenderer === this.renderer && currentSplatCount === splatCount)) return;\n            const rebuildGPUObjects = (currentRenderer !== this.renderer);\n            const rebuildBuffers = currentSplatCount !== splatCount;\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            const vsSource =\n            `#version 300 es\n                in ivec3 center;\n                uniform ivec3 modelViewProj;\n                flat out int distance;\n                void main(void) {\n                    distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                }\n            `;\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            this.distancesTransformFeedback.modelViewProjLoc =\n                gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, splatCount * 4, gl.DYNAMIC_COPY);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            currentRenderer = this.renderer;\n            currentSplatCount = splatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the splat buffers for this mesh.\n     */\n    updateGPUCentersBufferForDistancesComputation() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const intCenters = this.getIntegerCenters(false);\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, intCenters, gl.STATIC_DRAW);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    computeDistancesOnGPU(modelViewProjMatrix, outComputedDistances) {\n\n        if (!this.renderer) return;\n\n        const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n        const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n\n        // console.time(\"gpu_compute_distances\");\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n        gl.useProgram(this.distancesTransformFeedback.program);\n\n        gl.enable(gl.RASTERIZER_DISCARD);\n\n        gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n        gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n        gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 3, gl.INT, 0, 0);\n\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n        gl.beginTransformFeedback(gl.POINTS);\n        gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n        gl.endTransformFeedback();\n\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n        gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n        gl.disable(gl.RASTERIZER_DISCARD);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n        gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        // console.timeEnd(\"gpu_compute_distances\");\n\n        if (currentProgram) gl.useProgram(currentProgram);\n        if (currentVao) gl.bindVertexArray(currentVao);\n\n    }\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     */\n    getLocalSplatParameters(globalIndex, paramsObj) {\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.splatBufferTransform = this.getSplatBufferTransformForSplat(globalIndex);\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     */\n    fillSplatDataArrays(covariances, centers, colors) {\n        let offset = 0;\n        for (let i = 0; i < this.splatBuffers.length; i++) {\n            const splatBuffer = this.splatBuffers[i];\n            const splatBufferTransform = this.splatBufferTransforms[i];\n            if (covariances) splatBuffer.fillSplatCovarianceArray(covariances, offset, splatBufferTransform);\n            if (centers) splatBuffer.fillSplatCenterArray(centers, offset, splatBufferTransform);\n            if (colors) splatBuffer.fillSplatColorArray(colors, offset, splatBufferTransform);\n            offset += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1 after every 3 values.\n     * @return {Int32Array}\n     */\n    getIntegerCenters(padFour) {\n        const splatCount = this.getSplatCount();\n        const floatCenters = new Float32Array(splatCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(splatCount * componentCount);\n        for (let i = 0; i < splatCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1;\n        }\n        return intCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.splatBufferTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outScale, outRotation) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.splatBufferTransform);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.splatBufferTransform);\n        };\n\n    }();\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.splatBuffers[this.globalSplatIndexToSplatBufferIndexMap[globalIndex]];\n    }\n\n    getSplatBufferIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSplatBufferIndexMap[globalIndex];\n    }\n\n    getSplatBufferTransformForSplat(globalIndex) {\n        return this.splatBufferTransforms[this.globalSplatIndexToSplatBufferIndexMap[globalIndex]];\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u0017\u0003`\u0000\u0000`\f\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0004\u0003\u0003\u0000\u0001\u000b�\u0004\u0002\u0002{\u0002} \t \bk!\n\u0002@ \u000b\u0004@A����\u0007!\u000bA����x!\b \t \nM\r\u0001 \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0001j \u0002 \u0000 \u0001j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00016\u0002\u0000 \u0001 \u000b \u0001 \u000bH\u001b!\u000b \u0001 \b \u0001 \bJ\u001b!\b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\f\u0001\u000bA����\u0007!\u000bA����x!\b \t \nM\r\u0000 \u0005A(j \u0005A\u0018j \u0005�\t\u0002\b�V\u0002\u0000\u0001�V\u0002\u0000\u0002!\r \n!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \r��\u0001\"\f�\u001b\u0000 \f�\u001b\u0001j \f�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000b \u0002 \u000bH\u001b!\u000b \u0002 \b \u0002 \bJ\u001b!\b \u0005A\u0001j\"\u0005 \tG\r\u0000\u000b\u000b \t \nK\u0004@ \u0007A\u0001k� \b� \u000b���!\u000e \n!\b\u0003@\u0002 \u000e \u0003 \bA\u0002tj\"\u0001(\u0002\u0000 \u000bk��\"\u000f�C\u0000\u0000\u0000O]\u0004@ \u000f�\f\u0001\u000bA����x\u000b!\u0005 \u0001 \u00056\u0002\u0000 \u0004 \u0005A\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \bA\u0001j\"\b \tG\r\u0000\u000b\u000b \u0007A\u0002O\u0004@ \u0004(\u0002\u0000!\bA\u0001!\u000b\u0003@ \u0004 \u000bA\u0002tj\"\u0001 \u0001(\u0002\u0000 \bj\"\b6\u0002\u0000 \u000bA\u0001j\"\u000b \u0007G\r\u0000\u000b\u000b \nA\u0000J\u0004@ \n!\u000b\u0003@ \u0006 \u000bA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000bA\u0001J!\u0002 \u0001!\u000b \u0002\r\u0000\u000b\u000b \t \nJ\u0004@ \t!\u000b\u0003@ \u0006 \t \u0004 \u0003 \u000bA\u0001k\"\u000bA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \n \u000bH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / 4);\n            indexesToSort.set(copyIndexesToSort);\n            if (usePrecomputedDistances) {\n                const precomputedDistances = new Uint32Array(wasmMemory, precomputedDistancesOffset,\n                                                             copyPrecomputedDistances.byteLength / 4);\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        new Int32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, Constants.DepthMapRange, splatSortCount,\n                                         splatRenderCount, splatCount, usePrecomputedDistances);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        const transferBuffers = [];\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            const sortedIndexesOut = new Uint32Array(splatRenderCount);\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut.buffer;\n            transferBuffers.push(sortedIndexesOut.buffer);\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage, transferBuffers);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            new Int32Array(wasmMemory, centersOffset, splatCount * 4).set(new Int32Array(centers));\n            self.postMessage({\n                'sortSetupComplete': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                copyIndexesToSort, copyPrecomputedDistances);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n\n            const CENTERS_BYTES_PER_ENTRY = Constants.BytesPerInt * 4;\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForViewProjMatrix = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForPrecomputedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForViewProjMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 4,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForViewProjMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize\n            }\n        }\n    });\n    return worker;\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './PlyLoader.js';\nimport { SplatLoader } from './SplatLoader.js';\nimport { LoadingSpinner } from './LoadingSpinner.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\nimport { AbortablePromise } from './AbortablePromise.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        if (options.halfPrecisionCovariancesOnGPU === undefined || options.halfPrecisionCovariancesOnGPU === null) {\n            options.halfPrecisionCovariancesOnGPU = true;\n        }\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU;\n\n        // If 'scene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.scene = options.scene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort;\n        if (this.gpuAcceleratedSort !== true && this.gpuAcceleratedSort !== false) {\n            if (this.isMobile()) this.gpuAcceleratedSort = false;\n            else this.gpuAcceleratedSort = true;\n        }\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === false || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        this.controls = null;\n\n        this.splatMesh = new SplatMesh(this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio, this.gpuAcceleratedSort);\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderingInitialized = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n        this.infoPanelCells = {};\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        if (!this.dropInMode) this.init();\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        const renderDimensions = new THREE.Vector2();\n        this.getRenderDimensions(renderDimensions);\n\n        if (!this.usingExternalCamera) {\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.lookAt(this.initialCameraLookAt);\n            this.camera.up.copy(this.cameraUp).normalize();\n        }\n\n        if (!this.usingExternalRenderer) {\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            const resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n            });\n            resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n        this.scene = this.scene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.scene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        if (this.useBuiltInControls) {\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n            this.controls.listenToKeyEvents(window);\n            this.controls.rotateSpeed = 0.5;\n            this.controls.maxPolarAngle = Math.PI * .75;\n            this.controls.minPolarAngle = 0.1;\n            this.controls.enableDamping = true;\n            this.controls.dampingFactor = 0.05;\n            this.controls.target.copy(this.initialCameraLookAt);\n            this.rootElement.addEventListener('pointermove', this.onMouseMove.bind(this), false);\n            this.rootElement.addEventListener('pointerdown', this.onMouseDown.bind(this), false);\n            this.rootElement.addEventListener('pointerup', this.onMouseUp.bind(this), false);\n            window.addEventListener('keydown', this.onKeyDown.bind(this), false);\n        }\n\n        this.setupInfoPanel();\n        this.loadingSpinner.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyP':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.style.display = 'block';\n                    } else {\n                        this.infoPanel.style.display = 'none';\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        this.checkForFocalPointChange();\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const intersectionPoint = outHits[0].origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setupInfoPanel() {\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.style.position = 'absolute';\n        this.infoPanel.style.padding = '10px';\n        this.infoPanel.style.backgroundColor = '#cccccc';\n        this.infoPanel.style.border = '#aaaaaa 1px solid';\n        this.infoPanel.style.zIndex = 100;\n        this.infoPanel.style.width = '375px';\n        this.infoPanel.style.fontFamily = 'arial';\n        this.infoPanel.style.fontSize = '10pt';\n        this.infoPanel.style.textAlign = 'left';\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Render window', 'renderWindow'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime']\n        ];\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.style.width = '110px';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n\n            this.infoPanelCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanel.style.display = 'none';\n        this.renderer.domElement.parentElement.prepend(this.infoPanel);\n    }\n\n    updateSplatMeshUniforms = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.getRenderDimensions(renderDimensions);\n                this.cameraFocalLengthX = this.camera.projectionMatrix.elements[0] *\n                                          this.devicePixelRatio * renderDimensions.x * 0.45;\n                                          this.cameraFocalLengthY = this.camera.projectionMatrix.elements[5] *\n                                          this.devicePixelRatio * renderDimensions.y * 0.45;\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLengthX, this.cameraFocalLengthY);\n            }\n        };\n\n    }();\n\n    /**\n     * Add a splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    loadFile(path, options = {}) {\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\n        if (options.showLoadingSpinner) this.loadingSpinner.show();\n        const downloadProgress = (percent, percentLabel) => {\n            if (options.showLoadingSpinner) {\n                if (percent == 100) {\n                    this.loadingSpinner.setMessage(`Download complete!`);\n                } else {\n                    const suffix = percentLabel ? `: ${percentLabel}` : `...`;\n                    this.loadingSpinner.setMessage(`Downloading${suffix}`);\n                }\n            }\n            if (options.onProgress) options.onProgress(percent, percentLabel, 'downloading');\n        };\n        const loadPromise = this.loadFileToSplatBuffer(path, options.splatAlphaRemovalThreshold, downloadProgress);\n        return new AbortablePromise((resolve, reject) => {\n            loadPromise.then((splatBuffer) => {\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\n                if (options.onProgress) options.onProgress(0, '0%', 'processing');\n                const splatBufferOptions = {\n                    'rotation': options.rotation || options.orientation,\n                    'position': options.position,\n                    'scale': options.scale,\n                    'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n                };\n                this.addSplatBuffers([splatBuffer], [splatBufferOptions], options.showLoadingSpinner).then(() => {\n                    if (options.onProgress) options.onProgress(100, '100%', 'processing');\n                    resolve();\n                });\n            })\n            .catch(() => {\n                if (options.showLoadingSpinner) this.loadingSpinner.hide();\n                reject(new Error(`Viewer::loadFile -> Could not load file ${path}`));\n            });\n        }, loadPromise.abortHandler);\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} files Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    loadFiles(files, showLoadingSpinner = true, onProgress = undefined) {\n        const fileCount = files.length;\n        const percentComplete = [];\n        if (showLoadingSpinner) this.loadingSpinner.show();\n        const downloadProgress = (fileIndex, percent, percentLabel) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingSpinner) {\n                if (totalPercent == 100) {\n                    this.loadingSpinner.setMessage(`Download complete!`);\n                } else {\n                    this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\n                }\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, 'downloading');\n        };\n\n        const loadPromises = [];\n        const abortHandlers = [];\n        for (let i = 0; i < files.length; i++) {\n            const loadPromise = this.loadFileToSplatBuffer(files[i].path, files[i].splatAlphaRemovalThreshold,\n                                                           downloadProgress.bind(this, i));\n            abortHandlers.push(loadPromise.abortHandler);\n            loadPromises.push(loadPromise.promise);\n        }\n        const abortHandler = () => {\n            for (let abortHandler of abortHandlers) {\n                abortHandler();\n            }\n        };\n        return new AbortablePromise((resolve, reject) => {\n            Promise.all(loadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingSpinner) this.loadingSpinner.hide();\n                if (onProgress) options.onProgress(0, '0%', 'processing');\n                this.addSplatBuffers(splatBuffers, files, showLoadingSpinner).then(() => {\n                    if (onProgress) onProgress(100, '100%', 'processing');\n                    resolve();\n                });\n            })\n            .catch(() => {\n                if (showLoadingSpinner) this.loadingSpinner.hide();\n                reject(new Error(`Viewer::loadFiles -> Could not load one or more files.`));\n            });\n        }, abortHandler);\n    }\n\n    /**\n     *\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    loadFileToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined) {\n        const downloadProgress = (percent, percentLabel) => {\n            if (onProgress) onProgress(percent, percentLabel, 'downloading');\n        };\n        if (SplatLoader.isFileSplatFormat(path)) {\n            return new SplatLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\n        } else if (path.endsWith('.ply')) {\n            return new PlyLoader().loadFromURL(path, downloadProgress, 0, splatAlphaRemovalThreshold);\n        } else {\n            return AbortablePromise.reject(new Error(`Viewer::loadFileToSplatBuffer -> File format not supported: ${path}`));\n        }\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        let loadPromise;\n        let loadCount = 0;\n\n        return function(splatBuffers, splatBufferOptions = [], showLoadingSpinner = true) {\n            this.splatRenderingInitialized = false;\n            loadCount++;\n            const performLoad = () => {\n                return new Promise((resolve) => {\n                    if (showLoadingSpinner) {\n                        this.loadingSpinner.show();\n                        this.loadingSpinner.setMessage(`Processing splats...`);\n                    }\n                    window.setTimeout(() => {\n                        if (this.sortWorker) this.sortWorker.terminate();\n                        this.sortWorker = null;\n                        this.sortRunning = false;\n                        this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions);\n                        this.setupSortWorker(this.splatMesh).then(() => {\n                            loadCount--;\n                            if (loadCount === 0) {\n                                if (showLoadingSpinner) this.loadingSpinner.hide();\n                                this.splatRenderingInitialized = true;\n                            }\n                            resolve();\n                        });\n                    }, 1);\n                });\n            };\n            if (!loadPromise) {\n                loadPromise = performLoad();\n            } else {\n                loadPromise = loadPromise.then(() => {\n                    return performLoad();\n                });\n            }\n            return loadPromise;\n        };\n\n    }();\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     */\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions) {\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\n        allSplatBuffers.push(...splatBuffers);\n        allSplatBufferOptions.push(...splatBufferOptions);\n        this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true);\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n        this.splatMesh.frustumCulled = false;\n    }\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        return new Promise((resolve) => {\n            const splatCount = splatMesh.getSplatCount();\n            const sortWorker = createSortWorker(splatCount, this.sharedMemoryForWorkers);\n            sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n                    this.lastSortTime = e.data.sortTime;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    console.log('Sorting web worker WASM setup complete.');\n                    sortWorker.postMessage({\n                        'centers': this.splatMesh.getIntegerCenters(true).buffer\n                    });\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, splatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, splatCount);\n                        this.sortWorkerPrecomputedDistances = new Int32Array(e.data.precomputedDistancesBuffer,\n                                                                             e.data.precomputedDistancesOffset, splatCount);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(splatCount);\n                        this.sortWorkerPrecomputedDistances = new Int32Array(splatCount);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                } else if (e.data.sortSetupComplete) {\n                    console.log('Sorting web worker ready.');\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    this.sortWorker = sortWorker;\n                    resolve();\n                }\n            };\n        });\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            cancelAnimationFrame();\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        this.render();\n    }\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderingInitialized) return;\n            const hasRenderables = (scene) => {\n                for (let child of scene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n            const savedAuoClear = this.renderer.autoClear;\n            this.renderer.autoClear = false;\n            if (hasRenderables(this.scene)) this.renderer.render(this.scene, this.camera);\n            this.renderer.render(this.splatMesh, this.camera);\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n        if (!this.initialized || !this.splatRenderingInitialized) return;\n        if (this.controls) this.controls.update();\n        this.updateSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMeshUniforms();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            const calcDelta = currentTime - lastCalcTime;\n            if (calcDelta >= 1.0) {\n                this.currentFPS = frameCount;\n                frameCount = 0;\n                lastCalcTime = currentTime;\n            } else {\n                frameCount++;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n\n        return function() {\n            this.renderer.getSize(currentRendererSize);\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                if (!this.usingExternalCamera) {\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    this.camera.updateProjectionMatrix();\n                }\n                lastRendererSize.copy(currentRendererSize);\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            const fadeInSpeed = 10.0;\n            const fadeOutSpeed = 2.5;\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + fadeInSpeed * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - fadeOutSpeed * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n\n            const cameraPos = this.camera.position;\n            const cameraPosString = `[${cameraPos.x.toFixed(5)}, ${cameraPos.y.toFixed(5)}, ${cameraPos.z.toFixed(5)}]`;\n            this.infoPanelCells.cameraPosition.innerHTML = cameraPosString;\n\n            const cameraLookAt = this.controls.target;\n            const cameraLookAtString = `[${cameraLookAt.x.toFixed(5)}, ${cameraLookAt.y.toFixed(5)}, ${cameraLookAt.z.toFixed(5)}]`;\n            this.infoPanelCells.cameraLookAt.innerHTML = cameraLookAtString;\n\n            const cameraUp = this.camera.up;\n            const cameraUpString = `[${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}]`;\n            this.infoPanelCells.cameraUp.innerHTML = cameraUpString;\n\n            if (this.showMeshCursor) {\n                const cursorPos = this.sceneHelper.meshCursor.position;\n                const cursorPosString = `[${cursorPos.x.toFixed(5)}, ${cursorPos.y.toFixed(5)}, ${cursorPos.z.toFixed(5)}]`;\n                this.infoPanelCells.cursorPosition.innerHTML = cursorPosString;\n            } else {\n                this.infoPanelCells.cursorPosition.innerHTML = 'N/A';\n            }\n\n            this.infoPanelCells.fps.innerHTML = this.currentFPS;\n            this.infoPanelCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n            const renderPct = this.splatRenderCount / splatCount * 100;\n            this.infoPanelCells.renderSplatCount.innerHTML =\n                `${this.splatRenderCount} splats out of ${splatCount} (${renderPct.toFixed(2)}%)`;\n\n            this.infoPanelCells.sortTime.innerHTML = `${this.lastSortTime.toFixed(3)} ms`;\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    updateSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n        let runCount = 0;\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return function(force = false, gatherAllNodes = false) {\n            if (this.sortRunning) return;\n            if (!this.initialized || !this.splatRenderingInitialized) return;\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force && queuedSorts.length === 0 && runCount > 0) {\n                if (angleDiff <= 0.95) needsRefreshForRotation = true;\n                if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n            }\n\n            this.sortRunning = true;\n            this.splatRenderCount = this.gatherSceneNodesForSort(gatherAllNodes);\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            mvpMatrix.premultiply(this.camera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n            if (queuedSorts.length === 0) {\n                for (let partialSort of partialSorts) {\n                    if (angleDiff < partialSort.angleThreshold) {\n                        for (let sortFraction of partialSort.sortFractions) {\n                            queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                        }\n                        break;\n                    }\n                }\n                queuedSorts.push(this.splatRenderCount);\n            }\n            const sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n            const sortMessage = {\n                'modelViewProj': SplatMesh.getIntegerMatrixArray(mvpMatrix),\n                'cameraPosition': cameraPositionArray,\n                'splatRenderCount': this.splatRenderCount,\n                'splatSortCount': sortCount,\n                'usePrecomputedDistances': this.gpuAcceleratedSort\n            };\n            if (!this.sharedMemoryForWorkers) {\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                if (this.gpuAcceleratedSort) {\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                }\n            }\n            this.sortWorker.postMessage({\n                'sort': sortMessage\n            });\n\n            if (queuedSorts.length === 0) {\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n            runCount++;\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const tempMatrix4 = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        const MaximumDistanceToRender = 125;\n\n        return function(gatherAllNodes) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n            tempMatrix4.copy(this.camera.matrixWorld).invert();\n            tempMatrix4.multiply(this.splatMesh.matrixWorld);\n\n            const splatTree = this.splatMesh.getSplatTree();\n            let nodeRenderCount = 0;\n            let splatRenderCount = 0;\n            const nodeCount = splatTree.nodesWithIndexes.length;\n            for (let i = 0; i < nodeCount; i++) {\n                const node = splatTree.nodesWithIndexes[i];\n                tempVector.copy(node.center).applyMatrix4(tempMatrix4);\n                const distanceToNode = tempVector.length();\n                tempVector.normalize();\n\n                tempVectorYZ.copy(tempVector).setX(0).normalize();\n                tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                const ns = nodeSize(node);\n                const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                if (!gatherAllNodes && ((outOfFovX || outOfFovY || distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\n                    continue;\n                }\n                splatRenderCount += node.data.indexes.length;\n                nodeRenderList[nodeRenderCount] = node;\n                node.data.distanceToNode = distanceToNode;\n                nodeRenderCount++;\n            }\n\n            nodeRenderList.length = nodeRenderCount;\n            nodeRenderList.sort((a, b) => {\n                if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                else return 1;\n            });\n\n            let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n            for (let i = 0; i < nodeRenderCount; i++) {\n                const node = nodeRenderList[i];\n                const windowSizeInts = node.data.indexes.length;\n                const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer, currentByteOffset - windowSizeBytes, windowSizeInts);\n                destView.set(node.data.indexes);\n                currentByteOffset -= windowSizeBytes;\n            }\n\n            return splatRenderCount;\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingSpinner:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSceneFromFile(path, options = {}) {\n        if (options.showLoadingSpinner !== false) options.showLoadingSpinner = true;\n        const loadPromise = this.viewer.loadFile(path, options);\n        loadPromise.then(() => {\n            this.add(this.viewer.splatMesh);\n        });\n        return loadPromise;\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} files Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingSpinner Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addScenesFromFiles(files, showLoadingSpinner) {\n        if (showLoadingSpinner !== false) showLoadingSpinner = true;\n        const loadPromise = this.viewer.loadFiles(files, showLoadingSpinner);\n        loadPromise.then(() => {\n            this.add(this.viewer.splatMesh);\n        });\n        return loadPromise;\n    }\n\n    static onBeforeRender(viewer, renderer, scene, camera) {\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],"names":["THREE","Ray","Plane","MathUtils","EventDispatcher","Vector3","MOUSE","TOUCH","Quaternion","Spherical","Vector2"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAEA,IAAI,GAAG,CAAC;AACR;IACA;IACA;IACA;IACO,MAAM,WAAW,CAAC;AACzB;IACA,IAAI,OAAO,oBAAoB,GAAG,CAAC,CAAC;IACpC,IAAI,OAAO,mBAAmB,GAAG,CAAC,CAAC;IACnC,IAAI,OAAO,sBAAsB,GAAG,CAAC,CAAC;IACtC,IAAI,OAAO,mBAAmB,GAAG,CAAC,CAAC;AACnC;IACA,IAAI,OAAO,iBAAiB,GAAG;IAC/B,QAAQ,CAAC,EAAE;IACX,YAAY,cAAc,EAAE,EAAE;IAC9B,YAAY,aAAa,EAAE,EAAE;IAC7B,YAAY,aAAa,EAAE,CAAC;IAC5B,YAAY,gBAAgB,EAAE,EAAE;IAChC,YAAY,UAAU,EAAE,CAAC;IACzB,SAAS;IACT,QAAQ,CAAC,EAAE;IACX,YAAY,cAAc,EAAE,CAAC;IAC7B,YAAY,aAAa,EAAE,CAAC;IAC5B,YAAY,aAAa,EAAE,CAAC;IAC5B,YAAY,gBAAgB,EAAE,CAAC;IAC/B,YAAY,UAAU,EAAE,KAAK;IAC7B,SAAS;IACT,KAAK,CAAC;AACN;IACA,IAAI,OAAO,oBAAoB,GAAG,CAAC,CAAC;IACpC,IAAI,OAAO,mBAAmB,GAAG,EAAE,CAAC;AACpC;IACA,IAAI,OAAO,eAAe,GAAG,IAAI,CAAC;AAClC;IACA,IAAI,WAAW,CAAC,UAAU,EAAE;IAC5B,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAI,WAAW,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;IAC7E,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACtE,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACxE,QAAQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC1E,QAAQ,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,UAAU,EAAE,CAAC,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC,CAAC;IAC9F,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACrD,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACrD,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACrD,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACzD,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACpD,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACpD,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACrD,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAC1D,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;IAC9D,QAAQ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACxD,QAAQ,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,UAAU,CAAC;IAClI,QAAQ,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,qBAAqB,CAAC;AAC5F;IACA,QAAQ,MAAM,mBAAmB,GAAG,UAAU,CAAC,UAAU,GAAG,WAAW,CAAC,eAAe,CAAC;IACxF,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,WAAW,CAAC,mBAAmB,CAAC,CAAC;IACpE,QAAQ,IAAI,UAAU,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,UAAU,EAAE,WAAW,CAAC,eAAe,EAAE,mBAAmB,CAAC,CAAC,CAAC;AAC/H;IACA,QAAQ,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC;IAClG,QAAQ,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAAC;IAChG,QAAQ,IAAI,CAAC,aAAa,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAAC;IAChG,QAAQ,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,gBAAgB,CAAC;AACtG;IACA,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC;AACnH;IACA,QAAQ,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAChC,KAAK;AACL;IACA,IAAI,gBAAgB,GAAG;IACvB,QAAQ,IAAI,UAAU,GAAG,CAAC,IAAI,CAAC,gBAAgB,KAAK,CAAC,IAAI,YAAY,GAAG,WAAW,CAAC;IACpF,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,oBAAoB,CAAC,CAAC;IACvH,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU;IACpG,yCAAyC,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,mBAAmB,CAAC,CAAC;IAC5F,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,UAAU;IAC3H,yCAAyC,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,mBAAmB,CAAC,CAAC;IAC5F,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,eAAe;IAChE,6CAA6C,CAAC,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,UAAU;IAC9H,8CAA8C,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,sBAAsB,CAAC,CAAC;IACpG,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC;IAChE,KAAK;AACL;IACA,IAAI,GAAG,CAAC,CAAC,EAAE;IACX,QAAQ,IAAI,IAAI,CAAC,gBAAgB,KAAK,CAAC,EAAE;IACzC,YAAY,OAAO,CAAC,CAAC;IACrB,SAAS,MAAM;IACf,YAAY,OAAOA,gBAAK,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;IACpD,SAAS;IACT,KAAK;AACL;IACA,IAAI,mBAAmB,GAAG;IAC1B,QAAQ,OAAO,IAAI,CAAC,gBAAgB,CAAC;IACrC,KAAK;AACL;IACA,IAAI,kBAAkB,GAAG;IACzB,QAAQ,OAAO,IAAI,CAAC,eAAe,CAAC;IACpC,KAAK;AACL;IACA,IAAI,aAAa,GAAG;IACpB,QAAQ,OAAO,IAAI,CAAC,UAAU,CAAC;IAC/B,KAAK;AACL;IACA,IAAI,cAAc,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE;IAChD,QAAQ,IAAI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,QAAQ,MAAM,UAAU,GAAG,KAAK,GAAG,WAAW,CAAC,oBAAoB,CAAC;IACpE,QAAQ,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE;IACvC,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC;IACnD,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC;IAClD,YAAY,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;IACpE,YAAY,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;IACrH,YAAY,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/E,YAAY,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACnF,YAAY,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACnF,SAAS,MAAM;IACf,YAAY,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACvD,YAAY,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IAC3D,YAAY,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IAC3D,SAAS;IACT,QAAQ,IAAI,SAAS,EAAE,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IACzD,KAAK;AACL;IACA,IAAI,wBAAwB,GAAG,WAAW;AAC1C;IACA,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAChD,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC/C,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACjD;IACA,QAAQ,OAAO,SAAS,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE;IACjE,YAAY,MAAM,SAAS,GAAG,KAAK,GAAG,WAAW,CAAC,mBAAmB,CAAC;IACtE,YAAY,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACpI,YAAY,MAAM,YAAY,GAAG,KAAK,GAAG,WAAW,CAAC,sBAAsB,CAAC;IAC5E,YAAY,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;IAChH,4BAA4B,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAC9G,YAAY,IAAI,SAAS,EAAE;IAC3B,gBAAgB,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC1E,gBAAgB,cAAc,CAAC,0BAA0B,CAAC,WAAW,CAAC,CAAC;IACvE,gBAAgB,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC1F,gBAAgB,UAAU,CAAC,SAAS,CAAC,YAAY,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IAC1E,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE;IAC9C,QAAQ,MAAM,SAAS,GAAG,KAAK,GAAG,WAAW,CAAC,mBAAmB,CAAC;IAClE,QAAQ,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC;IAC/E,qBAAqB,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;IACrF;IACA,KAAK;AACL;IACA,IAAI,oBAAoB,CAAC,cAAc,EAAE,UAAU,EAAE,SAAS,EAAE;IAChE,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IAC3C,QAAQ,IAAI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,QAAQ,MAAM,MAAM,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC3C,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,MAAM,aAAa,GAAG,CAAC,GAAG,WAAW,CAAC,oBAAoB,CAAC;IACvE,YAAY,MAAM,cAAc,GAAG,CAAC,CAAC,GAAG,UAAU,IAAI,WAAW,CAAC,oBAAoB,CAAC;IACvF,YAAY,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE;IAC3C,gBAAgB,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;IACpE,gBAAgB,MAAM,GAAG,IAAI,YAAY,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;IACzH,gBAAgB,MAAM,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC;IACvD,gBAAgB,MAAM,EAAE,GAAG,IAAI,CAAC,qBAAqB,CAAC;IACtD,gBAAgB,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACnF,gBAAgB,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACvF,gBAAgB,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IACvF,aAAa,MAAM;IACnB,gBAAgB,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IAC3D,gBAAgB,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;IAC/D,gBAAgB,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;IAC/D,aAAa;IACb,YAAY,IAAI,SAAS,EAAE;IAC3B,gBAAgB,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IAC/C,aAAa;IACb,YAAY,cAAc,CAAC,cAAc,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACtD,YAAY,cAAc,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC1D,YAAY,cAAc,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IAC1D,SAAS;IACT,KAAK;AACL;IACA,IAAI,wBAAwB,CAAC,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE;IACrE,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;AAC3C;IACA,QAAQ,MAAM,KAAK,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC1C,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,UAAU,EAAE,CAAC;IAChD,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAChD,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,MAAM,qBAAqB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC1D,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACjD,QAAQ,MAAM,qBAAqB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC1D,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAChD;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,MAAM,SAAS,GAAG,CAAC,GAAG,WAAW,CAAC,mBAAmB,CAAC;IAClE,YAAY,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACjI,YAAY,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7D,YAAY,WAAW,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AACpD;IACA,YAAY,MAAM,YAAY,GAAG,CAAC,GAAG,WAAW,CAAC,sBAAsB,CAAC;IACxE,YAAY,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;IAClE,yBAAyB,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;IAClE,yBAAyB,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;IAClE,yBAAyB,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAChE,YAAY,WAAW,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAAC;IAC7D,YAAY,cAAc,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;AACvD;IACA,YAAY,gBAAgB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IACxE,YAAY,qBAAqB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;IACnG,YAAY,MAAM,OAAO,GAAG,WAAW,CAAC,oBAAoB,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC;AAChF;IACA,YAAY,IAAI,SAAS,EAAE;IAC3B,gBAAgB,YAAY,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IACvD,gBAAgB,qBAAqB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,SAAS,EAAE,CAAC;IACrE,gBAAgB,qBAAqB,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;IACtE,gBAAgB,qBAAqB,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IAChE,aAAa;AACb;IACA,YAAY,eAAe,CAAC,OAAO,CAAC,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACzE,YAAY,eAAe,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7E,YAAY,eAAe,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7E,YAAY,eAAe,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7E,YAAY,eAAe,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7E,YAAY,eAAe,CAAC,OAAO,GAAG,CAAC,CAAC,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7E,SAAS;IACT,KAAK;AACL;IACA,IAAI,mBAAmB,CAAC,aAAa,EAAE,UAAU,EAAE,SAAS,EAAE;IAC9D,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IAC3C,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,MAAM,YAAY,GAAG,CAAC,GAAG,WAAW,CAAC,mBAAmB,CAAC;IACrE,YAAY,MAAM,aAAa,GAAG,CAAC,CAAC,GAAG,UAAU,IAAI,WAAW,CAAC,mBAAmB,CAAC;IACrF,YAAY,aAAa,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;IACzE,YAAY,aAAa,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;IACjF,YAAY,aAAa,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;IACjF,YAAY,aAAa,CAAC,aAAa,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC;IACjF;IACA,SAAS;IACT,KAAK;IACL;;ICjPA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACO,MAAM,gBAAgB,CAAC;AAC9B;IACA,IAAI,WAAW,CAAC,WAAW,EAAE,YAAY,EAAE;AAC3C;IACA,QAAQ,IAAI,cAAc,CAAC;IAC3B,QAAQ,IAAI,aAAa,CAAC;IAC1B,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;IACxD,YAAY,cAAc,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,YAAY,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9C,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,KAAK;IACrC,YAAY,cAAc,CAAC,GAAG,IAAI,CAAC,CAAC;IACpC,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,MAAM,GAAG,CAAC,KAAK,KAAK;IAClC,YAAY,aAAa,CAAC,KAAK,CAAC,CAAC;IACjC,SAAS,CAAC;AACV;IACA,QAAQ,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3D,QAAQ,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,KAAK;AACL;IACA,IAAI,IAAI,CAAC,SAAS,EAAE;IACpB,QAAQ,OAAO,IAAI,gBAAgB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;IACzD,YAAY,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;IACvC,aAAa,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK;IAC/B,gBAAgB,MAAM,eAAe,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC,CAAC;IAC3D,gBAAgB,IAAI,eAAe,YAAY,OAAO,IAAI,eAAe,YAAY,gBAAgB,EAAE;IACvG,oBAAoB,eAAe,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,KAAK;IACvD,wBAAwB,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC;IAC1C,qBAAqB,CAAC,CAAC;IACvB,iBAAiB,MAAM;IACvB,oBAAoB,OAAO,CAAC,eAAe,CAAC,CAAC;IAC7C,iBAAiB;IACjB,aAAa,CAAC;IACd,aAAa,KAAK,CAAC,CAAC,KAAK,KAAK;IAC9B,gBAAgB,MAAM,CAAC,KAAK,CAAC,CAAC;IAC9B,aAAa,CAAC,CAAC;IACf,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9B,KAAK;AACL;IACA,IAAI,KAAK,CAAC,MAAM,EAAE;IAClB,QAAQ,OAAO,IAAI,gBAAgB,CAAC,CAAC,OAAO,KAAK;IACjD,YAAY,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,KAAK;IAC1D,gBAAgB,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC;IACjC,aAAa,CAAC;IACd,aAAa,KAAK,CAAC,MAAM,CAAC,CAAC;IAC3B,SAAS,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9B,KAAK;AACL;IACA,IAAI,KAAK,GAAG;IACZ,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC;IACnD,KAAK;AACL;IACA,IAAI,OAAO,OAAO,CAAC,IAAI,EAAE;IACzB,QAAQ,OAAO,IAAI,gBAAgB,CAAC,CAAC,OAAO,KAAK;IACjD,YAAY,OAAO,CAAC,IAAI,CAAC,CAAC;IAC1B,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA,IAAI,OAAO,MAAM,CAAC,KAAK,EAAE;IACzB,QAAQ,OAAO,IAAI,gBAAgB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;IACzD,YAAY,MAAM,CAAC,KAAK,CAAC,CAAC;IAC1B,SAAS,CAAC,CAAC;IACX,KAAK;IACL;;ICzEO,MAAM,WAAW,GAAG,WAAW;AACtC;IACA,IAAI,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;IAC1C,IAAI,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACvD;IACA,IAAI,OAAO,SAAS,GAAG,EAAE;IACzB,QAAQ,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IAC3B,QAAQ,MAAM,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;AAC/B;IACA,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC;IACtC,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,MAAM,CAAC;IACnC,QAAQ,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC;AACnC;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,EAAE,OAAO,IAAI,CAAC;AACjC;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,EAAE;IACrB,YAAY,IAAI,IAAI,MAAM,CAAC;IAC3B,YAAY,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;IAC7D,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,GAAG,GAAG,EAAE;IACrB,YAAY,CAAC,IAAI,MAAM,CAAC;IACxB,YAAY,IAAI,IAAI,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9D,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,GAAG,GAAG,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IAC9C,QAAQ,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK,CAAC;AACN;IACA,CAAC,EAAE,CAAC;AACJ;IACO,MAAM,gBAAgB,GAAG,WAAW;AAC3C;IACA,IAAI,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;IAC1C,IAAI,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACvD;IACA,IAAI,OAAO,SAAS,CAAC,EAAE;IACvB,QAAQ,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACzB,QAAQ,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;IAC5B,KAAK,CAAC;AACN;IACA,CAAC,EAAE,CAAC;AACJ;IACO,MAAM,aAAa,GAAG,SAAS,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;IAClD,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAChD,CAAC,CAAC;AACF;IACO,MAAM,iBAAiB,GAAG,SAAS,IAAI,EAAE,UAAU,EAAE;AAC5D;IACA,IAAI,MAAM,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;IAClD,IAAI,MAAM,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC;IAC1C,IAAI,IAAI,OAAO,GAAG,KAAK,CAAC;IACxB,IAAI,IAAI,UAAU,GAAG,IAAI,CAAC;IAC1B,IAAI,MAAM,YAAY,GAAG,MAAM;IAC/B,QAAQ,eAAe,CAAC,KAAK,EAAE,CAAC;IAChC,QAAQ,UAAU,CAAC,eAAe,CAAC,CAAC;IACpC,QAAQ,OAAO,GAAG,IAAI,CAAC;IACvB,KAAK,CAAC;AACN;IACA,IAAI,OAAO,IAAI,gBAAgB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;IACrD,QAAQ,UAAU,GAAG,MAAM,CAAC;IAC5B,QAAQ,KAAK,CAAC,IAAI,EAAE,EAAE,MAAM,EAAE,CAAC;IAC/B,SAAS,IAAI,CAAC,OAAO,IAAI,KAAK;IAC9B,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC;IACjD,YAAY,IAAI,eAAe,GAAG,CAAC,CAAC;IACpC,YAAY,IAAI,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC/D,YAAY,IAAI,QAAQ,GAAG,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC;AACvE;IACA,YAAY,MAAM,MAAM,GAAG,EAAE,CAAC;AAC9B;IACA,YAAY,OAAO,CAAC,OAAO,EAAE;IAC7B,gBAAgB,IAAI;IACpB,oBAAoB,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;IACvE,oBAAoB,IAAI,IAAI,EAAE;IAC9B,wBAAwB,IAAI,UAAU,EAAE;IACxC,4BAA4B,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;IAC3D,yBAAyB;IACzB,wBAAwB,MAAM,MAAM,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,CAAC;IACtE,wBAAwB,OAAO,CAAC,MAAM,CAAC,CAAC;IACxC,wBAAwB,MAAM;IAC9B,qBAAqB;IACrB,oBAAoB,eAAe,IAAI,KAAK,CAAC,MAAM,CAAC;IACpD,oBAAoB,IAAI,OAAO,CAAC;IAChC,oBAAoB,IAAI,YAAY,CAAC;IACrC,oBAAoB,IAAI,QAAQ,KAAK,SAAS,EAAE;IAChD,wBAAwB,OAAO,GAAG,eAAe,GAAG,QAAQ,GAAG,GAAG,CAAC;IACnE,wBAAwB,YAAY,GAAG,CAAC,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChE,qBAAqB;IACrB,oBAAoB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvC,oBAAoB,IAAI,UAAU,EAAE;IACpC,wBAAwB,UAAU,CAAC,OAAO,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;IACjE,qBAAqB;IACrB,iBAAiB,CAAC,OAAO,KAAK,EAAE;IAChC,oBAAoB,MAAM,CAAC,KAAK,CAAC,CAAC;IAClC,oBAAoB,MAAM;IAC1B,iBAAiB;IACjB,aAAa;IACb,SAAS,CAAC,CAAC;IACX,KAAK,EAAE,YAAY,CAAC,CAAC;AACrB;IACA,CAAC,CAAC;AACF;IACO,MAAM,KAAK,GAAG,SAAS,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;IAC7C,IAAI,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;IAC7C,CAAC,CAAC;AACF;IACO,MAAM,cAAc,GAAG,WAAW;IACzC,IAAI,OAAO,WAAW,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IACpC,CAAC;;IC7GD,MAAM,qBAAqB,GAAG,GAAG,CAAC;IAClC,MAAM,0BAA0B,GAAG,GAAG,CAAC;AACvC;IACA,MAAM,sBAAsB,CAAC;AAC7B;IACA,IAAI,WAAW,GAAG;IAClB,QAAQ,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IAC5B,QAAQ,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IAC1B,QAAQ,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IAC1B,QAAQ,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IAC1B,QAAQ,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IACxB,QAAQ,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IACxB,QAAQ,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IACxB,QAAQ,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IACxB,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IACpB,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IACpB,QAAQ,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IACpB,QAAQ,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACzB,QAAQ,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACzB,QAAQ,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IAC1B,KAAK;AACL;IACA,IAAI,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,EAAE;IACxF,QAAQ,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACvB,QAAQ,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACvB,QAAQ,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACvB,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,QAAQ,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,QAAQ,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACnC,QAAQ,IAAI,CAAC,UAAU,EAAE,CAAC;IAC1B,KAAK;IACL,CAAC;AACD;IACO,MAAM,eAAe,CAAC;AAC7B;IACA,IAAI,WAAW,CAAC,gBAAgB,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,EAAE,SAAS,GAAG,0BAA0B,EAAE,UAAU,GAAG,qBAAqB,EAAE;IACpI,QAAQ,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACjD,QAAQ,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,QAAQ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,KAAK;AACL;IACA,IAAI,OAAO,iCAAiC,GAAG;IAC/C,QAAQ,OAAO,IAAI,sBAAsB,EAAE,CAAC;IAC5C,KAAK;AACL;IACA,IAAI,mCAAmC,CAAC,UAAU,EAAE;AACpD;IACA,QAAQ,MAAM,WAAW,GAAG,eAAe,CAAC,iCAAiC,EAAE,CAAC;IAChF,QAAQ,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACvE;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;IACxD,YAAY,IAAI,KAAK,CAAC;IACtB,YAAY,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE;IAC1C,gBAAgB,KAAK,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,aAAa,MAAM;IACnB,gBAAgB,KAAK,GAAG,GAAG,CAAC;IAC5B,aAAa;IACb,YAAY,IAAI,KAAK,IAAI,IAAI,CAAC,YAAY,EAAE;IAC5C,gBAAgB,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/F,qCAAqC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;IACjH,qCAAqC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACnI,qCAAqC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1I,aAAa;IACb,SAAS;AACT;IACA,QAAQ,MAAM,OAAO,GAAG,IAAI,CAAC,uCAAuC,CAAC,WAAW,CAAC,CAAC;AAClF;IACA,QAAQ,MAAM,gBAAgB,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC;IAClE,QAAQ,MAAM,UAAU,GAAG,WAAW,CAAC,eAAe,CAAC;IACvD,QAAQ,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IACnE,QAAQ,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC;IAC1C,QAAQ,CAAC,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,gBAAgB,CAAC;AACrE;IACA,QAAQ,IAAI,cAAc,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC;IACjG,QAAQ,IAAI,aAAa,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAAC;IAC/F,QAAQ,IAAI,aAAa,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAAC;IAC/F,QAAQ,IAAI,gBAAgB,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,gBAAgB,CAAC;IACrG,QAAQ,MAAM,YAAY,GAAG,IAAI,WAAW,CAAC,cAAc,GAAG,gBAAgB,CAAC,CAAC;IAChF,QAAQ,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,aAAa,GAAG,gBAAgB,CAAC,CAAC;IAC9E,QAAQ,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,aAAa,GAAG,gBAAgB,CAAC,CAAC;IAC9E,QAAQ,MAAM,cAAc,GAAG,IAAI,WAAW,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,CAAC;AACpF;IACA,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;IACnD,QAAQ,MAAM,qBAAqB,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,UAAU,CAAC;IACtG,QAAQ,MAAM,sBAAsB,GAAG,qBAAqB,GAAG,aAAa,CAAC;IAC7E,QAAQ,MAAM,2BAA2B,GAAG,qBAAqB,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1E;IACA,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACjD,QAAQ,MAAM,iBAAiB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACtD,QAAQ,IAAI,aAAa,GAAG,CAAC,CAAC;IAC9B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACjD,YAAY,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IACtC,YAAY,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAClD,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC3D,gBAAgB,IAAI,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3C,gBAAgB,IAAI,YAAY,GAAG,KAAK,CAAC;IACzC,gBAAgB,IAAI,GAAG,KAAK,CAAC,EAAE;IAC/B,oBAAoB,YAAY,GAAG,IAAI,CAAC;IACxC,iBAAiB;AACjB;IACA,gBAAgB,IAAI,IAAI,CAAC,gBAAgB,KAAK,CAAC,EAAE;IACjD,oBAAoB,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,YAAY,EAAE,aAAa,GAAG,cAAc,EAAE,CAAC,CAAC,CAAC;IACrG,oBAAoB,MAAM,KAAK,GAAG,IAAI,YAAY,CAAC,WAAW,EAAE,aAAa,GAAG,aAAa,EAAE,CAAC,CAAC,CAAC;IAClG,oBAAoB,MAAM,GAAG,GAAG,IAAI,YAAY,CAAC,cAAc,EAAE,aAAa,GAAG,gBAAgB,EAAE,CAAC,CAAC,CAAC;IACtG,oBAAoB,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;IACnE,wBAAwB,MAAM,IAAI,GAAG,IAAIA,gBAAK,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC;IAC9G,0DAA0D,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAChH,wBAAwB,IAAI,CAAC,SAAS,EAAE,CAAC;IACzC,wBAAwB,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,wBAAwB,KAAK,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3H,qBAAqB,MAAM;IAC3B,wBAAwB,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IACtD,wBAAwB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;IACtD,qBAAqB;IACrB,oBAAoB,MAAM,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtG,iBAAiB,MAAM;IACvB,oBAAoB,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,YAAY,EAAE,aAAa,GAAG,cAAc,EAAE,CAAC,CAAC,CAAC;IACpG,oBAAoB,MAAM,KAAK,GAAG,IAAI,WAAW,CAAC,WAAW,EAAE,aAAa,GAAG,aAAa,EAAE,CAAC,CAAC,CAAC;IACjG,oBAAoB,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,cAAc,EAAE,aAAa,GAAG,gBAAgB,EAAE,CAAC,CAAC,CAAC;IACrG,oBAAoB,MAAM,GAAG,GAAGA,gBAAK,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAACA,gBAAK,CAAC,SAAS,CAAC,CAAC;IAClF,oBAAoB,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;IACnE,wBAAwB,MAAM,IAAI,GAAG,IAAIA,gBAAK,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC;IAC9G,0DAA0D,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAChH,wBAAwB,IAAI,CAAC,SAAS,EAAE,CAAC;IACzC,wBAAwB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtF,wBAAwB,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1I,qBAAqB,MAAM;IAC3B,wBAAwB,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrE,wBAAwB,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACpD,qBAAqB;IACrB,oBAAoB,iBAAiB,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACjI,oBAAoB,iBAAiB,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,GAAG,sBAAsB,CAAC,GAAG,qBAAqB,CAAC;IAC3H,oBAAoB,iBAAiB,CAAC,CAAC,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,2BAA2B,CAAC,CAAC;IACrG,oBAAoB,iBAAiB,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,GAAG,sBAAsB,CAAC,GAAG,qBAAqB,CAAC;IAC3H,oBAAoB,iBAAiB,CAAC,CAAC,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,2BAA2B,CAAC,CAAC;IACrG,oBAAoB,iBAAiB,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,GAAG,sBAAsB,CAAC,GAAG,qBAAqB,CAAC;IAC3H,oBAAoB,iBAAiB,CAAC,CAAC,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC,EAAE,CAAC,EAAE,2BAA2B,CAAC,CAAC;IACrG,oBAAoB,MAAM,CAAC,GAAG,CAAC,CAAC,iBAAiB,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAAC;IAChG,iBAAiB;AACjB;IACA,gBAAgB,MAAM,IAAI,GAAG,IAAI,iBAAiB,CAAC,WAAW,EAAE,aAAa,GAAG,aAAa,EAAE,CAAC,CAAC,CAAC;IAClG,gBAAgB,IAAI,YAAY,EAAE;IAClC,oBAAoB,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IAClC,oBAAoB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,oBAAoB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,oBAAoB,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAChC,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;IAClE,wBAAwB,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvH,qBAAqB,MAAM;IAC3B,wBAAwB,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9C,qBAAqB;IACrB,oBAAoB,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;IACnE,wBAAwB,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC;IAC9D,qBAAqB,MAAM;IAC3B,wBAAwB,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC;IACtC,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,aAAa,EAAE,CAAC;IAChC,aAAa;IACb,SAAS;AACT;IACA,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC;IAClC,QAAQ,MAAM,WAAW,GAAG,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC;IAC5D,QAAQ,MAAM,mBAAmB,GAAG,YAAY,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU;IACpF,oCAAoC,WAAW,CAAC,UAAU,GAAG,cAAc,CAAC,UAAU,CAAC;AACvF;IACA,QAAQ,MAAM,iBAAiB,GAAG,IAAI,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACjE,QAAQ,MAAM,kBAAkB,GAAG,IAAI,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IACnE,QAAQ,IAAI,iBAAiB,GAAG,UAAU,GAAG,mBAAmB,CAAC;IACjE,QAAQ,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE;IACvC,YAAY,iBAAiB,IAAI,WAAW,CAAC;IAC7C,YAAY,iBAAiB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC;IACnD,YAAY,iBAAiB,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC;IAClD,YAAY,kBAAkB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;IACnD,YAAY,iBAAiB,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC;IAClD,YAAY,iBAAiB,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,UAAU,CAAC;IACnG,SAAS;AACT;IACA,QAAQ,MAAM,aAAa,GAAG,IAAI,WAAW,CAAC,iBAAiB,CAAC,CAAC;IACjE,QAAQ,IAAI,UAAU,CAAC,aAAa,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACjE,QAAQ,IAAI,UAAU,CAAC,aAAa,EAAE,UAAU,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;IAC7G,QAAQ,IAAI,UAAU,CAAC,aAAa,EAAE,UAAU,GAAG,YAAY,CAAC,UAAU,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IACrI,QAAQ,IAAI,UAAU,CAAC,aAAa,EAAE,UAAU,GAAG,YAAY,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU;IACnG,oBAAoB,WAAW,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;IAC7E,QAAQ,IAAI,UAAU,CAAC,aAAa,EAAE,UAAU,GAAG,YAAY,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU,GAAG,WAAW,CAAC,UAAU;IAC5H,oBAAoB,cAAc,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC;AACnF;IACA,QAAQ,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE;IACvC,YAAY,MAAM,WAAW,GAAG,IAAI,YAAY,CAAC,aAAa,EAAE,UAAU,GAAG,mBAAmB,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACtH,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACrD,gBAAgB,MAAM,MAAM,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1C,gBAAgB,MAAM,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;IACnC,gBAAgB,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACrD,gBAAgB,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACzD,gBAAgB,WAAW,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACzD,aAAa;IACb,SAAS;AACT;IACA,QAAQ,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,aAAa,CAAC,CAAC;IAC3D,QAAQ,OAAO,WAAW,CAAC;IAC3B,KAAK;AACL;IACA,IAAI,uCAAuC,CAAC,UAAU,EAAE;IACxD,QAAQ,IAAI,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;IAC/C,QAAQ,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IACzC,QAAQ,MAAM,aAAa,GAAG,SAAS,GAAG,GAAG,CAAC;AAC9C;IACA,QAAQ,MAAM,GAAG,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACxC,QAAQ,MAAM,GAAG,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACxC;IACA;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,MAAM,MAAM,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxF,YAAY,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAChE,YAAY,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAChE,YAAY,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAChE,YAAY,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAChE,YAAY,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAChE,YAAY,IAAI,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;IAChE,SAAS;AACT;IACA,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClE,QAAQ,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;IAC5D,QAAQ,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;AAC5D;IACA,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAChD,QAAQ,MAAM,WAAW,GAAG,EAAE,CAAC;IAC/B,QAAQ,MAAM,oBAAoB,GAAG,EAAE,CAAC;AACxC;IACA;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,MAAM,MAAM,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxF,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC;IACtE,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC;IACtE,YAAY,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC;AACtE;IACA,YAAY,WAAW,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,GAAG,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;IAC7E,YAAY,WAAW,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,GAAG,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;IAC7E,YAAY,WAAW,CAAC,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,IAAI,SAAS,GAAG,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;AAC7E;IACA,YAAY,MAAM,QAAQ,GAAG,MAAM,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,MAAM,GAAG,OAAO,GAAG,MAAM,CAAC;IACtF,YAAY,IAAI,MAAM,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IACxD,YAAY,IAAI,CAAC,MAAM,EAAE;IACzB,gBAAgB,oBAAoB,CAAC,QAAQ,CAAC,GAAG,MAAM,GAAG;IAC1D,oBAAoB,QAAQ,EAAE,EAAE;IAChC,oBAAoB,QAAQ,EAAE,WAAW,CAAC,OAAO,EAAE;IACnD,iBAAiB,CAAC;IAClB,aAAa;AACb;IACA,YAAY,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClC,YAAY,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,UAAU,EAAE;IACzD,gBAAgB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACzC,gBAAgB,oBAAoB,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;IACtD,aAAa;IACb,SAAS;AACT;IACA;IACA;IACA,QAAQ,KAAK,IAAI,QAAQ,IAAI,oBAAoB,EAAE;IACnD,YAAY,IAAI,oBAAoB,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;IAC/D,gBAAgB,MAAM,MAAM,GAAG,oBAAoB,CAAC,QAAQ,CAAC,CAAC;IAC9D,gBAAgB,IAAI,MAAM,EAAE;IAC5B,oBAAoB,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE;IACnE,wBAAwB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC9C,qBAAqB;IACrB,oBAAoB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC7C,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,OAAO,WAAW,CAAC;IAC3B,KAAK;IACL;;IC9RO,MAAM,SAAS,CAAC;AACvB;IACA,IAAI,WAAW,CAAC,SAAS,EAAE;IAC3B,QAAQ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,KAAK;AACL;IACA,IAAI,YAAY,CAAC,SAAS,EAAE;IAC5B,QAAQ,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;IAC1C,QAAQ,IAAI,YAAY,GAAG,CAAC,CAAC;IAC7B,QAAQ,IAAI,UAAU,GAAG,EAAE,CAAC;AAC5B;IACA,QAAQ,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,SAAS,CAAC,UAAU,GAAG,QAAQ,CAAC,CAAC;AACrE;IACA,QAAQ,MAAM,aAAa,GAAG,GAAG,CAAC;AAClC;IACA,QAAQ,OAAO,IAAI,EAAE;IACrB,YAAY,IAAI,YAAY,GAAG,aAAa,IAAI,SAAS,CAAC,UAAU,EAAE;IACtE,gBAAgB,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IACzF,aAAa;IACb,YAAY,MAAM,WAAW,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;IACvF,YAAY,UAAU,IAAI,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACtD,YAAY,YAAY,IAAI,aAAa,CAAC;AAC1C;IACA,YAAY,MAAM,kBAAkB,GAAG,IAAI,UAAU,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,YAAY,GAAG,aAAa,GAAG,CAAC,CAAC,EAAE,aAAa,GAAG,CAAC,CAAC,CAAC;IACnI,YAAY,MAAM,iBAAiB,GAAG,OAAO,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;IACzE,YAAY,IAAI,iBAAiB,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;IAC1D,gBAAgB,MAAM;IACtB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,MAAM,WAAW,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACnD;IACA,QAAQ,IAAI,UAAU,GAAG,CAAC,CAAC;IAC3B,QAAQ,IAAI,aAAa,GAAG,EAAE,CAAC;AAC/B;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACrD,YAAY,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAC/C,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,EAAE;IACnD,gBAAgB,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC1D,gBAAgB,IAAI,eAAe,EAAE;IACrC,oBAAoB,UAAU,GAAG,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9D,iBAAiB;IACjB,aAAa,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;IACpD,gBAAgB,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC;IAC1E,gBAAgB,IAAI,aAAa,EAAE;IACnC,oBAAoB,MAAM,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAC1D,oBAAoB,MAAM,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;IAC1D,oBAAoB,aAAa,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;IAC/D,iBAAiB;IACjB,aAAa,MAAM,IAAI,IAAI,KAAK,YAAY,EAAE;IAC9C,gBAAgB,MAAM;IACtB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,MAAM,gBAAgB,GAAG,UAAU,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;IAC5F,QAAQ,MAAM,UAAU,GAAG,IAAI,QAAQ,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC;AACrE;IACA,QAAQ,OAAO;IACf,YAAY,YAAY,EAAE,UAAU;IACpC,YAAY,eAAe,EAAE,aAAa;IAC1C,YAAY,YAAY,EAAE,UAAU;IACpC,YAAY,cAAc,EAAE,YAAY;IACxC,SAAS,CAAC;IACV,KAAK;AACL;IACA,IAAI,iBAAiB,CAAC,UAAU,EAAE,MAAM,EAAE,YAAY,EAAE,gBAAgB,EAAE,aAAa,EAAE,SAAS,EAAE;IACpG,QAAQ,IAAI,SAAS,GAAG,SAAS,IAAI,EAAE,CAAC;IACxC,QAAQ,KAAK,IAAI,QAAQ,IAAI,gBAAgB,EAAE;IAC/C,YAAY,MAAM,YAAY,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;IACzD,YAAY,IAAI,YAAY,KAAK,OAAO,EAAE;IAC1C,gBAAgB,SAAS,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;IACnG,aAAa,MAAM,IAAI,YAAY,KAAK,OAAO,EAAE;IACjD,gBAAgB,SAAS,CAAC,QAAQ,CAAC,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC,GAAG,KAAK,CAAC;IACnG,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,kBAAkB,CAAC,gBAAgB,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE;AAC9E;IACA,QAAQ,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;AAC5C;IACA,QAAQ,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;AAC/C;IACA,QAAQ,MAAM,CAAC,UAAU,EAAE,aAAa,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC1F;IACA;IACA,QAAQ,IAAI,WAAW,GAAG,CAAC,CAAC;IAC5B,QAAQ,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;IAClD,YAAY,IAAI,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;IACpD,gBAAgB,WAAW,IAAI,CAAC,CAAC;IACjC,aAAa;IACb,SAAS;IACT,QAAQ,MAAM,eAAe,GAAG,WAAW,GAAG,CAAC,CAAC;AAChD;IACA;IACA;IACA,QAAQ,MAAM,wBAAwB,GAAG,CAAC,CAAC;AAC3C;IACA,QAAQ,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,wBAAwB,EAAE,OAAO,EAAE,eAAe,EAAE,wBAAwB,CAAC,CAAC;AACrH;IACA;IACA,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC;IAClC,QAAQ,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE;IAC1C,YAAY,cAAc,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/C,SAAS;IACT,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,EAAE,CAAC,EAAE;IAClD,YAAY,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE;IAC9C,gBAAgB,cAAc,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,GAAG,GAAG,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3E,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,UAAU,GAAG,CAAC,CAAC;IAC3B,QAAQ,IAAI,YAAY,GAAG,EAAE,CAAC;IAC9B,QAAQ,MAAM,SAAS,GAAG;IAC1B,YAAY,QAAQ,EAAE,CAAC;IACvB,YAAY,KAAK,EAAE,CAAC;IACpB,YAAY,MAAM,EAAE,CAAC;IACrB,YAAY,OAAO,EAAE,CAAC;IACtB,YAAY,OAAO,EAAE,CAAC;IACtB,YAAY,QAAQ,EAAE,CAAC;IACvB,YAAY,OAAO,EAAE,CAAC;IACtB,SAAS,CAAC;IACV,QAAQ,KAAK,IAAI,SAAS,IAAI,aAAa,EAAE;IAC7C,YAAY,IAAI,aAAa,CAAC,cAAc,CAAC,SAAS,CAAC,EAAE;IACzD,gBAAgB,MAAM,IAAI,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;IACtD,gBAAgB,YAAY,CAAC,SAAS,CAAC,GAAG,UAAU,CAAC;IACrD,gBAAgB,UAAU,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;IAC9C,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,SAAS,GAAG,EAAE,CAAC;AAC3B;IACA,QAAQ,MAAM,gBAAgB,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO;IACrG,kCAAkC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;AAC1F;IACA,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,iCAAiC,EAAE,CAAC;AAC/E;IACA,QAAQ,KAAK,IAAI,GAAG,GAAG,CAAC,EAAE,GAAG,GAAG,UAAU,EAAE,GAAG,EAAE,EAAE;IACnD,YAAY,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,GAAG,GAAG,UAAU,EAAE,YAAY,EAAE,gBAAgB,EAAE,aAAa,EAAE,SAAS,CAAC,CAAC;IAC3H,YAAY,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;IACpD,gBAAgB,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5E,gBAAgB,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5E,gBAAgB,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IAC5E,aAAa,MAAM;IACnB,gBAAgB,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IAClD,gBAAgB,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IAClD,gBAAgB,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;IAClD,aAAa;AACb;IACA,YAAY,IAAI,SAAS,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;IACnD,gBAAgB,MAAM,KAAK,GAAG,mBAAmB,CAAC;IAClD,gBAAgB,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC;IACtF,gBAAgB,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC;IACtF,gBAAgB,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAC;IACtF,aAAa,MAAM;IACnB,gBAAgB,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9C,gBAAgB,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9C,gBAAgB,UAAU,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9C,aAAa;IACb,YAAY,IAAI,SAAS,CAAC,SAAS,CAAC,KAAK,SAAS,EAAE;IACpD,gBAAgB,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;IAC/F,aAAa;AACb;IACA,YAAY,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1D,YAAY,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1D,YAAY,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;IAC1D,YAAY,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC;AAC1D;IACA,YAAY,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IAClD,YAAY,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IAClD,YAAY,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IAClD,YAAY,UAAU,CAAC,UAAU,EAAE,CAAC;IACpC,SAAS;AACT;IACA,QAAQ,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,gBAAgB,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IAC3G,QAAQ,MAAM,WAAW,GAAG,eAAe,CAAC,mCAAmC,CAAC,UAAU,CAAC,CAAC;AAC5F;IACA,QAAQ,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,WAAW,CAAC,aAAa,EAAE,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC/F;IACA,QAAQ,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;AAC1C;IACA,QAAQ,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;IACtD,QAAQ,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,OAAO,GAAG,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;AAC9E;IACA,QAAQ,OAAO,WAAW,CAAC;IAC3B,KAAK;AACL;IACA;;IC1LO,MAAM,SAAS,CAAC;AACvB;IACA,IAAI,WAAW,GAAG;IAClB,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAChC,KAAK;AACL;IACA,IAAI,WAAW,CAAC,QAAQ,EAAE,UAAU,EAAE,gBAAgB,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE;IAC7F,QAAQ,OAAO,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,WAAW,KAAK;IAC7E,YAAY,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,WAAW,CAAC,CAAC;IACzD,YAAY,MAAM,WAAW,GAAG,SAAS,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IACpH,YAAY,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IAC3C,YAAY,OAAO,WAAW,CAAC;IAC/B,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA;;ICbO,MAAM,WAAW,CAAC;AACzB;IACA,IAAI,WAAW,CAAC,WAAW,GAAG,IAAI,EAAE;IACpC,QAAQ,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IACjC,KAAK;AACL;IACA,IAAI,OAAO,iBAAiB,CAAC,QAAQ,EAAE;IACvC,QAAQ,OAAO,WAAW,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,WAAW,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IACxG,KAAK;AACL;IACA,IAAI,OAAO,mBAAmB,CAAC,QAAQ,EAAE;IACzC,QAAQ,OAAO,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;IAC5C,KAAK;AACL;IACA,IAAI,OAAO,qBAAqB,CAAC,QAAQ,EAAE;IAC3C,QAAQ,OAAO,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC3C,KAAK;AACL;IACA,IAAI,WAAW,CAAC,QAAQ,EAAE,UAAU,EAAE,gBAAgB,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,EAAE;IAC7F,QAAQ,OAAO,iBAAiB,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK;IAC5E,YAAY,IAAI,WAAW,CAAC;IAC5B,YAAY,IAAI,WAAW,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE;IAC3D,gBAAgB,WAAW,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;IAC1D,aAAa,MAAM;IACnB,gBAAgB,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,gBAAgB,EAAE,YAAY,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IACnH,gBAAgB,MAAM,UAAU,GAAG,WAAW,CAAC,0CAA0C,CAAC,UAAU,CAAC,CAAC;IACtG,gBAAgB,WAAW,GAAG,eAAe,CAAC,mCAAmC,CAAC,UAAU,CAAC,CAAC;IAC9F,aAAa;IACb,YAAY,OAAO,WAAW,CAAC;IAC/B,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA,IAAI,OAAO,0CAA0C,CAAC,QAAQ,EAAE;IAChE;IACA;IACA;IACA;IACA;AACA;IACA,QAAQ,MAAM,oBAAoB,GAAG,EAAE,CAAC;IACxC,QAAQ,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,GAAG,oBAAoB,CAAC;AACtE;IACA,QAAQ,MAAM,UAAU,GAAG,eAAe,CAAC,iCAAiC,EAAE,CAAC;AAC/E;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,MAAM,iBAAiB,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5C,YAAY,MAAM,gBAAgB,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3C,YAAY,MAAM,gBAAgB,GAAG,CAAC,CAAC;IACvC,YAAY,MAAM,MAAM,GAAG,CAAC,GAAG,oBAAoB,CAAC;IACpD,YAAY,MAAM,QAAQ,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IACnE,YAAY,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,QAAQ,EAAE,MAAM,GAAG,iBAAiB,EAAE,CAAC,CAAC,CAAC;IACtF,YAAY,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,QAAQ,EAAE,MAAM,GAAG,iBAAiB,GAAG,gBAAgB,EAAE,CAAC,CAAC,CAAC;IACvG,YAAY,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,QAAQ,EAAE,MAAM,GAAG,iBAAiB,GAAG,gBAAgB,GAAG,gBAAgB,EAAE,CAAC,CAAC,CAAC;AAC7H;IACA,YAAY,MAAM,IAAI,GAAG,IAAIA,gBAAK,CAAC,UAAU,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG;IACtG,8CAA8C,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;IACxG,YAAY,IAAI,CAAC,SAAS,EAAE,CAAC;AAC7B;IACA,YAAY,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;IACzG,gCAAgC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAChH,SAAS;AACT;IACA,QAAQ,OAAO,UAAU,CAAC;IAC1B,KAAK;AACL;IACA,IAAI,aAAa,CAAC,WAAW,EAAE;IAC/B,QAAQ,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACvC,KAAK;AACL;IACA,IAAI,YAAY,CAAC,QAAQ,EAAE;IAC3B,QAAQ,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,mBAAmB,EAAE,CAAC,CAAC;IAClF,QAAQ,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC,CAAC;IAChF,QAAQ,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,UAAU,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,EAAE;IACrE,YAAY,IAAI,EAAE,0BAA0B;IAC5C,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE;IAChC,YAAY,IAAI,CAAC,YAAY,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;IAC5D,YAAY,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACzD,SAAS;IACT,QAAQ,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC9C,QAAQ,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC3D,QAAQ,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;IAClC,KAAK;AACL;IACA;;IC9EA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,MAAM,YAAY,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;IACxC,MAAM,WAAW,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;IACtC,MAAM,SAAS,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IAClC,MAAM,IAAI,GAAG,IAAIC,SAAG,EAAE,CAAC;IACvB,MAAM,MAAM,GAAG,IAAIC,WAAK,EAAE,CAAC;IAC3B,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,EAAE,EAAE,GAAGC,eAAS,CAAC,OAAO,EAAE,CAAC;AACtD;IACA,MAAM,aAAa,SAASC,qBAAe,CAAC;AAC5C;IACA,IAAI,WAAW,EAAE,MAAM,EAAE,UAAU,GAAG;AACtC;IACA,QAAQ,KAAK,EAAE,CAAC;AAChB;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,QAAQ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,GAAG,MAAM,CAAC;AACnD;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;AAC5B;IACA;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAIC,aAAO,EAAE,CAAC;AACpC;IACA;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC;IAC7B,QAAQ,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;AACpC;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;IACzB,QAAQ,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;AAChC;IACA;IACA;IACA,QAAQ,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC;IAC/B,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC;AACrC;IACA;IACA;IACA,QAAQ,IAAI,CAAC,eAAe,GAAG,EAAE,QAAQ,CAAC;IAC1C,QAAQ,IAAI,CAAC,eAAe,GAAG,QAAQ,CAAC;AACxC;IACA;IACA;IACA,QAAQ,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IACnC,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAClC;IACA;IACA;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC/B,QAAQ,IAAI,CAAC,SAAS,GAAG,GAAG,CAAC;AAC7B;IACA;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IACjC,QAAQ,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;AAC/B;IACA;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,QAAQ,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC;IAC5B,QAAQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACvC,QAAQ,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;IAC/B,QAAQ,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;AAClC;IACA;IACA;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAChC,QAAQ,IAAI,CAAC,eAAe,GAAG,GAAG,CAAC;AACnC;IACA;IACA,QAAQ,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;AAChF;IACA;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,EAAE,IAAI,EAAEC,WAAK,CAAC,MAAM,EAAE,MAAM,EAAEA,WAAK,CAAC,KAAK,EAAE,KAAK,EAAEA,WAAK,CAAC,GAAG,EAAE,CAAC;AAC1F;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,EAAEC,WAAK,CAAC,MAAM,EAAE,GAAG,EAAEA,WAAK,CAAC,SAAS,EAAE,CAAC;AACnE;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IAC3C,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;IACtD,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;AACtC;IACA;IACA,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;AACzC;IACA;IACA;IACA;AACA;IACA,QAAQ,IAAI,CAAC,aAAa,GAAG,WAAW;AACxC;IACA,YAAY,OAAO,SAAS,CAAC,GAAG,CAAC;AACjC;IACA,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,CAAC,iBAAiB,GAAG,WAAW;AAC5C;IACA,YAAY,OAAO,SAAS,CAAC,KAAK,CAAC;AACnC;IACA,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,WAAW;AACtC;IACA,YAAY,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC;AAClE;IACA,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,CAAC,iBAAiB,GAAG,UAAU,UAAU,GAAG;AACxD;IACA,YAAY,UAAU,CAAC,gBAAgB,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;IAChE,YAAY,IAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC;AACnD;IACA,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,CAAC,qBAAqB,GAAG,WAAW;AAChD;IACA,YAAY,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;IAClF,YAAY,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;AAC7C;IACA,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,WAAW;AACpC;IACA,YAAY,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;IAC/C,YAAY,KAAK,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IAC1D,YAAY,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;AAC5C;IACA,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,CAAC,KAAK,GAAG,WAAW;AAChC;IACA,YAAY,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;IAC/C,YAAY,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC;IAC1D,YAAY,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC;AAC5C;IACA,YAAY,KAAK,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;IAClD,YAAY,KAAK,CAAC,aAAa,EAAE,YAAY,EAAE,CAAC;AAChD;IACA,YAAY,KAAK,CAAC,MAAM,EAAE,CAAC;AAC3B;IACA,YAAY,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;AAC/B;IACA,SAAS,CAAC;AACV;IACA;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,WAAW;AACjC;IACA,YAAY,MAAM,MAAM,GAAG,IAAIF,aAAO,EAAE,CAAC;AACzC;IACA;IACA,YAAY,MAAM,IAAI,GAAG,IAAIG,gBAAU,EAAE,CAAC,kBAAkB,EAAE,MAAM,CAAC,EAAE,EAAE,IAAIH,aAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAClG,YAAY,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,CAAC;AACtD;IACA,YAAY,MAAM,YAAY,GAAG,IAAIA,aAAO,EAAE,CAAC;IAC/C,YAAY,MAAM,cAAc,GAAG,IAAIG,gBAAU,EAAE,CAAC;IACpD,YAAY,MAAM,kBAAkB,GAAG,IAAIH,aAAO,EAAE,CAAC;AACrD;IACA,YAAY,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,CAAC;AACtC;IACA,YAAY,OAAO,SAAS,MAAM,GAAG;AACrC;IACA,gBAAgB,IAAI,CAAC,kBAAkB,EAAE,MAAM,CAAC,EAAE,EAAE,IAAIA,aAAO,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;IAC7E,gBAAgB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC;AAChD;IACA,gBAAgB,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;AACvD;IACA,gBAAgB,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;AAC5D;IACA;IACA,gBAAgB,MAAM,CAAC,eAAe,EAAE,IAAI,EAAE,CAAC;AAC/C;IACA;IACA,gBAAgB,SAAS,CAAC,cAAc,EAAE,MAAM,EAAE,CAAC;AACnD;IACA,gBAAgB,KAAK,KAAK,CAAC,UAAU,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,GAAG;AAChE;IACA,oBAAoB,UAAU,EAAE,oBAAoB,EAAE,EAAE,CAAC;AACzD;IACA,iBAAiB;AACjB;IACA,gBAAgB,KAAK,KAAK,CAAC,aAAa,GAAG;AAC3C;IACA,oBAAoB,SAAS,CAAC,KAAK,IAAI,cAAc,CAAC,KAAK,GAAG,KAAK,CAAC,aAAa,CAAC;IAClF,oBAAoB,SAAS,CAAC,GAAG,IAAI,cAAc,CAAC,GAAG,GAAG,KAAK,CAAC,aAAa,CAAC;AAC9E;IACA,iBAAiB,MAAM;AACvB;IACA,oBAAoB,SAAS,CAAC,KAAK,IAAI,cAAc,CAAC,KAAK,CAAC;IAC5D,oBAAoB,SAAS,CAAC,GAAG,IAAI,cAAc,CAAC,GAAG,CAAC;AACxD;IACA,iBAAiB;AACjB;IACA;AACA;IACA,gBAAgB,IAAI,GAAG,GAAG,KAAK,CAAC,eAAe,CAAC;IAChD,gBAAgB,IAAI,GAAG,GAAG,KAAK,CAAC,eAAe,CAAC;AAChD;IACA,gBAAgB,KAAK,QAAQ,EAAE,GAAG,EAAE,IAAI,QAAQ,EAAE,GAAG,EAAE,GAAG;AAC1D;IACA,oBAAoB,KAAK,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,IAAI,KAAK,CAAC;AAChG;IACA,oBAAoB,KAAK,GAAG,GAAG,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,IAAI,KAAK,CAAC;AAChG;IACA,oBAAoB,KAAK,GAAG,IAAI,GAAG,GAAG;AACtC;IACA,wBAAwB,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,CAAC,KAAK,EAAE,EAAE,CAAC;AAC5F;IACA,qBAAqB,MAAM;AAC3B;IACA,wBAAwB,SAAS,CAAC,KAAK,GAAG,EAAE,SAAS,CAAC,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,KAAK,CAAC;IAC/E,4BAA4B,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,CAAC,KAAK,EAAE;IAC5D,4BAA4B,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,SAAS,CAAC,KAAK,EAAE,CAAC;AAC7D;IACA,qBAAqB;AACrB;IACA,iBAAiB;AACjB;IACA;IACA,gBAAgB,SAAS,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC,GAAG,EAAE,EAAE,CAAC;AAChH;IACA,gBAAgB,SAAS,CAAC,QAAQ,EAAE,CAAC;AACrC;AACA;IACA;AACA;IACA,gBAAgB,KAAK,KAAK,CAAC,aAAa,KAAK,IAAI,GAAG;AACpD;IACA,oBAAoB,KAAK,CAAC,MAAM,CAAC,eAAe,EAAE,SAAS,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC;AACnF;IACA,iBAAiB,MAAM;AACvB;IACA,oBAAoB,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,SAAS,EAAE,CAAC;AAClD;IACA,iBAAiB;AACjB;IACA;IACA;IACA,gBAAgB,KAAK,KAAK,CAAC,YAAY,IAAI,iBAAiB,IAAI,KAAK,CAAC,MAAM,CAAC,oBAAoB,GAAG;AACpG;IACA,oBAAoB,SAAS,CAAC,MAAM,GAAG,aAAa,EAAE,SAAS,CAAC,MAAM,EAAE,CAAC;AACzE;IACA,iBAAiB,MAAM;AACvB;IACA,oBAAoB,SAAS,CAAC,MAAM,GAAG,aAAa,EAAE,SAAS,CAAC,MAAM,GAAG,KAAK,EAAE,CAAC;AACjF;IACA,iBAAiB;AACjB;AACA;IACA,gBAAgB,MAAM,CAAC,gBAAgB,EAAE,SAAS,EAAE,CAAC;AACrD;IACA;IACA,gBAAgB,MAAM,CAAC,eAAe,EAAE,WAAW,EAAE,CAAC;AACtD;IACA,gBAAgB,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,MAAM,EAAE,CAAC;AAC5D;IACA,gBAAgB,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;AACpD;IACA,gBAAgB,KAAK,KAAK,CAAC,aAAa,KAAK,IAAI,GAAG;AACpD;IACA,oBAAoB,cAAc,CAAC,KAAK,MAAM,CAAC,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;IACxE,oBAAoB,cAAc,CAAC,GAAG,MAAM,CAAC,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;AACtE;IACA,oBAAoB,SAAS,CAAC,cAAc,EAAE,CAAC,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;AACxE;IACA,iBAAiB,MAAM;AACvB;IACA,oBAAoB,cAAc,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAClD;IACA,oBAAoB,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AAC7C;IACA,iBAAiB;AACjB;IACA;IACA,gBAAgB,IAAI,WAAW,GAAG,KAAK,CAAC;IACxC,gBAAgB,KAAK,KAAK,CAAC,YAAY,IAAI,iBAAiB,GAAG;AAC/D;IACA,oBAAoB,IAAI,SAAS,GAAG,IAAI,CAAC;IACzC,oBAAoB,KAAK,KAAK,CAAC,MAAM,CAAC,mBAAmB,GAAG;AAC5D;IACA;IACA;IACA,wBAAwB,MAAM,UAAU,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;IAC3D,wBAAwB,SAAS,GAAG,aAAa,EAAE,UAAU,GAAG,KAAK,EAAE,CAAC;AACxE;IACA,wBAAwB,MAAM,WAAW,GAAG,UAAU,GAAG,SAAS,CAAC;IACnE,wBAAwB,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC;IAC7F,wBAAwB,KAAK,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;AACzD;IACA,qBAAqB,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,oBAAoB,GAAG;AACpE;IACA;IACA,wBAAwB,MAAM,WAAW,GAAG,IAAIA,aAAO,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAC/E,wBAAwB,WAAW,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;AAC9D;IACA,wBAAwB,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;IAC5H,wBAAwB,KAAK,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;IAC9D,wBAAwB,WAAW,GAAG,IAAI,CAAC;AAC3C;IACA,wBAAwB,MAAM,UAAU,GAAG,IAAIA,aAAO,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC;IAC9E,wBAAwB,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;AAC7D;IACA,wBAAwB,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,UAAU,EAAE,CAAC,GAAG,EAAE,WAAW,EAAE,CAAC;IACnF,wBAAwB,KAAK,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC;AACzD;IACA,wBAAwB,SAAS,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AACpD;IACA,qBAAqB,MAAM;AAC3B;IACA,wBAAwB,OAAO,CAAC,IAAI,EAAE,yFAAyF,EAAE,CAAC;IAClI,wBAAwB,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC;AACnD;IACA,qBAAqB;AACrB;IACA;IACA,oBAAoB,KAAK,SAAS,KAAK,IAAI,GAAG;AAC9C;IACA,wBAAwB,KAAK,IAAI,CAAC,kBAAkB,GAAG;AACvD;IACA;IACA,4BAA4B,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE;IACzD,iCAAiC,kBAAkB,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE;IAC1E,iCAAiC,cAAc,EAAE,SAAS,EAAE;IAC5D,iCAAiC,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;AAC9D;IACA,yBAAyB,MAAM;AAC/B;IACA;IACA,4BAA4B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IACtE,4BAA4B,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,kBAAkB,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;AACtG;IACA;IACA;IACA,4BAA4B,KAAK,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,GAAG,UAAU,GAAG;AAClG;IACA,gCAAgC,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;AAC9D;IACA,6BAA6B,MAAM;AACnC;IACA,gCAAgC,MAAM,CAAC,6BAA6B,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;IACtG,gCAAgC,IAAI,CAAC,cAAc,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;AAC5E;IACA,6BAA6B;AAC7B;IACA,yBAAyB;AACzB;IACA,qBAAqB;AACrB;IACA,iBAAiB,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,oBAAoB,GAAG;AAChE;IACA,oBAAoB,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC;IACxH,oBAAoB,KAAK,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;IAC1D,oBAAoB,WAAW,GAAG,IAAI,CAAC;AACvC;IACA,iBAAiB;AACjB;IACA,gBAAgB,KAAK,GAAG,CAAC,CAAC;IAC1B,gBAAgB,iBAAiB,GAAG,KAAK,CAAC;AAC1C;IACA;IACA;IACA;AACA;IACA,gBAAgB,KAAK,WAAW;IAChC,oBAAoB,YAAY,CAAC,iBAAiB,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,GAAG,GAAG;IACjF,oBAAoB,CAAC,KAAK,CAAC,GAAG,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,EAAE,GAAG,GAAG;IACnF,oBAAoB,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG;AAC/E;IACA,oBAAoB,KAAK,CAAC,aAAa,EAAE,YAAY,EAAE,CAAC;AACxD;IACA,oBAAoB,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;IAC/D,oBAAoB,cAAc,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;IACnE,oBAAoB,kBAAkB,CAAC,IAAI,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;AAC5D;IACA,oBAAoB,WAAW,GAAG,KAAK,CAAC;AACxC;IACA,oBAAoB,OAAO,IAAI,CAAC;AAChC;IACA,iBAAiB;AACjB;IACA,gBAAgB,OAAO,KAAK,CAAC;AAC7B;IACA,aAAa,CAAC;AACd;IACA,SAAS,EAAE,CAAC;AACZ;IACA,QAAQ,IAAI,CAAC,OAAO,GAAG,WAAW;AAClC;IACA,YAAY,KAAK,CAAC,UAAU,CAAC,mBAAmB,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;AACjF;IACA,YAAY,KAAK,CAAC,UAAU,CAAC,mBAAmB,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;IACjF,YAAY,KAAK,CAAC,UAAU,CAAC,mBAAmB,EAAE,eAAe,EAAE,WAAW,EAAE,CAAC;IACjF,YAAY,KAAK,CAAC,UAAU,CAAC,mBAAmB,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;AAC1E;IACA,YAAY,KAAK,CAAC,UAAU,CAAC,mBAAmB,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;IACjF,YAAY,KAAK,CAAC,UAAU,CAAC,mBAAmB,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC;AAC7E;AACA;IACA,YAAY,KAAK,KAAK,CAAC,oBAAoB,KAAK,IAAI,GAAG;AACvD;IACA,gBAAgB,KAAK,CAAC,oBAAoB,CAAC,mBAAmB,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC;IACvF,gBAAgB,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC;AAClD;IACA,aAAa;AACb;IACA,SAAS,CAAC;AACV;IACA;IACA;IACA;AACA;IACA,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC;AAC3B;IACA,QAAQ,MAAM,KAAK,GAAG;IACtB,YAAY,IAAI,EAAE,EAAE,CAAC;IACrB,YAAY,MAAM,EAAE,CAAC;IACrB,YAAY,KAAK,EAAE,CAAC;IACpB,YAAY,GAAG,EAAE,CAAC;IAClB,YAAY,YAAY,EAAE,CAAC;IAC3B,YAAY,SAAS,EAAE,CAAC;IACxB,YAAY,eAAe,EAAE,CAAC;IAC9B,YAAY,kBAAkB,EAAE,CAAC;IACjC,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;AAC/B;IACA,QAAQ,MAAM,GAAG,GAAG,QAAQ,CAAC;AAC7B;IACA;IACA,QAAQ,MAAM,SAAS,GAAG,IAAII,eAAS,EAAE,CAAC;IAC1C,QAAQ,MAAM,cAAc,GAAG,IAAIA,eAAS,EAAE,CAAC;AAC/C;IACA,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;IACtB,QAAQ,MAAM,SAAS,GAAG,IAAIJ,aAAO,EAAE,CAAC;AACxC;IACA,QAAQ,MAAM,WAAW,GAAG,IAAIK,aAAO,EAAE,CAAC;IAC1C,QAAQ,MAAM,SAAS,GAAG,IAAIA,aAAO,EAAE,CAAC;IACxC,QAAQ,MAAM,WAAW,GAAG,IAAIA,aAAO,EAAE,CAAC;AAC1C;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,aAAO,EAAE,CAAC;IACvC,QAAQ,MAAM,MAAM,GAAG,IAAIA,aAAO,EAAE,CAAC;IACrC,QAAQ,MAAM,QAAQ,GAAG,IAAIA,aAAO,EAAE,CAAC;AACvC;IACA,QAAQ,MAAM,UAAU,GAAG,IAAIA,aAAO,EAAE,CAAC;IACzC,QAAQ,MAAM,QAAQ,GAAG,IAAIA,aAAO,EAAE,CAAC;IACvC,QAAQ,MAAM,UAAU,GAAG,IAAIA,aAAO,EAAE,CAAC;AACzC;IACA,QAAQ,MAAM,cAAc,GAAG,IAAIL,aAAO,EAAE,CAAC;IAC7C,QAAQ,MAAM,KAAK,GAAG,IAAIK,aAAO,EAAE,CAAC;IACpC,QAAQ,IAAI,iBAAiB,GAAG,KAAK,CAAC;AACtC;IACA,QAAQ,MAAM,QAAQ,GAAG,EAAE,CAAC;IAC5B,QAAQ,MAAM,gBAAgB,GAAG,EAAE,CAAC;AACpC;IACA,QAAQ,SAAS,oBAAoB,GAAG;AACxC;IACA,YAAY,OAAO,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,KAAK,CAAC,eAAe,CAAC;AACjE;IACA,SAAS;AACT;IACA,QAAQ,SAAS,YAAY,GAAG;AAChC;IACA,YAAY,OAAO,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC;AACrD;IACA,SAAS;AACT;IACA,QAAQ,SAAS,UAAU,EAAE,KAAK,GAAG;AACrC;IACA,YAAY,cAAc,CAAC,KAAK,IAAI,KAAK,CAAC;AAC1C;IACA,SAAS;AACT;IACA,QAAQ,SAAS,QAAQ,EAAE,KAAK,GAAG;AACnC;IACA,YAAY,cAAc,CAAC,GAAG,IAAI,KAAK,CAAC;AACxC;IACA,SAAS;AACT;IACA,QAAQ,MAAM,OAAO,GAAG,WAAW;AACnC;IACA,YAAY,MAAM,CAAC,GAAG,IAAIL,aAAO,EAAE,CAAC;AACpC;IACA,YAAY,OAAO,SAAS,OAAO,EAAE,QAAQ,EAAE,YAAY,GAAG;AAC9D;IACA,gBAAgB,CAAC,CAAC,mBAAmB,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;IACzD,gBAAgB,CAAC,CAAC,cAAc,EAAE,EAAE,QAAQ,EAAE,CAAC;AAC/C;IACA,gBAAgB,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;AACnC;IACA,aAAa,CAAC;AACd;IACA,SAAS,EAAE,CAAC;AACZ;IACA,QAAQ,MAAM,KAAK,GAAG,WAAW;AACjC;IACA,YAAY,MAAM,CAAC,GAAG,IAAIA,aAAO,EAAE,CAAC;AACpC;IACA,YAAY,OAAO,SAAS,KAAK,EAAE,QAAQ,EAAE,YAAY,GAAG;AAC5D;IACA,gBAAgB,KAAK,KAAK,CAAC,kBAAkB,KAAK,IAAI,GAAG;AACzD;IACA,oBAAoB,CAAC,CAAC,mBAAmB,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;AAC7D;IACA,iBAAiB,MAAM;AACvB;IACA,oBAAoB,CAAC,CAAC,mBAAmB,EAAE,YAAY,EAAE,CAAC,EAAE,CAAC;IAC7D,oBAAoB,CAAC,CAAC,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;AACzD;IACA,iBAAiB;AACjB;IACA,gBAAgB,CAAC,CAAC,cAAc,EAAE,QAAQ,EAAE,CAAC;AAC7C;IACA,gBAAgB,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC;AACnC;IACA,aAAa,CAAC;AACd;IACA,SAAS,EAAE,CAAC;AACZ;IACA;IACA,QAAQ,MAAM,GAAG,GAAG,WAAW;AAC/B;IACA,YAAY,MAAM,MAAM,GAAG,IAAIA,aAAO,EAAE,CAAC;AACzC;IACA,YAAY,OAAO,SAAS,GAAG,EAAE,MAAM,EAAE,MAAM,GAAG;AAClD;IACA,gBAAgB,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC;AACjD;IACA,gBAAgB,KAAK,KAAK,CAAC,MAAM,CAAC,mBAAmB,GAAG;AACxD;IACA;IACA,oBAAoB,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC;IAC3D,oBAAoB,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,GAAG,EAAE,KAAK,CAAC,MAAM,EAAE,CAAC;IAChE,oBAAoB,IAAI,cAAc,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC;AACzD;IACA;IACA,oBAAoB,cAAc,IAAI,IAAI,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,MAAM,CAAC,GAAG,GAAG,CAAC,KAAK,IAAI,CAAC,EAAE,GAAG,KAAK,EAAE,CAAC;AAC7F;IACA;IACA,oBAAoB,OAAO,EAAE,CAAC,GAAG,MAAM,GAAG,cAAc,GAAG,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IACvG,oBAAoB,KAAK,EAAE,CAAC,GAAG,MAAM,GAAG,cAAc,GAAG,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;AACrG;IACA,iBAAiB,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,oBAAoB,GAAG;AAChE;IACA;IACA,oBAAoB,OAAO,EAAE,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE;IAChF,wCAAwC,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IACvG,oBAAoB,KAAK,EAAE,MAAM,KAAK,KAAK,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI;IAClG,sCAAsC,OAAO,CAAC,YAAY,EAAE,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;AAClF;IACA,iBAAiB,MAAM;AACvB;IACA;IACA,oBAAoB,OAAO,CAAC,IAAI,EAAE,8EAA8E,EAAE,CAAC;IACnH,oBAAoB,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;AAC5C;IACA,iBAAiB;AACjB;IACA,aAAa,CAAC;AACd;IACA,SAAS,EAAE,CAAC;AACZ;IACA,QAAQ,SAAS,QAAQ,EAAE,UAAU,GAAG;AACxC;IACA,YAAY,KAAK,KAAK,CAAC,MAAM,CAAC,mBAAmB,IAAI,KAAK,CAAC,MAAM,CAAC,oBAAoB,GAAG;AACzF;IACA,gBAAgB,KAAK,IAAI,UAAU,CAAC;AACpC;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,OAAO,CAAC,IAAI,EAAE,qFAAqF,EAAE,CAAC;IACtH,gBAAgB,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;AACzC;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,OAAO,EAAE,UAAU,GAAG;AACvC;IACA,YAAY,KAAK,KAAK,CAAC,MAAM,CAAC,mBAAmB,IAAI,KAAK,CAAC,MAAM,CAAC,oBAAoB,GAAG;AACzF;IACA,gBAAgB,KAAK,IAAI,UAAU,CAAC;AACpC;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,OAAO,CAAC,IAAI,EAAE,qFAAqF,EAAE,CAAC;IACtH,gBAAgB,KAAK,CAAC,UAAU,GAAG,KAAK,CAAC;AACzC;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,qBAAqB,EAAE,KAAK,GAAG;AAChD;IACA,YAAY,KAAK,EAAE,KAAK,CAAC,YAAY,GAAG;AACxC;IACA,gBAAgB,OAAO;AACvB;IACA,aAAa;AACb;IACA,YAAY,iBAAiB,GAAG,IAAI,CAAC;AACrC;IACA,YAAY,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC,qBAAqB,EAAE,CAAC;IAClE,YAAY,MAAM,CAAC,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;IAChD,YAAY,MAAM,CAAC,GAAG,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC;IAC/C,YAAY,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IACjC,YAAY,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;AAClC;IACA,YAAY,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACxC,YAAY,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;AAC1C;IACA,YAAY,cAAc,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,MAAM,EAAE,CAAC,GAAG,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;AAC7G;IACA,SAAS;AACT;IACA,QAAQ,SAAS,aAAa,EAAE,IAAI,GAAG;AACvC;IACA,YAAY,OAAO,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,GAAG,EAAE,KAAK,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE,CAAC;AACtF;IACA,SAAS;AACT;IACA;IACA;IACA;AACA;IACA,QAAQ,SAAS,qBAAqB,EAAE,KAAK,GAAG;AAChD;IACA,YAAY,WAAW,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;AAC5D;IACA,SAAS;AACT;IACA,QAAQ,SAAS,oBAAoB,EAAE,KAAK,GAAG;AAC/C;IACA,YAAY,qBAAqB,EAAE,KAAK,EAAE,CAAC;IAC3C,YAAY,UAAU,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;AAC3D;IACA,SAAS;AACT;IACA,QAAQ,SAAS,kBAAkB,EAAE,KAAK,GAAG;AAC7C;IACA,YAAY,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;AACzD;IACA,SAAS;AACT;IACA,QAAQ,SAAS,qBAAqB,EAAE,KAAK,GAAG;AAChD;IACA,YAAY,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;AAC1D;IACA,YAAY,WAAW,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,cAAc,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC;AACjG;IACA,YAAY,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC;AAC7C;IACA,YAAY,UAAU,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;AAC7E;IACA,YAAY,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;AAC3E;IACA,YAAY,WAAW,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC;AAC1C;IACA,YAAY,KAAK,CAAC,MAAM,EAAE,CAAC;AAC3B;IACA,SAAS;AACT;IACA,QAAQ,SAAS,oBAAoB,EAAE,KAAK,GAAG;AAC/C;IACA,YAAY,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;AACzD;IACA,YAAY,UAAU,CAAC,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;AAC1D;IACA,YAAY,KAAK,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG;AACpC;IACA,gBAAgB,QAAQ,EAAE,YAAY,EAAE,EAAE,CAAC;AAC3C;IACA,aAAa,MAAM,KAAK,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG;AAC3C;IACA,gBAAgB,OAAO,EAAE,YAAY,EAAE,EAAE,CAAC;AAC1C;IACA,aAAa;AACb;IACA,YAAY,UAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC;AACxC;IACA,YAAY,KAAK,CAAC,MAAM,EAAE,CAAC;AAC3B;IACA,SAAS;AACT;IACA,QAAQ,SAAS,kBAAkB,EAAE,KAAK,GAAG;AAC7C;IACA,YAAY,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;AACvD;IACA,YAAY,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,cAAc,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC;AACrF;IACA,YAAY,GAAG,EAAE,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC;AAC1C;IACA,YAAY,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC;AACpC;IACA,YAAY,KAAK,CAAC,MAAM,EAAE,CAAC;AAC3B;IACA,SAAS;AACT;IACA,QAAQ,SAAS,gBAAgB,EAAE,KAAK,GAAG;AAC3C;IACA,YAAY,qBAAqB,EAAE,KAAK,EAAE,CAAC;AAC3C;IACA,YAAY,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG;AACpC;IACA,gBAAgB,OAAO,EAAE,YAAY,EAAE,EAAE,CAAC;AAC1C;IACA,aAAa,MAAM,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,GAAG;AAC3C;IACA,gBAAgB,QAAQ,EAAE,YAAY,EAAE,EAAE,CAAC;AAC3C;IACA,aAAa;AACb;IACA,YAAY,KAAK,CAAC,MAAM,EAAE,CAAC;AAC3B;IACA,SAAS;AACT;IACA,QAAQ,SAAS,aAAa,EAAE,KAAK,GAAG;AACxC;IACA,YAAY,IAAI,WAAW,GAAG,KAAK,CAAC;AACpC;IACA,YAAY,SAAS,KAAK,CAAC,IAAI;AAC/B;IACA,gBAAgB,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE;AAClC;IACA,oBAAoB,KAAK,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,GAAG;AAC5E;IACA,wBAAwB,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;AACpG;IACA,qBAAqB,MAAM;AAC3B;IACA,wBAAwB,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC;AACpD;IACA,qBAAqB;AACrB;IACA,oBAAoB,WAAW,GAAG,IAAI,CAAC;IACvC,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,IAAI,CAAC,MAAM;AACtC;IACA,oBAAoB,KAAK,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,GAAG;AAC5E;IACA,wBAAwB,QAAQ,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;AACtG;IACA,qBAAqB,MAAM;AAC3B;IACA,wBAAwB,GAAG,EAAE,CAAC,EAAE,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC;AACtD;IACA,qBAAqB;AACrB;IACA,oBAAoB,WAAW,GAAG,IAAI,CAAC;IACvC,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI;AACpC;IACA,oBAAoB,KAAK,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,GAAG;AAC5E;IACA,wBAAwB,UAAU,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;AACtG;IACA,qBAAqB,MAAM;AAC3B;IACA,wBAAwB,GAAG,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC;AACpD;IACA,qBAAqB;AACrB;IACA,oBAAoB,WAAW,GAAG,IAAI,CAAC;IACvC,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK;AACrC;IACA,oBAAoB,KAAK,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,GAAG;AAC5E;IACA,wBAAwB,UAAU,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,WAAW,GAAG,KAAK,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;AACxG;IACA,qBAAqB,MAAM;AAC3B;IACA,wBAAwB,GAAG,EAAE,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC,EAAE,CAAC;AACtD;IACA,qBAAqB;AACrB;IACA,oBAAoB,WAAW,GAAG,IAAI,CAAC;IACvC,oBAAoB,MAAM;AAC1B;IACA,aAAa;AACb;IACA,YAAY,KAAK,WAAW,GAAG;AAC/B;IACA;IACA,gBAAgB,KAAK,CAAC,cAAc,EAAE,CAAC;AACvC;IACA,gBAAgB,KAAK,CAAC,MAAM,EAAE,CAAC;AAC/B;IACA,aAAa;AACb;AACA;IACA,SAAS;AACT;IACA,QAAQ,SAAS,sBAAsB,GAAG;AAC1C;IACA,YAAY,KAAK,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG;AACzC;IACA,gBAAgB,WAAW,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AACxE;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,MAAM,CAAC,GAAG,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC1E,gBAAgB,MAAM,CAAC,GAAG,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AAC1E;IACA,gBAAgB,WAAW,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACxC;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,mBAAmB,GAAG;AACvC;IACA,YAAY,KAAK,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG;AACzC;IACA,gBAAgB,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AACrE;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,MAAM,CAAC,GAAG,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC1E,gBAAgB,MAAM,CAAC,GAAG,GAAG,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;AAC1E;IACA,gBAAgB,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACrC;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,qBAAqB,GAAG;AACzC;IACA,YAAY,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAC7D,YAAY,MAAM,EAAE,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AAC7D;IACA,YAAY,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;AAC5D;IACA,YAAY,UAAU,CAAC,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC;AAC1C;IACA,SAAS;AACT;IACA,QAAQ,SAAS,wBAAwB,GAAG;AAC5C;IACA,YAAY,KAAK,KAAK,CAAC,UAAU,GAAG,qBAAqB,EAAE,CAAC;AAC5D;IACA,YAAY,KAAK,KAAK,CAAC,SAAS,GAAG,mBAAmB,EAAE,CAAC;AACzD;IACA,SAAS;AACT;IACA,QAAQ,SAAS,2BAA2B,GAAG;AAC/C;IACA,YAAY,KAAK,KAAK,CAAC,UAAU,GAAG,qBAAqB,EAAE,CAAC;AAC5D;IACA,YAAY,KAAK,KAAK,CAAC,YAAY,GAAG,sBAAsB,EAAE,CAAC;AAC/D;IACA,SAAS;AACT;IACA,QAAQ,SAAS,qBAAqB,EAAE,KAAK,GAAG;AAChD;IACA,YAAY,KAAK,QAAQ,CAAC,MAAM,IAAI,CAAC,GAAG;AACxC;IACA,gBAAgB,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC;AAC1D;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,MAAM,QAAQ,GAAG,wBAAwB,EAAE,KAAK,EAAE,CAAC;AACnE;IACA,gBAAgB,MAAM,CAAC,GAAG,GAAG,KAAK,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC;IAC7D,gBAAgB,MAAM,CAAC,GAAG,GAAG,KAAK,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC;AAC7D;IACA,gBAAgB,SAAS,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACtC;IACA,aAAa;AACb;IACA,YAAY,WAAW,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,cAAc,EAAE,KAAK,CAAC,WAAW,EAAE,CAAC;AACjG;IACA,YAAY,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC;AAC7C;IACA,YAAY,UAAU,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;AAC7E;IACA,YAAY,QAAQ,EAAE,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,CAAC,GAAG,OAAO,CAAC,YAAY,EAAE,CAAC;AAC3E;IACA,YAAY,WAAW,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC;AAC1C;IACA,SAAS;AACT;IACA,QAAQ,SAAS,kBAAkB,EAAE,KAAK,GAAG;AAC7C;IACA,YAAY,KAAK,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG;AACzC;IACA,gBAAgB,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC;AACvD;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,MAAM,QAAQ,GAAG,wBAAwB,EAAE,KAAK,EAAE,CAAC;AACnE;IACA,gBAAgB,MAAM,CAAC,GAAG,GAAG,KAAK,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC;IAC7D,gBAAgB,MAAM,CAAC,GAAG,GAAG,KAAK,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC;AAC7D;IACA,gBAAgB,MAAM,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACnC;IACA,aAAa;AACb;IACA,YAAY,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,cAAc,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC;AACrF;IACA,YAAY,GAAG,EAAE,QAAQ,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,CAAC;AAC1C;IACA,YAAY,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC;AACpC;IACA,SAAS;AACT;IACA,QAAQ,SAAS,oBAAoB,EAAE,KAAK,GAAG;AAC/C;IACA,YAAY,MAAM,QAAQ,GAAG,wBAAwB,EAAE,KAAK,EAAE,CAAC;AAC/D;IACA,YAAY,MAAM,EAAE,GAAG,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC;IAChD,YAAY,MAAM,EAAE,GAAG,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC;AAChD;IACA,YAAY,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC;AAC5D;IACA,YAAY,QAAQ,CAAC,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC;AACxC;IACA,YAAY,UAAU,CAAC,GAAG,EAAE,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,EAAE,KAAK,CAAC,SAAS,EAAE,EAAE,CAAC;AACxF;IACA,YAAY,QAAQ,EAAE,UAAU,CAAC,CAAC,EAAE,CAAC;AACrC;IACA,YAAY,UAAU,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC;AACxC;IACA,SAAS;AACT;IACA,QAAQ,SAAS,uBAAuB,EAAE,KAAK,GAAG;AAClD;IACA,YAAY,KAAK,KAAK,CAAC,UAAU,GAAG,oBAAoB,EAAE,KAAK,EAAE,CAAC;AAClE;IACA,YAAY,KAAK,KAAK,CAAC,SAAS,GAAG,kBAAkB,EAAE,KAAK,EAAE,CAAC;AAC/D;IACA,SAAS;AACT;IACA,QAAQ,SAAS,0BAA0B,EAAE,KAAK,GAAG;AACrD;IACA,YAAY,KAAK,KAAK,CAAC,UAAU,GAAG,oBAAoB,EAAE,KAAK,EAAE,CAAC;AAClE;IACA,YAAY,KAAK,KAAK,CAAC,YAAY,GAAG,qBAAqB,EAAE,KAAK,EAAE,CAAC;AACrE;IACA,SAAS;AACT;IACA;IACA;IACA;AACA;IACA,QAAQ,SAAS,aAAa,EAAE,KAAK,GAAG;AACxC;IACA,YAAY,KAAK,KAAK,CAAC,OAAO,KAAK,KAAK,GAAG,OAAO;AAClD;IACA,YAAY,KAAK,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG;AACzC;IACA,gBAAgB,KAAK,CAAC,UAAU,CAAC,iBAAiB,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC;AACtE;IACA,gBAAgB,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;IAClF,gBAAgB,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC;AAC9E;IACA,aAAa;AACb;IACA;AACA;IACA,YAAY,UAAU,EAAE,KAAK,EAAE,CAAC;AAChC;IACA,YAAY,KAAK,KAAK,CAAC,WAAW,KAAK,OAAO,GAAG;AACjD;IACA,gBAAgB,YAAY,EAAE,KAAK,EAAE,CAAC;AACtC;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,WAAW,EAAE,KAAK,EAAE,CAAC;AACrC;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,aAAa,EAAE,KAAK,GAAG;AACxC;IACA,YAAY,KAAK,KAAK,CAAC,OAAO,KAAK,KAAK,GAAG,OAAO;AAClD;IACA,YAAY,KAAK,KAAK,CAAC,WAAW,KAAK,OAAO,GAAG;AACjD;IACA,gBAAgB,WAAW,EAAE,KAAK,EAAE,CAAC;AACrC;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,WAAW,EAAE,KAAK,EAAE,CAAC;AACrC;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,WAAW,EAAE,KAAK,GAAG;AACtC;IACA,YAAY,aAAa,EAAE,KAAK,EAAE,CAAC;AACnC;IACA,YAAY,KAAK,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG;AACzC;IACA,gBAAgB,KAAK,CAAC,UAAU,CAAC,qBAAqB,EAAE,KAAK,CAAC,SAAS,EAAE,CAAC;AAC1E;IACA,gBAAgB,KAAK,CAAC,UAAU,CAAC,mBAAmB,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;IACrF,gBAAgB,KAAK,CAAC,UAAU,CAAC,mBAAmB,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC;AACjF;IACA,aAAa;AACb;IACA,YAAY,KAAK,CAAC,aAAa,EAAE,SAAS,EAAE,CAAC;AAC7C;IACA,YAAY,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;AAC/B;IACA,SAAS;AACT;IACA,QAAQ,SAAS,WAAW,EAAE,KAAK,GAAG;AACtC;IACA,YAAY,IAAI,WAAW,CAAC;AAC5B;IACA,YAAY,SAAS,KAAK,CAAC,MAAM;AACjC;IACA,gBAAgB,KAAK,CAAC;AACtB;IACA,oBAAoB,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC;IAC1D,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,CAAC;AACtB;IACA,oBAAoB,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC;IAC5D,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,CAAC;AACtB;IACA,oBAAoB,WAAW,GAAG,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC;IAC3D,oBAAoB,MAAM;AAC1B;IACA,gBAAgB;AAChB;IACA,oBAAoB,WAAW,GAAG,EAAE,CAAC,CAAC;AACtC;IACA,aAAa;AACb;IACA,YAAY,SAAS,WAAW;AAChC;IACA,gBAAgB,KAAKC,WAAK,CAAC,KAAK;AAChC;IACA,oBAAoB,KAAK,KAAK,CAAC,UAAU,KAAK,KAAK,GAAG,OAAO;AAC7D;IACA,oBAAoB,oBAAoB,EAAE,KAAK,EAAE,CAAC;AAClD;IACA,oBAAoB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;AACxC;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAKA,WAAK,CAAC,MAAM;AACjC;IACA,oBAAoB,KAAK,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,GAAG;AAC5E;IACA,wBAAwB,KAAK,KAAK,CAAC,SAAS,KAAK,KAAK,GAAG,OAAO;AAChE;IACA,wBAAwB,kBAAkB,EAAE,KAAK,EAAE,CAAC;AACpD;IACA,wBAAwB,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC;AAC1C;IACA,qBAAqB,MAAM;AAC3B;IACA,wBAAwB,KAAK,KAAK,CAAC,YAAY,KAAK,KAAK,GAAG,OAAO;AACnE;IACA,wBAAwB,qBAAqB,EAAE,KAAK,EAAE,CAAC;AACvD;IACA,wBAAwB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7C;IACA,qBAAqB;AACrB;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAKA,WAAK,CAAC,GAAG;AAC9B;IACA,oBAAoB,KAAK,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,IAAI,KAAK,CAAC,QAAQ,GAAG;AAC5E;IACA,wBAAwB,KAAK,KAAK,CAAC,YAAY,KAAK,KAAK,GAAG,OAAO;AACnE;IACA,wBAAwB,qBAAqB,EAAE,KAAK,EAAE,CAAC;AACvD;IACA,wBAAwB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;AAC7C;IACA,qBAAqB,MAAM;AAC3B;IACA,wBAAwB,KAAK,KAAK,CAAC,SAAS,KAAK,KAAK,GAAG,OAAO;AAChE;IACA,wBAAwB,kBAAkB,EAAE,KAAK,EAAE,CAAC;AACpD;IACA,wBAAwB,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC;AAC1C;IACA,qBAAqB;AACrB;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB;AAChB;IACA,oBAAoB,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;AACvC;IACA,aAAa;AACb;IACA,YAAY,KAAK,KAAK,KAAK,KAAK,CAAC,IAAI,GAAG;AACxC;IACA,gBAAgB,KAAK,CAAC,aAAa,EAAE,WAAW,EAAE,CAAC;AACnD;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,WAAW,EAAE,KAAK,GAAG;AACtC;IACA,YAAY,SAAS,KAAK;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,MAAM;AACjC;IACA,oBAAoB,KAAK,KAAK,CAAC,YAAY,KAAK,KAAK,GAAG,OAAO;AAC/D;IACA,oBAAoB,qBAAqB,EAAE,KAAK,EAAE,CAAC;AACnD;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,KAAK;AAChC;IACA,oBAAoB,KAAK,KAAK,CAAC,UAAU,KAAK,KAAK,GAAG,OAAO;AAC7D;IACA,oBAAoB,oBAAoB,EAAE,KAAK,EAAE,CAAC;AAClD;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,GAAG;AAC9B;IACA,oBAAoB,KAAK,KAAK,CAAC,SAAS,KAAK,KAAK,GAAG,OAAO;AAC5D;IACA,oBAAoB,kBAAkB,EAAE,KAAK,EAAE,CAAC;AAChD;IACA,oBAAoB,MAAM;AAC1B;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,YAAY,EAAE,KAAK,GAAG;AACvC;IACA,YAAY,KAAK,KAAK,CAAC,OAAO,KAAK,KAAK,IAAI,KAAK,CAAC,UAAU,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,CAAC,IAAI,GAAG,OAAO;AACxG;IACA,YAAY,KAAK,CAAC,cAAc,EAAE,CAAC;AACnC;IACA,YAAY,KAAK,CAAC,aAAa,EAAE,WAAW,EAAE,CAAC;AAC/C;IACA,YAAY,gBAAgB,EAAE,KAAK,EAAE,CAAC;AACtC;IACA,YAAY,KAAK,CAAC,aAAa,EAAE,SAAS,EAAE,CAAC;AAC7C;IACA,SAAS;AACT;IACA,QAAQ,SAAS,SAAS,EAAE,KAAK,GAAG;AACpC;IACA,YAAY,KAAK,KAAK,CAAC,OAAO,KAAK,KAAK,IAAI,KAAK,CAAC,SAAS,KAAK,KAAK,GAAG,OAAO;AAC/E;IACA,YAAY,aAAa,EAAE,KAAK,EAAE,CAAC;AACnC;IACA,SAAS;AACT;IACA,QAAQ,SAAS,YAAY,EAAE,KAAK,GAAG;AACvC;IACA,YAAY,YAAY,EAAE,KAAK,EAAE,CAAC;AAClC;IACA,YAAY,SAAS,QAAQ,CAAC,MAAM;AACpC;IACA,gBAAgB,KAAK,CAAC;AACtB;IACA,oBAAoB,SAAS,KAAK,CAAC,OAAO,CAAC,GAAG;AAC9C;IACA,wBAAwB,KAAKC,WAAK,CAAC,MAAM;AACzC;IACA,4BAA4B,KAAK,KAAK,CAAC,YAAY,KAAK,KAAK,GAAG,OAAO;AACvE;IACA,4BAA4B,sBAAsB,EAAE,CAAC;AACrD;IACA,4BAA4B,KAAK,GAAG,KAAK,CAAC,YAAY,CAAC;AACvD;IACA,4BAA4B,MAAM;AAClC;IACA,wBAAwB,KAAKA,WAAK,CAAC,GAAG;AACtC;IACA,4BAA4B,KAAK,KAAK,CAAC,SAAS,KAAK,KAAK,GAAG,OAAO;AACpE;IACA,4BAA4B,mBAAmB,EAAE,CAAC;AAClD;IACA,4BAA4B,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC;AACpD;IACA,4BAA4B,MAAM;AAClC;IACA,wBAAwB;AACxB;IACA,4BAA4B,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;AAC/C;IACA,qBAAqB;AACrB;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,CAAC;AACtB;IACA,oBAAoB,SAAS,KAAK,CAAC,OAAO,CAAC,GAAG;AAC9C;IACA,wBAAwB,KAAKA,WAAK,CAAC,SAAS;AAC5C;IACA,4BAA4B,KAAK,KAAK,CAAC,UAAU,KAAK,KAAK,IAAI,KAAK,CAAC,SAAS,KAAK,KAAK,GAAG,OAAO;AAClG;IACA,4BAA4B,wBAAwB,EAAE,CAAC;AACvD;IACA,4BAA4B,KAAK,GAAG,KAAK,CAAC,eAAe,CAAC;AAC1D;IACA,4BAA4B,MAAM;AAClC;IACA,wBAAwB,KAAKA,WAAK,CAAC,YAAY;AAC/C;IACA,4BAA4B,KAAK,KAAK,CAAC,UAAU,KAAK,KAAK,IAAI,KAAK,CAAC,YAAY,KAAK,KAAK,GAAG,OAAO;AACrG;IACA,4BAA4B,2BAA2B,EAAE,CAAC;AAC1D;IACA,4BAA4B,KAAK,GAAG,KAAK,CAAC,kBAAkB,CAAC;AAC7D;IACA,4BAA4B,MAAM;AAClC;IACA,wBAAwB;AACxB;IACA,4BAA4B,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;AAC/C;IACA,qBAAqB;AACrB;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB;AAChB;IACA,oBAAoB,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;AACvC;IACA,aAAa;AACb;IACA,YAAY,KAAK,KAAK,KAAK,KAAK,CAAC,IAAI,GAAG;AACxC;IACA,gBAAgB,KAAK,CAAC,aAAa,EAAE,WAAW,EAAE,CAAC;AACnD;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,WAAW,EAAE,KAAK,GAAG;AACtC;IACA,YAAY,YAAY,EAAE,KAAK,EAAE,CAAC;AAClC;IACA,YAAY,SAAS,KAAK;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,YAAY;AACvC;IACA,oBAAoB,KAAK,KAAK,CAAC,YAAY,KAAK,KAAK,GAAG,OAAO;AAC/D;IACA,oBAAoB,qBAAqB,EAAE,KAAK,EAAE,CAAC;AACnD;IACA,oBAAoB,KAAK,CAAC,MAAM,EAAE,CAAC;AACnC;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,SAAS;AACpC;IACA,oBAAoB,KAAK,KAAK,CAAC,SAAS,KAAK,KAAK,GAAG,OAAO;AAC5D;IACA,oBAAoB,kBAAkB,EAAE,KAAK,EAAE,CAAC;AAChD;IACA,oBAAoB,KAAK,CAAC,MAAM,EAAE,CAAC;AACnC;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,eAAe;AAC1C;IACA,oBAAoB,KAAK,KAAK,CAAC,UAAU,KAAK,KAAK,IAAI,KAAK,CAAC,SAAS,KAAK,KAAK,GAAG,OAAO;AAC1F;IACA,oBAAoB,uBAAuB,EAAE,KAAK,EAAE,CAAC;AACrD;IACA,oBAAoB,KAAK,CAAC,MAAM,EAAE,CAAC;AACnC;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB,KAAK,KAAK,CAAC,kBAAkB;AAC7C;IACA,oBAAoB,KAAK,KAAK,CAAC,UAAU,KAAK,KAAK,IAAI,KAAK,CAAC,YAAY,KAAK,KAAK,GAAG,OAAO;AAC7F;IACA,oBAAoB,0BAA0B,EAAE,KAAK,EAAE,CAAC;AACxD;IACA,oBAAoB,KAAK,CAAC,MAAM,EAAE,CAAC;AACnC;IACA,oBAAoB,MAAM;AAC1B;IACA,gBAAgB;AAChB;IACA,oBAAoB,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC;AACvC;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,aAAa,EAAE,KAAK,GAAG;AACxC;IACA,YAAY,KAAK,KAAK,CAAC,OAAO,KAAK,KAAK,GAAG,OAAO;AAClD;IACA,YAAY,KAAK,CAAC,cAAc,EAAE,CAAC;AACnC;IACA,SAAS;AACT;IACA,QAAQ,SAAS,UAAU,EAAE,KAAK,GAAG;AACrC;IACA,YAAY,QAAQ,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC;AACnC;IACA,SAAS;AACT;IACA,QAAQ,SAAS,aAAa,EAAE,KAAK,GAAG;AACxC;IACA,YAAY,OAAO,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AACrD;IACA,YAAY,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG;AACzD;IACA,gBAAgB,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,GAAG;AAChE;IACA,oBAAoB,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;IAC5C,oBAAoB,OAAO;AAC3B;IACA,iBAAiB;AACjB;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,YAAY,EAAE,KAAK,GAAG;AACvC;IACA,YAAY,IAAI,QAAQ,GAAG,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;AAC7D;IACA,YAAY,KAAK,QAAQ,KAAK,SAAS,GAAG;AAC1C;IACA,gBAAgB,QAAQ,GAAG,IAAIG,aAAO,EAAE,CAAC;IACzC,gBAAgB,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;AAC7D;IACA,aAAa;AACb;IACA,YAAY,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC;AACrD;IACA,SAAS;AACT;IACA,QAAQ,SAAS,wBAAwB,EAAE,KAAK,GAAG;AACnD;IACA,YAAY,MAAM,OAAO,GAAG,EAAE,KAAK,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACtG;IACA,YAAY,OAAO,gBAAgB,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AACvD;IACA,SAAS;AACT;IACA;AACA;IACA,QAAQ,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;AAC1E;IACA,QAAQ,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,aAAa,EAAE,aAAa,EAAE,CAAC;IAC1E,QAAQ,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,eAAe,EAAE,WAAW,EAAE,CAAC;IAC1E,QAAQ,KAAK,CAAC,UAAU,CAAC,gBAAgB,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC;AACvF;IACA;AACA;IACA,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;AACtB;IACA,KAAK;AACL;IACA;;IC52CO,MAAM,cAAc,CAAC;AAC5B;IACA,IAAI,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE;IACpC,QAAQ,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,YAAY,CAAC;IAC/C,QAAQ,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,QAAQ,CAAC,IAAI,CAAC;AACpD;IACA,QAAQ,IAAI,CAAC,wBAAwB,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACtE,QAAQ,IAAI,CAAC,wBAAwB,CAAC,SAAS,GAAG,gBAAgB,CAAC;IACnE,QAAQ,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;AAC7D;IACA,QAAQ,IAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACjE,QAAQ,IAAI,CAAC,mBAAmB,CAAC,SAAS,GAAG,WAAW,CAAC;AACzD;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACxD,QAAQ,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,QAAQ,CAAC;AAC7C;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACxD,QAAQ,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,SAAS,CAAC;IAC9C,QAAQ,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC;AACjD;IACA,QAAQ,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9D,QAAQ,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9D,QAAQ,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAC5E,QAAQ,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;AAClE;IACA,QAAQ,MAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IACtD,QAAQ,KAAK,CAAC,SAAS,GAAG,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;IACV,QAAQ,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IACzD,KAAK;AACL;IACA,IAAI,IAAI,GAAG;IACX,QAAQ,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IAC9D,KAAK;AACL;IACA,IAAI,IAAI,GAAG;IACX,QAAQ,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IAC7D,KAAK;AACL;IACA,IAAI,YAAY,CAAC,SAAS,EAAE;IAC5B,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;IAC5B,YAAY,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IACtE,SAAS;IACT,QAAQ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,QAAQ,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IAClE,QAAQ,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;IACrF,KAAK;AACL;IACA,IAAI,UAAU,CAAC,GAAG,EAAE;IACpB,QAAQ,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,GAAG,CAAC;IACxC,KAAK;IACL;;IChGO,MAAM,WAAW,SAASV,gBAAK,CAAC,QAAQ,CAAC;AAChD;IACA,IAAI,WAAW,CAAC,GAAG,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC;IACjG,gBAAgB,MAAM,GAAG,GAAG,EAAE,KAAK,GAAG,QAAQ,EAAE,UAAU,GAAG,MAAM,GAAG,GAAG,EAAE,UAAU,GAAG,UAAU,GAAG,GAAG,EAAE;IAC1G,QAAQ,KAAK,EAAE,CAAC;AAChB;IACA,QAAQ,IAAI,CAAC,IAAI,GAAG,aAAa,CAAC;AAClC;IACA,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;IACpF,QAAQ,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC;IACnD,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,gBAAgB,EAAE,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;IACxF,QAAQ,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;AAC7C;IACA,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,CAAC;AACrC;IACA,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,YAAY,EAAE,IAAIA,gBAAK,CAAC,iBAAiB,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IACjH,QAAQ,IAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IAC3C,QAAQ,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B;IACA,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,YAAY,EAAE,IAAIA,gBAAK,CAAC,iBAAiB,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IACjH,QAAQ,IAAI,CAAC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IAC3C,QAAQ,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5B;IACA,QAAQ,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAC/B,KAAK;AACL;IACA,IAAI,YAAY,EAAE,GAAG,GAAG;IACxB,QAAQ,IAAI,GAAG,CAAC,CAAC,GAAG,OAAO,EAAE;IAC7B,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,SAAS,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE;IACtC,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,SAAS,MAAM;IACf,YAAY,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IACpD,YAAY,MAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7C,YAAY,IAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC7D,SAAS;IACT,KAAK;AACL;IACA,IAAI,QAAQ,EAAE,KAAK,GAAG;IACtB,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC5C,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAC5C,KAAK;AACL;IACA,IAAI,IAAI,CAAC,MAAM,EAAE;IACjB,QAAQ,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;IAClC,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACpC,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACpC,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA,IAAI,OAAO,GAAG;IACd,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACrC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACrC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACrC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACrC,KAAK;AACL;IACA;;ICxDO,MAAM,WAAW,CAAC;AACzB;IACA,IAAI,WAAW,CAAC,KAAK,EAAE;IACvB,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IACtC,QAAQ,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;IAC7C,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;IACzC,QAAQ,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;IAC3C,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC/B,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAChC,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IACjC,KAAK;AACL;IACA,IAAI,0CAA0C,CAAC,KAAK,EAAE,MAAM,EAAE;IAC9D,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAIA,gBAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,MAAM,EAAE;IAC5E,YAAY,MAAM,EAAEA,gBAAK,CAAC,UAAU;IACpC,YAAY,aAAa,EAAE,KAAK;IAChC,YAAY,WAAW,EAAE,IAAI;AAC7B;IACA,SAAS,CAAC,CAAC;IACX,QAAQ,IAAI,CAAC,iBAAiB,CAAC,YAAY,GAAG,IAAIA,gBAAK,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACpF,QAAQ,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,MAAM,GAAGA,gBAAK,CAAC,WAAW,CAAC;IACvE,QAAQ,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,IAAI,GAAGA,gBAAK,CAAC,eAAe,CAAC;IACzE,KAAK;AACL;IACA,IAAI,4BAA4B,GAAG;IACnC,QAAQ,MAAM,QAAQ,GAAG;IACzB,YAAY,oBAAoB,EAAE;IAClC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,IAAI;IAC7B,aAAa;IACb,YAAY,oBAAoB,EAAE;IAClC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,IAAI;IAC7B,aAAa;IACb,SAAS,CAAC;IACV,QAAQ,IAAI,CAAC,wBAAwB,GAAG,IAAIA,gBAAK,CAAC,cAAc,CAAC;IACjE,YAAY,YAAY,EAAE,CAAC;AAC3B;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;IACb,YAAY,cAAc,EAAE,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC;IACb,YAAY,QAAQ,EAAE,QAAQ;IAC9B,YAAY,UAAU,EAAE,KAAK;IAC7B,YAAY,SAAS,EAAE,KAAK;IAC5B,YAAY,WAAW,EAAE,IAAI;IAC7B,YAAY,QAAQ,EAAEA,gBAAK,CAAC,cAAc;IAC1C,YAAY,QAAQ,EAAEA,gBAAK,CAAC,cAAc;IAC1C,YAAY,aAAa,EAAEA,gBAAK,CAAC,cAAc;IAC/C,YAAY,QAAQ,EAAEA,gBAAK,CAAC,sBAAsB;IAClD,YAAY,aAAa,EAAEA,gBAAK,CAAC,sBAAsB;IACvD,SAAS,CAAC,CAAC;IACX,QAAQ,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC;IAClE,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,wBAAwB,CAAC,CAAC;IACjH,QAAQ,IAAI,CAAC,sBAAsB,GAAG,IAAIA,gBAAK,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACvF,KAAK;AACL;IACA,IAAI,eAAe,GAAG;IACtB,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;IAC9B,YAAY,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,YAAY,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;IACtE,YAAY,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,iBAAiB,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;AAChF;IACA,YAAY,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACzE,YAAY,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;IAClD,YAAY,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,YAAY,MAAM,OAAO,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACvE,YAAY,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3C,YAAY,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACzE,YAAY,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;IACxD,YAAY,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,YAAY,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAC1E,YAAY,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;IAC1D,YAAY,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC9C;IACA,YAAY,IAAI,CAAC,UAAU,GAAG,IAAIA,gBAAK,CAAC,QAAQ,EAAE,CAAC;IACnD,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC3C,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACzC,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC3C,YAAY,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC5C,YAAY,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IACrD,YAAY,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC5C,YAAY,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;IAC5C,SAAS;IACT,KAAK;AACL;IACA,IAAI,iBAAiB,GAAG;IACxB,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE;IAC7B,YAAY,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK;IACxD,gBAAgB,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACzC,gBAAgB,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACzC,aAAa,CAAC,CAAC;IACf,YAAY,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/C,YAAY,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACnC,SAAS;IACT,KAAK;AACL;IACA,IAAI,uBAAuB,CAAC,OAAO,EAAE;IACrC,QAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,qBAAqB,CAAC,QAAQ,EAAE;IACpC,QAAQ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChD,KAAK;AACL;IACA,IAAI,2BAA2B,CAAC,QAAQ,EAAE,MAAM,EAAE;IAClD,QAAQ,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChD,QAAQ,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC3C,QAAQ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAChD,KAAK;AACL;IACA,IAAI,gBAAgB,GAAG;IACvB,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;IAC/B,YAAY,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACxE,YAAY,MAAM,mBAAmB,GAAG,WAAW,CAAC,wBAAwB,EAAE,CAAC;IAC/E,YAAY,mBAAmB,CAAC,SAAS,GAAG,KAAK,CAAC;IAClD,YAAY,mBAAmB,CAAC,UAAU,GAAG,KAAK,CAAC;IACnD,YAAY,mBAAmB,CAAC,WAAW,GAAG,IAAI,CAAC;IACnD,YAAY,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,cAAc,EAAE,mBAAmB,CAAC,CAAC;IACnF,YAAY,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAC1C,SAAS;IACT,KAAK;AACL;IACA,IAAI,iBAAiB,GAAG,WAAW;AACnC;IACA,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACjD,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAC/C;IACA,QAAQ,OAAO,SAAS,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE;IACpD,YAAY,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC;IACzD,YAAY,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;IACjE,YAAY,YAAY,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;IACxD,YAAY,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC1D,YAAY,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACzD,YAAY,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtF,YAAY,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7E,YAAY,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;IAChE,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,wBAAwB,CAAC,OAAO,EAAE;IACtC,QAAQ,IAAI,CAAC,WAAW,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3C,KAAK;AACL;IACA,IAAI,qBAAqB,CAAC,OAAO,EAAE;IACnC,QAAQ,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;IACnE,QAAQ,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;IAC5D,KAAK;AACL;IACA,IAAI,qBAAqB,GAAG;IAC5B,QAAQ,OAAO,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC;IAChE,KAAK;AACL;IACA,IAAI,iBAAiB,GAAG;IACxB,QAAQ,MAAM,aAAa,GAAG,IAAIA,gBAAK,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,QAAQ,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IAC5C,QAAQ,MAAM,aAAa,GAAG,IAAIA,gBAAK,CAAC,iBAAiB,CAAC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;IAC7E,QAAQ,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC;IACzC,QAAQ,aAAa,CAAC,OAAO,GAAG,GAAG,CAAC;IACpC,QAAQ,aAAa,CAAC,SAAS,GAAG,KAAK,CAAC;IACxC,QAAQ,aAAa,CAAC,UAAU,GAAG,KAAK,CAAC;IACzC,QAAQ,aAAa,CAAC,IAAI,GAAGA,gBAAK,CAAC,UAAU,CAAC;IAC9C,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;AACvE;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpD,QAAQ,QAAQ,CAAC,SAAS,EAAE,CAAC;IAC7B,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACvD,QAAQ,MAAM,WAAW,GAAG,GAAG,CAAC;IAChC,QAAQ,MAAM,WAAW,GAAG,IAAI,CAAC;IACjC,QAAQ,MAAM,UAAU,GAAG,QAAQ,CAAC;IACpC,QAAQ,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,QAAQ,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AACpH;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAIA,gBAAK,CAAC,QAAQ,EAAE,CAAC;IACjD,QAAQ,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACzC,QAAQ,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC3C,KAAK;AACL;IACA,IAAI,yBAAyB,CAAC,OAAO,EAAE;IACvC,QAAQ,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,OAAO,CAAC;IAC5C,KAAK;AACL;IACA,IAAI,6BAA6B,GAAG,WAAW;AAC/C;IACA,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,UAAU,EAAE,CAAC;IACtD,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACrD;IACA,QAAQ,OAAO,SAAS,QAAQ,EAAE,EAAE,EAAE;IACtC,YAAY,cAAc,CAAC,kBAAkB,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAC7D,YAAY,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtD,YAAY,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC9D,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,cAAc,GAAG;IACrB,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAClD,QAAQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;IACpE,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACvC,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAChD,KAAK;AACL;IACA,IAAI,iBAAiB,CAAC,WAAW,EAAE;IACnC,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,cAAc,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACnE,QAAQ,MAAM,aAAa,GAAG,IAAIA,gBAAK,CAAC,QAAQ,EAAE,CAAC;AACnD;IACA,QAAQ,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,QAAQ,KAAK;IAChD,YAAY,IAAI,UAAU,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,cAAc,EAAE,WAAW,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC;IACnG,YAAY,UAAU,CAAC,WAAW,GAAG,WAAW,CAAC;IACjD,YAAY,aAAa,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC1C,YAAY,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACpD,SAAS,CAAC;AACV;IACA,QAAQ,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1C,QAAQ,UAAU,CAAC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzC,QAAQ,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1C,QAAQ,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACzC,QAAQ,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACxC;IACA,QAAQ,OAAO,aAAa,CAAC;IAC7B,KAAK;AACL;IACA,IAAI,0BAA0B,CAAC,WAAW,EAAE;IAC5C,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3D,QAAQ,MAAM,aAAa,GAAG,IAAIA,gBAAK,CAAC,QAAQ,EAAE,CAAC;AACnD;IACA,QAAQ,IAAI,QAAQ,GAAG,QAAQ,CAAC;IAChC,QAAQ,MAAM,UAAU,GAAG,CAAC,QAAQ,KAAK;IACzC,YAAY,IAAI,OAAO,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAChG,YAAY,OAAO,CAAC,WAAW,GAAG,WAAW,CAAC;IAC9C,YAAY,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACvC,YAAY,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACjD,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,UAAU,GAAG,EAAE,CAAC;IAC5B,QAAQ,UAAU,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IAClD,QAAQ,UAAU,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;IACjD,QAAQ,UAAU,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC;IACjD,QAAQ,UAAU,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;AAChD;IACA,QAAQ,OAAO,aAAa,CAAC;IAC7B,KAAK;AACL;IACA,IAAI,OAAO,kBAAkB,CAAC,KAAK,EAAE;IACrC,QAAQ,MAAM,kBAAkB,GAAG,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;IACA,QAAQ,MAAM,oBAAoB,GAAG,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;IACA,QAAQ,MAAM,QAAQ,GAAG;IACzB,YAAY,OAAO,EAAE;IACrB,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,KAAK,CAAC,KAAK,CAAC;IAC/C,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,cAAc,CAAC;IAClD,YAAY,QAAQ,EAAE,QAAQ;IAC9B,YAAY,YAAY,EAAE,kBAAkB;IAC5C,YAAY,cAAc,EAAE,oBAAoB;IAChD,YAAY,WAAW,EAAE,KAAK;IAC9B,YAAY,SAAS,EAAE,IAAI;IAC3B,YAAY,UAAU,EAAE,IAAI;IAC5B,YAAY,IAAI,EAAEA,gBAAK,CAAC,SAAS;IACjC,SAAS,CAAC,CAAC;IACX,QAAQ,QAAQ,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC;AAC7C;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA,IAAI,OAAO,wBAAwB,CAAC,KAAK,EAAE;IAC3C,QAAQ,MAAM,kBAAkB,GAAG,CAAC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;IACA,QAAQ,MAAM,oBAAoB,GAAG,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,CAAC,CAAC;AACV;IACA,QAAQ,MAAM,QAAQ,GAAG;IACzB,YAAY,OAAO,EAAE;IACrB,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,KAAK,CAAC,KAAK,CAAC;IAC/C,aAAa;IACb,YAAY,mBAAmB,EAAE;IACjC,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,EAAE;IAC5C,aAAa;IACb,YAAY,UAAU,EAAE;IACxB,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,EAAE;IAC5C,aAAa;IACb,YAAY,SAAS,EAAE;IACvB,gBAAgB,OAAO,EAAE,GAAG;IAC5B,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,cAAc,CAAC;IAClD,YAAY,QAAQ,EAAE,QAAQ;IAC9B,YAAY,YAAY,EAAE,kBAAkB;IAC5C,YAAY,cAAc,EAAE,oBAAoB;IAChD,YAAY,WAAW,EAAE,IAAI;IAC7B,YAAY,SAAS,EAAE,KAAK;IAC5B,YAAY,UAAU,EAAE,KAAK;IAC7B,YAAY,IAAI,EAAEA,gBAAK,CAAC,SAAS;IACjC,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;IACL;;IC3YA,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/C,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClD;IACO,MAAM,GAAG,CAAC;AACjB;IACA,IAAI,WAAW,CAAC,MAAM,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,EAAE,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,EAAE;IAC/E,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC1C,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC7C,QAAQ,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC9C,KAAK;AACL;IACA,IAAI,aAAa,CAAC,MAAM,EAAE,SAAS,EAAE;IACrC,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,QAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,SAAS,EAAE,CAAC;IACnD,KAAK;AACL;IACA,IAAI,gBAAgB,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE;IAC1C,QAAQ,OAAO,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,IAAI,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;IAC7E,eAAe,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,IAAI,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO;IAC7E,eAAe,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,IAAI,KAAK,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,GAAG,KAAK,GAAG,IAAI,CAAC;IAC7F,KAAK;AACL;IACA,IAAI,YAAY,GAAG,WAAW;AAC9B;IACA,QAAQ,MAAM,sBAAsB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC3D,QAAQ,MAAM,2BAA2B,GAAG,EAAE,CAAC;IAC/C,QAAQ,MAAM,WAAW,GAAG,EAAE,CAAC;IAC/B,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC;AAClC;IACA,QAAQ,OAAO,SAAS,GAAG,EAAE,MAAM,EAAE;AACrC;IACA,YAAY,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAC3C,YAAY,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAC3C,YAAY,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAC3C,YAAY,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACjD,YAAY,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACjD,YAAY,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;AACjD;IACA,YAAY,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC,EAAE;IACjE,gBAAgB,IAAI,MAAM,EAAE;IAC5B,oBAAoB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACpD,oBAAoB,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/C,oBAAoB,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC;IACzC,iBAAiB;IACjB,gBAAgB,OAAO,IAAI,CAAC;IAC5B,aAAa;AACb;IACA,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IACxC,gBAAgB,IAAI,cAAc,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,SAAS;AACvD;IACA,gBAAgB,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,GAAG,WAAW,GAAG,CAAC,IAAI,CAAC,GAAG,QAAQ,GAAG,cAAc,CAAC;IAC5F,gBAAgB,MAAM,UAAU,GAAG,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;IAC7E,gBAAgB,IAAI,UAAU,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/D,gBAAgB,2BAA2B,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC;IAC9G,gBAAgB,IAAI,MAAM,GAAG,2BAA2B,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;AAC7E;IACA,gBAAgB,IAAI,MAAM,GAAG,UAAU,GAAG,CAAC,EAAE;IAC7C,oBAAoB,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7C,oBAAoB,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7C,oBAAoB,2BAA2B,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3H,oBAAoB,2BAA2B,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,GAAG,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;IAC3H,oBAAoB,sBAAsB,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAC;IAC7E,+CAA+C,2BAA2B,CAAC,IAAI,CAAC;IAChF,+CAA+C,2BAA2B,CAAC,IAAI,CAAC,CAAC,CAAC;IAClF,oBAAoB,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,sBAAsB,EAAE,MAAM,CAAC,EAAE;IACpF,wBAAwB,IAAI,MAAM,EAAE;IACpC,4BAA4B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACvE,4BAA4B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC;IACrF,4BAA4B,MAAM,CAAC,QAAQ,GAAG,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC;IAC/F,yBAAyB;IACzB,wBAAwB,OAAO,IAAI,CAAC;IACpC,qBAAqB;IACrB,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,OAAO,KAAK,CAAC;IACzB,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,eAAe,GAAG,WAAW;AACjC;IACA,QAAQ,MAAM,iBAAiB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACtD;IACA,QAAQ,OAAO,SAAS,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE;IAChD,YAAY,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5D,YAAY,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5E,YAAY,MAAM,mBAAmB,GAAG,iBAAiB,GAAG,iBAAiB,CAAC;IAC9E,YAAY,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IAC9E,YAAY,MAAM,MAAM,GAAG,gBAAgB,GAAG,mBAAmB,CAAC;IAClE,YAAY,MAAM,QAAQ,GAAG,MAAM,GAAG,MAAM,CAAC;AAC7C;IACA,YAAY,IAAI,MAAM,GAAG,QAAQ,EAAE,OAAO,KAAK,CAAC;AAChD;IACA,YAAY,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC;IACrD,YAAY,MAAM,EAAE,GAAG,iBAAiB,GAAG,GAAG,CAAC;IAC/C,YAAY,MAAM,EAAE,GAAG,iBAAiB,GAAG,GAAG,CAAC;AAC/C;IACA,YAAY,IAAI,EAAE,GAAG,CAAC,EAAE,OAAO,KAAK,CAAC;IACrC,YAAY,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;AACrC;IACA,YAAY,IAAI,MAAM,EAAE;IACxB,gBAAgB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;IACnF,gBAAgB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;IAC1E,gBAAgB,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IACpC,aAAa;IACb,YAAY,OAAO,IAAI,CAAC;IACxB,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;IACR;;IC/GO,MAAM,GAAG,CAAC;AACjB;IACA,IAAI,WAAW,GAAG;IAClB,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC1C,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC1C,QAAQ,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC1B,KAAK;AACL;IACA,IAAI,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE;IAClC,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,QAAQ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACjC,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,KAAK;AACL;IACA,IAAI,KAAK,GAAG;IACZ,QAAQ,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;IACnC,QAAQ,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1C,QAAQ,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1C,QAAQ,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC1C,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA;;ICpBO,MAAM,SAAS,CAAC;AACvB;IACA,IAAI,WAAW,CAAC,MAAM,EAAE,SAAS,EAAE;IACnC,QAAQ,IAAI,CAAC,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC9C,KAAK;AACL;IACA,IAAI,8BAA8B,GAAG,WAAW;AAChD;IACA,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAC9C;IACA,QAAQ,OAAO,SAAS,MAAM,EAAE,cAAc,EAAE,gBAAgB,EAAE;IAClE,YAAY,SAAS,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;IAC5E,YAAY,SAAS,CAAC,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;IACnG,YAAY,IAAI,MAAM,CAAC,mBAAmB,EAAE;IAC5C,gBAAgB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,qBAAqB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC1E,gBAAgB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC;IAC1H,gBAAgB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACrC,aAAa,MAAM,IAAI,MAAM,CAAC,oBAAoB,EAAE;IACpD,gBAAgB,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;IACtE,mCAAmC,CAAC,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,KAAK,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IAC9G,gBAAgB,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACxF,gBAAgB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACrC,aAAa,MAAM;IACnB,gBAAgB,MAAM,IAAI,KAAK,CAAC,wEAAwE,CAAC,CAAC;IAC1G,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,kBAAkB,GAAG,WAAW;AACpC;IACA,QAAQ,MAAM,OAAO,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC9C,QAAQ,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAE,CAAC;AACnC;IACA,QAAQ,OAAO,SAAS,SAAS,EAAE,OAAO,GAAG,EAAE,EAAE;IACjD,YAAY,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAClD,YAAY,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,CAAC;IAC7C,YAAY,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACxE,YAAY,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC;AACpF;IACA,YAAY,MAAM,SAAS,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC;IACvD,YAAY,IAAI,SAAS,CAAC,QAAQ,EAAE;IACpC,gBAAgB,IAAI,CAAC,sBAAsB,CAAC,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC9F,aAAa;IACb,YAAY,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;IACnC,gBAAgB,IAAI,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACtD,qBAAqB,OAAO,CAAC,CAAC,CAAC;IAC/B,aAAa,CAAC,CAAC;IACf,YAAY,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;IACrC,gBAAgB,GAAG,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;IACnD,gBAAgB,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;IACzD,aAAa,CAAC,CAAC;IACf,YAAY,OAAO,OAAO,CAAC;IAC3B,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,sBAAsB,GAAG,WAAW;AACxC;IACA,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC/C,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC9C,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,UAAU,EAAE,CAAC;IACpD,QAAQ,MAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;IAClC,QAAQ,MAAM,YAAY,GAAG,SAAS,CAAC;AACvC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,QAAQ,OAAO,SAAS,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE;IAC5D,YAAY,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE;IACrD,gBAAgB,OAAO;IACvB,aAAa;IACb,YAAY,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;IACnE,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACnE,oBAAoB,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAClE,oBAAoB,SAAS,CAAC,SAAS,CAAC,cAAc,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;IACrF,oBAAoB,SAAS,CAAC,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC;AAC5G;IACA,oBAAoB,IAAI,SAAS,CAAC,CAAC,IAAI,YAAY,IAAI,SAAS,CAAC,CAAC,IAAI,YAAY,IAAI,SAAS,CAAC,CAAC,IAAI,YAAY,EAAE;IACnH,wBAAwB,SAAS;IACjC,qBAAqB;AACrB;IACA;IACA,oBAAoB,MAAM,MAAM,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC;IACjF,oBAAoB,IAAI,GAAG,CAAC,eAAe,CAAC,UAAU,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE;IAC1E,wBAAwB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;IACtD,qBAAqB;AACrB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,iBAAiB;IACjB,cAAc;IACd,YAAY,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;IAC3D,gBAAgB,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;IACjD,oBAAoB,IAAI,CAAC,sBAAsB,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAChF,iBAAiB;IACjB,aAAa;IACb,YAAY,OAAO,OAAO,CAAC;IAC3B,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;IACR;;IC9HA,IAAI,KAAK,GAAG,CAAC,CAAC;AACd;IACO,MAAM,aAAa,CAAC;AAC3B;IACA,IAAI,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE;IACrC,QAAQ,IAAI,CAAC,GAAG,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjD,QAAQ,IAAI,CAAC,GAAG,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjD,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IAC9D,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACzG,QAAQ,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IAC3B,QAAQ,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;IAC3B,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACzB,QAAQ,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,KAAK,EAAE,CAAC;IAChC,KAAK;AACL;IACA;;ICdA;IACA;IACA;IACO,MAAM,SAAS,CAAC;AACvB;IACA,IAAI,WAAW,CAAC,QAAQ,EAAE,iBAAiB,EAAE;IAC7C,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IACnD,QAAQ,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;IAC5B,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC7B,QAAQ,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IACnC,KAAK;AACL;IACA,IAAI,gBAAgB,CAAC,SAAS,EAAE,UAAU,GAAG,MAAM,IAAI,EAAE;IACzD,QAAQ,MAAM,MAAM,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC3C,QAAQ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IACnC,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,gBAAgB,GAAG,EAAE,CAAC;IACnC,QAAQ,IAAI,CAAC,oCAAoC,GAAG,EAAE,CAAC;IACvD,QAAQ,IAAI,CAAC,qCAAqC,GAAG,EAAE,CAAC;AACxD;IACA,QAAQ,IAAI,eAAe,GAAG,CAAC,CAAC;IAChC,QAAQ,MAAM,OAAO,GAAG,EAAE,CAAC;IAC3B,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;IAC1D,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE;IAC/B,gBAAgB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IACzD,gBAAgB,IAAI,eAAe,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACpG,gBAAgB,IAAI,eAAe,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACpG,gBAAgB,IAAI,eAAe,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACpG,gBAAgB,IAAI,eAAe,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACpG,gBAAgB,IAAI,eAAe,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACpG,gBAAgB,IAAI,eAAe,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;IACpG,gBAAgB,eAAe,EAAE,CAAC;IAClC,gBAAgB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAChC,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACpE;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC3E,QAAQ,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG;IAC7B,YAAY,SAAS,EAAE,OAAO;IAC9B,SAAS,CAAC;IACV,QAAQ,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IACnD,KAAK;AACL;IACA,IAAI,WAAW,CAAC,IAAI,EAAE,SAAS,EAAE;IACjC,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;AACpD;IACA,QAAQ,IAAI,UAAU,GAAG,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE;IAC/E,YAAY,MAAM,UAAU,GAAG,EAAE,CAAC;IAClC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC/D,gBAAgB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE;IAC9D,oBAAoB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,oBAAoB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;IACnE,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC;IAC3C,YAAY,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7C,YAAY,OAAO;IACnB,SAAS;AACT;IACA,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAChF,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;AAC5F;IACA,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;AAClF;IACA,QAAQ,MAAM,cAAc,GAAG;IAC/B;IACA,YAAY,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC;IAC5H,2BAA2B,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1G,YAAY,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC;IACzG,2BAA2B,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;IAC7H,YAAY,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;IACtF,2BAA2B,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC;IAC5E,6CAA6C,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IAC/G,YAAY,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE;IAC1G,2BAA2B,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AAC7H;IACA;IACA,YAAY,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC;IAC5E,6CAA6C,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC;IAC9G,2BAA2B,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;IACvF,YAAY,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC;IAC5H,2BAA2B,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;IAC1G,YAAY,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;IACzG,2BAA2B,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IAC7H,YAAY,IAAIA,gBAAK,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;IAC5H,2BAA2B,IAAIA,gBAAK,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IAC1G,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,WAAW,GAAG,EAAE,CAAC;IAC/B,QAAQ,MAAM,WAAW,GAAG,EAAE,CAAC;IAC/B,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACxD,YAAY,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC/B,YAAY,WAAW,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IAChC,SAAS;AACT;IACA,QAAQ,MAAM,MAAM,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC3C,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,MAAM,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC1D,YAAY,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IACpE,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC5D,gBAAgB,IAAI,cAAc,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE;IAC7D,oBAAoB,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC;IACrC,oBAAoB,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC1D,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACxD,YAAY,MAAM,SAAS,GAAG,IAAI,aAAa,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IAC9G,YAAY,SAAS,CAAC,IAAI,GAAG;IAC7B,gBAAgB,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC;IACzC,aAAa,CAAC;IACd,YAAY,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC1C,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,IAAI,GAAG,EAAE,CAAC;IACvB,QAAQ,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;IACzC,YAAY,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAC/C,SAAS;IACT,KAAK;AACL;AACA;IACA,IAAI,WAAW,GAAG;AAClB;IACA,QAAQ,IAAI,SAAS,GAAG,CAAC,CAAC;IAC1B,QAAQ,IAAI,CAAC,WAAW,CAAC,MAAM;IAC/B,YAAY,SAAS,EAAE,CAAC;IACxB,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,OAAO,SAAS,CAAC;IACzB,KAAK;AACL;IACA,IAAI,WAAW,CAAC,SAAS,EAAE;AAC3B;IACA,QAAQ,MAAM,mBAAmB,GAAG,CAAC,IAAI,EAAE,SAAS,KAAK;IACzD,YAAY,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;IAC5D,YAAY,KAAK,IAAI,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;IAC7C,gBAAgB,mBAAmB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACtD,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,OAAO,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;IAC7D,KAAK;AACL;IACA;;ICzJA,MAAM,aAAa,GAAG,IAAIA,gBAAK,CAAC,cAAc,EAAE,CAAC;IACjD,MAAM,aAAa,GAAG,IAAIA,gBAAK,CAAC,iBAAiB,EAAE,CAAC;AACpD;IACA;IACA;IACA;IACA;IACO,MAAM,SAAS,SAASA,gBAAK,CAAC,IAAI,CAAC;AAC1C;IACA,IAAI,WAAW,CAAC,6BAA6B,GAAG,KAAK,EAAE,gBAAgB,GAAG,CAAC,EAAE,+BAA+B,GAAG,IAAI,EAAE;IACrH,QAAQ,KAAK,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;IAC5C,QAAQ,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;IAClC,QAAQ,IAAI,CAAC,6BAA6B,GAAG,6BAA6B,CAAC;IAC3E,QAAQ,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IACjD,QAAQ,IAAI,CAAC,+BAA+B,GAAG,+BAA+B,CAAC;IAC/E,QAAQ,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,kBAAkB,GAAG,EAAE,CAAC;IACrC,QAAQ,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;IACxC,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IACtC,QAAQ,IAAI,CAAC,0BAA0B,GAAG;IAC1C,YAAY,IAAI,EAAE,IAAI;IACtB,YAAY,cAAc,EAAE,IAAI;IAChC,YAAY,gBAAgB,EAAE,IAAI;IAClC,YAAY,SAAS,EAAE,IAAI;IAC3B,YAAY,eAAe,EAAE,IAAI;IACjC,YAAY,oBAAoB,EAAE,IAAI;IACtC,YAAY,YAAY,EAAE,CAAC,CAAC;IAC5B,YAAY,kBAAkB,EAAE,CAAC,CAAC;IAClC,SAAS,CAAC;IACV,QAAQ,IAAI,CAAC,oCAAoC,GAAG,EAAE,CAAC;IACvD,QAAQ,IAAI,CAAC,qCAAqC,GAAG,EAAE,CAAC;IACxD,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,aAAa,GAAG;AAC3B;IACA;IACA;IACA,QAAQ,MAAM,kBAAkB,GAAG,CAAC;AACpaAAa,CAAC,CAAC;AACf;IACA,QAAQ,MAAM,oBAAoB,GAAG,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC,CAAC;AACf;IACA,QAAQ,MAAM,QAAQ,GAAG;IACzB,YAAY,oBAAoB,EAAE;IAClC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,IAAI;IAC7B,aAAa;IACb,YAAY,sBAAsB,EAAE;IACpC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,IAAI;IAC7B,aAAa;IACb,YAAY,OAAO,EAAE;IACrB,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,EAAE;IAC5C,aAAa;IACb,YAAY,UAAU,EAAE;IACxB,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,EAAE;IAC5C,aAAa;IACb,YAAY,eAAe,EAAE;IAC7B,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,EAAE;IAC5C,aAAa;IACb,YAAY,YAAY,EAAE;IAC1B,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,KAAK,EAAE;IAC1C,aAAa;IACb,YAAY,wBAAwB,EAAE;IACtC,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACtD,aAAa;IACb,YAAY,0BAA0B,EAAE;IACxC,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACtD,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,cAAc,CAAC;IAClD,YAAY,QAAQ,EAAE,QAAQ;IAC9B,YAAY,YAAY,EAAE,kBAAkB;IAC5C,YAAY,cAAc,EAAE,oBAAoB;IAChD,YAAY,WAAW,EAAE,IAAI;IAC7B,YAAY,SAAS,EAAE,GAAG;IAC1B,YAAY,QAAQ,EAAEA,gBAAK,CAAC,cAAc;IAC1C,YAAY,SAAS,EAAE,IAAI;IAC3B,YAAY,UAAU,EAAE,KAAK;IAC7B,YAAY,IAAI,EAAEA,gBAAK,CAAC,UAAU;IAClC,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,aAAa,CAAC,aAAa,EAAE;AACxC;IACA,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,cAAc,EAAE,CAAC;IACxD,QAAQ,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAClD;IACA;IACA,QAAQ,MAAM,cAAc,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACvD,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;IACvE,QAAQ,YAAY,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IACzD,QAAQ,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC7C,QAAQ,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,QAAQ,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC3C,QAAQ,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,QAAQ,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC;AACrC;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAChF;IACA;IACA,QAAQ,MAAM,eAAe,GAAG,IAAI,WAAW,CAAC,aAAa,CAAC,CAAC;IAC/D,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,wBAAwB,CAAC,eAAe,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IAC3F,QAAQ,YAAY,CAAC,QAAQ,CAACA,gBAAK,CAAC,gBAAgB,CAAC,CAAC;IACtD,QAAQ,QAAQ,CAAC,YAAY,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;AAC1D;IACA,QAAQ,QAAQ,CAAC,aAAa,GAAG,aAAa,CAAC;AAC/C;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,0BAA0B,CAAC,kBAAkB,EAAE,qBAAqB,GAAG,IAAI,EAAE;IACxF,QAAQ,qBAAqB,GAAG,qBAAqB,IAAI,EAAE,CAAC;IAC5D,QAAQ,qBAAqB,CAAC,MAAM,GAAG,kBAAkB,CAAC,MAAM,CAAC;IACjE,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,kBAAkB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC5D,YAAY,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE;IAC3C,gBAAgB,MAAM,OAAO,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACtD,gBAAgB,IAAI,OAAO,EAAE;IAC7B,oBAAoB,IAAI,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzE,oBAAoB,IAAI,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5E,oBAAoB,IAAI,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnE,oBAAoB,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAClF,oBAAoB,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IACrF,oBAAoB,MAAM,KAAK,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC5E,oBAAoB,MAAM,oBAAoB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrE,oBAAoB,oBAAoB,CAAC,OAAO,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;IAC5E,oBAAoB,qBAAqB,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC;IACpE,iBAAiB;IACjB,aAAa;IACb,SAAS;IACT,QAAQ,OAAO,qBAAqB,CAAC;IACrC,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,mBAAmB,CAAC,YAAY,EAAE;IAC7C,QAAQ,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;IAC7C,QAAQ,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAAE,CAAC;IAC9C,QAAQ,IAAI,eAAe,GAAG,CAAC,CAAC;IAChC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACtD,YAAY,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IAChD,YAAY,MAAM,UAAU,GAAG,WAAW,CAAC,aAAa,EAAE,CAAC;IAC3D,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IACjD,gBAAgB,kBAAkB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IACxD,gBAAgB,mBAAmB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IACzD,gBAAgB,eAAe,EAAE,CAAC;IAClC,aAAa;IACb,SAAS;IACT,QAAQ,OAAO;IACf,YAAY,kBAAkB;IAC9B,YAAY,mBAAmB;IAC/B,SAAS,CAAC;IACV,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,cAAc,CAAC,SAAS,EAAE;IACrC;IACA;IACA,QAAQ,MAAM,SAAS,GAAG,IAAI,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACjD,QAAQ,OAAO,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACxC,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC/C,QAAQ,SAAS,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,UAAU,KAAK;IAC9D,YAAY,SAAS,CAAC,aAAa,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC5D,YAAY,MAAM,gBAAgB,GAAG,SAAS,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC;IACvF,YAAY,MAAM,kBAAkB,GAAG,SAAS,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;IACtF,YAAY,OAAO,UAAU,CAAC,CAAC,KAAK,kBAAkB,CAAC,0BAA0B,IAAI,CAAC,CAAC,CAAC;IACxF,SAAS,CAAC,CAAC;IACX,QAAQ,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC3C;IACA,QAAQ,IAAI,kBAAkB,GAAG,CAAC,CAAC;IACnC,QAAQ,IAAI,aAAa,GAAG,CAAC,CAAC;IAC9B,QAAQ,IAAI,aAAa,GAAG,CAAC,CAAC;IAC9B,QAAQ,IAAI,SAAS,GAAG,CAAC,CAAC;AAC1B;IACA,QAAQ,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,KAAK;IACxC,YAAY,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC5D,YAAY,IAAI,cAAc,GAAG,CAAC,EAAE;IACpC,gBAAgB,aAAa,IAAI,cAAc,CAAC;IAChD,gBAAgB,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;IACxE,gBAAgB,SAAS,EAAE,CAAC;IAC5B,gBAAgB,kBAAkB,EAAE,CAAC;IACrC,aAAa;IACb,SAAS,CAAC,CAAC;IACX,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,kBAAkB,EAAE,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;IACpE,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,CAAC,CAAC,CAAC;IAC1E,QAAQ,aAAa,GAAG,aAAa,GAAG,SAAS,CAAC;IAClD,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,0BAA0B,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;IAClE,QAAQ,OAAO,CAAC,GAAG,CAAC,CAAC,mBAAmB,EAAE,SAAS,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;IACvE,QAAQ,OAAO,SAAS,CAAC;IACzB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,KAAK,CAAC,YAAY,EAAE,kBAAkB,EAAE,iCAAiC,GAAG,IAAI,EAAE;IACtF,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,QAAQ,MAAM,eAAe,GAAG,SAAS,CAAC,iCAAiC,CAAC,YAAY,CAAC,CAAC;IAC1F,QAAQ,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC,0BAA0B,CAAC,kBAAkB,EAAE,iCAAiC;IAC/H,0EAA0E,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,CAAC;IAC7G,QAAQ,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;IACjE,QAAQ,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;IAClD,QAAQ,MAAM,SAAS,GAAG,SAAS,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IACtE,QAAQ,IAAI,CAAC,oCAAoC,GAAG,SAAS,CAAC,kBAAkB,CAAC;IACjF,QAAQ,IAAI,CAAC,qCAAqC,GAAG,SAAS,CAAC,mBAAmB,CAAC;IACnF,QAAQ,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;AACxD;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,QAAQ,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;AACrD;IACA,QAAQ,IAAI,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAAC,0CAA0C,EAAE,CAAC;IACpG,QAAQ,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACxC,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,OAAO,GAAG;IACd,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,QAAQ,IAAI,IAAI,CAAC,+BAA+B,EAAE;IAClD,YAAY,IAAI,CAAC,uCAAuC,EAAE,CAAC;IAC3D,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,eAAe,GAAG;IACtB,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,aAAa,EAAE;IAC9D,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACpC,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACjC,SAAS;IACT,QAAQ,KAAK,IAAI,UAAU,IAAI,IAAI,CAAC,iBAAiB,EAAE;IACvD,YAAY,IAAI,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;IACnE,gBAAgB,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;IAC5E,gBAAgB,IAAI,gBAAgB,CAAC,OAAO,EAAE;IAC9C,oBAAoB,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IACvD,oBAAoB,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC;IACpD,iBAAiB;IACjB,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IACtC,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;IAC3B,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACpC,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACjC,SAAS;IACT,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,KAAK;AACL;IACA,IAAI,YAAY,GAAG;IACnB,QAAQ,OAAO,IAAI,CAAC,SAAS,CAAC;IAC9B,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,wBAAwB,GAAG;IAC/B,QAAQ,IAAI,CAAC,yBAAyB,EAAE,CAAC;IACzC,QAAQ,IAAI,IAAI,CAAC,+BAA+B,EAAE;IAClD,YAAY,IAAI,CAAC,6CAA6C,EAAE,CAAC;IACjE,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,yBAAyB,GAAG;AAChC;IACA,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AAChD;IACA,QAAQ,MAAM,WAAW,GAAG,IAAI,YAAY,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IAC7D,QAAQ,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IACzD,QAAQ,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IACtD,QAAQ,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAC/D;IACA,QAAQ,MAAM,8BAA8B,GAAG,CAAC,CAAC;IACjD,QAAQ,MAAM,gCAAgC,GAAG,CAAC,CAAC;AACnD;IACA,QAAQ,MAAM,sBAAsB,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACrE,QAAQ,OAAO,sBAAsB,CAAC,CAAC,GAAG,sBAAsB,CAAC,CAAC,GAAG,8BAA8B,GAAG,UAAU,GAAG,CAAC,EAAE;IACtH,YAAY,sBAAsB,CAAC,CAAC,IAAI,CAAC,CAAC;IAC1C,SAAS;AACT;IACA,QAAQ,MAAM,wBAAwB,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACvE,QAAQ,OAAO,wBAAwB,CAAC,CAAC,GAAG,wBAAwB,CAAC,CAAC,GAAG,gCAAgC,GAAG,UAAU,GAAG,CAAC,EAAE;IAC5H,YAAY,wBAAwB,CAAC,CAAC,IAAI,CAAC,CAAC;IAC5C,SAAS;AACT;IACA,QAAQ,IAAI,kBAAkB,CAAC;IAC/B,QAAQ,IAAI,iBAAiB,CAAC;IAC9B,QAAQ,IAAI,IAAI,CAAC,6BAA6B,EAAE;IAChD,YAAY,iBAAiB,GAAG,IAAI,WAAW,CAAC,sBAAsB,CAAC,CAAC,GAAG,sBAAsB,CAAC,CAAC,GAAG,8BAA8B,CAAC,CAAC;IACtI,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACzD,gBAAgB,iBAAiB,CAAC,CAAC,CAAC,GAAGA,gBAAK,CAAC,SAAS,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IACnF,aAAa;IACb,YAAY,kBAAkB,GAAG,IAAIA,gBAAK,CAAC,WAAW,CAAC,iBAAiB,EAAE,sBAAsB,CAAC,CAAC;IAClG,uDAAuD,sBAAsB,CAAC,CAAC,EAAEA,gBAAK,CAAC,QAAQ,EAAEA,gBAAK,CAAC,aAAa,CAAC,CAAC;IACtH,SAAS,MAAM;IACf,YAAY,iBAAiB,GAAG,IAAI,YAAY,CAAC,sBAAsB,CAAC,CAAC,GAAG,sBAAsB,CAAC,CAAC,GAAG,8BAA8B,CAAC,CAAC;IACvI,YAAY,iBAAiB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC/C,YAAY,kBAAkB,GAAG,IAAIA,gBAAK,CAAC,WAAW,CAAC,iBAAiB,EAAE,sBAAsB,CAAC,CAAC;IAClG,uDAAuD,sBAAsB,CAAC,CAAC,EAAEA,gBAAK,CAAC,QAAQ,EAAEA,gBAAK,CAAC,SAAS,CAAC,CAAC;IAClH,SAAS;IACT,QAAQ,kBAAkB,CAAC,WAAW,GAAG,IAAI,CAAC;IAC9C,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,GAAG,kBAAkB,CAAC;IAC7E,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;AACzF;IACA,QAAQ,MAAM,kBAAkB,GAAG,IAAI,WAAW,CAAC,wBAAwB,CAAC,CAAC;IAC7E,mDAAmD,wBAAwB,CAAC,CAAC,GAAG,gCAAgC,CAAC,CAAC;IAClH,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,MAAM,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;IACrC,YAAY,MAAM,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IACtC,YAAY,MAAM,gBAAgB,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3C,YAAY,kBAAkB,CAAC,gBAAgB,CAAC,GAAG,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC;IAC3G,iEAAiE,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC;IACjH,YAAY,kBAAkB,CAAC,gBAAgB,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAC9F,YAAY,kBAAkB,CAAC,gBAAgB,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IAClG,YAAY,kBAAkB,CAAC,gBAAgB,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IAClG,SAAS;IACT,QAAQ,MAAM,oBAAoB,GAAG,IAAIA,gBAAK,CAAC,WAAW,CAAC,kBAAkB,EAAE,wBAAwB,CAAC,CAAC;IACzG,2DAA2D,wBAAwB,CAAC,CAAC,EAAEA,gBAAK,CAAC,iBAAiB,EAAEA,gBAAK,CAAC,eAAe,CAAC,CAAC;IACvI,QAAQ,oBAAoB,CAAC,cAAc,GAAG,UAAU,CAAC;IACzD,QAAQ,oBAAoB,CAAC,WAAW,GAAG,IAAI,CAAC;IAChD,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,GAAG,oBAAoB,CAAC;IACjF,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,wBAAwB,CAAC,KAAK,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IAC7F,QAAQ,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;AAChD;IACA,QAAQ,IAAI,CAAC,iBAAiB,GAAG;IACjC,YAAY,aAAa,EAAE;IAC3B,gBAAgB,MAAM,EAAE,iBAAiB;IACzC,gBAAgB,SAAS,EAAE,kBAAkB;IAC7C,gBAAgB,MAAM,EAAE,sBAAsB;IAC9C,aAAa;IACb,YAAY,cAAc,EAAE;IAC5B,gBAAgB,MAAM,EAAE,kBAAkB;IAC1C,gBAAgB,SAAS,EAAE,oBAAoB;IAC/C,gBAAgB,MAAM,EAAE,wBAAwB;IAChD,aAAa;IACb,SAAS,CAAC;IACV,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,aAAa,EAAE,gBAAgB,EAAE;IACzD,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IACvC,QAAQ,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC1D,QAAQ,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1D,QAAQ,QAAQ,CAAC,aAAa,GAAG,gBAAgB,CAAC;IAClD,KAAK;AACL;IACA,IAAI,cAAc,GAAG,WAAW;AAChC;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAC7C;IACA,QAAQ,OAAO,SAAS,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB,EAAE;IAClF,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IACpD,YAAY,IAAI,UAAU,GAAG,CAAC,EAAE;IAChC,gBAAgB,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB;IACvE,6BAA6B,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACzE,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrE,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnG,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;IAC/F,gBAAgB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACxD,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,oBAAoB,GAAG;IAC3B,QAAQ,OAAO,IAAI,CAAC,iBAAiB,CAAC;IACtC,KAAK;AACL;IACA,IAAI,aAAa,GAAG;IACpB,QAAQ,OAAO,SAAS,CAAC,iCAAiC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9E,KAAK;AACL;IACA,IAAI,OAAO,iCAAiC,CAAC,YAAY,EAAE;IAC3D,QAAQ,IAAI,eAAe,GAAG,CAAC,CAAC;IAChC,QAAQ,KAAK,IAAI,WAAW,IAAI,YAAY,EAAE,eAAe,IAAI,WAAW,CAAC,aAAa,EAAE,CAAC;IAC7F,QAAQ,OAAO,eAAe,CAAC;IAC/B,KAAK;AACL;IACA,IAAI,uCAAuC,GAAG;AAC9C;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;AACnC;IACA,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAC9C;IACA,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,GAAG,EAAE;IACjD,YAAY,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;IACtE,YAAY,IAAI,CAAC,0BAA0B,CAAC,GAAG,GAAG,IAAI,CAAC;IACvD,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE;IACrD,YAAY,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;IACtE,YAAY,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC,CAAC;IAC1E,YAAY,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC;IAC5E,YAAY,IAAI,CAAC,0BAA0B,CAAC,OAAO,GAAG,IAAI,CAAC;IAC3D,YAAY,IAAI,CAAC,0BAA0B,CAAC,YAAY,GAAG,IAAI,CAAC;IAChE,YAAY,IAAI,CAAC,0BAA0B,CAAC,cAAc,GAAG,IAAI,CAAC;IAClE,SAAS;IACT,QAAQ,IAAI,CAAC,6CAA6C,EAAE,CAAC;IAC7D,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,EAAE,EAAE;IAChD,YAAY,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;IAC3E,YAAY,IAAI,CAAC,0BAA0B,CAAC,EAAE,GAAG,IAAI,CAAC;IACtD,SAAS;IACT,KAAK;AACL;IACA,IAAI,6CAA6C,GAAG;AACpD;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;AACnC;IACA,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAC9C;IACA,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,aAAa,EAAE;IAC3D,YAAY,IAAI,CAAC,0BAA0B,CAAC,aAAa,GAAG,IAAI,CAAC;IACjE,YAAY,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;IAC3E,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,EAAE;IAChE,YAAY,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;IAChF,YAAY,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACtE,SAAS;IACT,KAAK;AACL;IACA,IAAI,WAAW,CAAC,QAAQ,EAAE;IAC1B,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE;IACxC,YAAY,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACrC,YAAY,IAAI,IAAI,CAAC,+BAA+B,IAAI,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,EAAE;IAClF,gBAAgB,IAAI,CAAC,0CAA0C,EAAE,CAAC;IAClE,gBAAgB,IAAI,CAAC,6CAA6C,EAAE,CAAC;IACrE,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,0CAA0C,GAAG,WAAW;AAC5D;IACA,QAAQ,IAAI,eAAe,CAAC;IAC5B,QAAQ,IAAI,iBAAiB,CAAC;AAC9B;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AACpD;IACA,YAAY,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,eAAe,KAAK,IAAI,CAAC,QAAQ,IAAI,iBAAiB,KAAK,UAAU,CAAC,EAAE,OAAO;IAClH,YAAY,MAAM,iBAAiB,IAAI,eAAe,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1E,YAAY,MAAM,cAAc,GAAG,iBAAiB,KAAK,UAAU,CAAC;IACpE,YAAY,IAAI,iBAAiB,EAAE;IACnC,gBAAgB,IAAI,CAAC,uCAAuC,EAAE,CAAC;IAC/D,aAAa,MAAM,IAAI,cAAc,EAAE;IACvC,gBAAgB,IAAI,CAAC,6CAA6C,EAAE,CAAC;IACrE,aAAa;AACb;IACA,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAClD;IACA,YAAY,MAAM,YAAY,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,KAAK;IACvD,gBAAgB,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACrD,gBAAgB,IAAI,CAAC,MAAM,EAAE;IAC7B,oBAAoB,OAAO,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACvF,oBAAoB,OAAO,IAAI,CAAC;IAChC,iBAAiB;AACjB;IACA,gBAAgB,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAChD,gBAAgB,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AACzC;IACA,gBAAgB,MAAM,QAAQ,GAAG,EAAE,CAAC,kBAAkB,CAAC,MAAM,EAAE,EAAE,CAAC,cAAc,CAAC,CAAC;IAClF,gBAAgB,IAAI,CAAC,QAAQ,EAAE;IAC/B,oBAAoB,IAAI,QAAQ,GAAG,SAAS,CAAC;IAC7C,oBAAoB,IAAI,IAAI,KAAK,EAAE,CAAC,aAAa,EAAE,QAAQ,GAAG,eAAe,CAAC;IAC9E,yBAAyB,IAAI,IAAI,KAAK,EAAE,CAAC,eAAe,EAAE,QAAQ,GAAG,kBAAkB,CAAC;IACxF,oBAAoB,MAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC/D,oBAAoB,OAAO,CAAC,KAAK,CAAC,oBAAoB,GAAG,QAAQ,GAAG,qBAAqB,GAAG,MAAM,CAAC,CAAC;IACpG,oBAAoB,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC5C,oBAAoB,OAAO,IAAI,CAAC;IAChC,iBAAiB;AACjB;IACA,gBAAgB,OAAO,MAAM,CAAC;IAC9B,aAAa,CAAC;AACd;IACA,YAAY,MAAM,QAAQ;IAC1B,YAAY,CAAC;AACb;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,CAAC,CAAC;AACd;IACA,YAAY,MAAM,QAAQ;IAC1B,YAAY,CAAC;AACb;AACA;AACA;AACA,YAAY,CAAC,CAAC;AACd;IACA,YAAY,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;IACxE,YAAY,MAAM,cAAc,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;AACvE;IACA,YAAY,IAAI,iBAAiB,EAAE;IACnC,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,GAAG,GAAG,EAAE,CAAC,iBAAiB,EAAE,CAAC;IAC7E,aAAa;AACb;IACA,YAAY,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;AACpE;IACA,YAAY,IAAI,iBAAiB,EAAE;IACnC,gBAAgB,MAAM,OAAO,GAAG,EAAE,CAAC,aAAa,EAAE,CAAC;IACnD,gBAAgB,MAAM,YAAY,GAAG,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IAClF,gBAAgB,MAAM,cAAc,GAAG,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;IACtF,gBAAgB,IAAI,CAAC,YAAY,IAAI,CAAC,cAAc,EAAE;IACtD,oBAAoB,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;IACnG,iBAAiB;IACjB,gBAAgB,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IACvD,gBAAgB,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IACzD,gBAAgB,EAAE,CAAC,yBAAyB,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,CAAC;IACzF,gBAAgB,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACxC;IACA,gBAAgB,MAAM,MAAM,GAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;IAC/E,gBAAgB,IAAI,CAAC,MAAM,EAAE;IAC7B,oBAAoB,MAAM,KAAK,GAAG,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAChE,oBAAoB,OAAO,CAAC,KAAK,CAAC,uCAAuC,GAAG,KAAK,CAAC,CAAC;IACnF,oBAAoB,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9C,oBAAoB,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IACpD,oBAAoB,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IAClD,oBAAoB,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAChG,iBAAiB;AACjB;IACA,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,OAAO,GAAG,OAAO,CAAC;IAClE,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,YAAY,GAAG,YAAY,CAAC;IAC5E,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,YAAY,GAAG,cAAc,CAAC;IAC9E,aAAa;AACb;IACA,YAAY,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;AACnE;IACA,YAAY,IAAI,CAAC,0BAA0B,CAAC,UAAU;IACtD,gBAAgB,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxF,YAAY,IAAI,CAAC,0BAA0B,CAAC,gBAAgB;IAC5D,gBAAgB,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;AAChG;IACA,YAAY,IAAI,iBAAiB,IAAI,cAAc,EAAE;IACrD,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,aAAa,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;IAClF,gBAAgB,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;IAC9F,gBAAgB,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvF,gBAAgB,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACrG,aAAa;AACb;IACA,YAAY,IAAI,iBAAiB,IAAI,cAAc,EAAE;IACrD,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;IACvF,aAAa;IACb,YAAY,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;IAC/F,YAAY,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,UAAU,GAAG,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC;AAC5E;IACA,YAAY,IAAI,iBAAiB,EAAE;IACnC,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,EAAE,GAAG,EAAE,CAAC,uBAAuB,EAAE,CAAC;IAClF,aAAa;IACb,YAAY,EAAE,CAAC,qBAAqB,CAAC,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;IAChG,YAAY,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,yBAAyB,EAAE,CAAC,EAAE,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;AACnH;IACA,YAAY,IAAI,cAAc,EAAE,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAC9D,YAAY,IAAI,UAAU,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AAC3D;IACA,YAAY,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC5C,YAAY,iBAAiB,GAAG,UAAU,CAAC;IAC3C,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA,IAAI,6CAA6C,GAAG;AACpD;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;AACnC;IACA,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAC9C;IACA,QAAQ,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;IACpE,QAAQ,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;AAChE;IACA,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IACzD,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;IACtF,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;AACnE;IACA,QAAQ,IAAI,UAAU,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IACvD,KAAK;AACL;IACA,IAAI,qBAAqB,CAAC,mBAAmB,EAAE,oBAAoB,EAAE;AACrE;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;AACnC;IACA,QAAQ,MAAM,eAAe,GAAG,SAAS,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;IACrF,QAAQ,MAAM,SAAS,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;AACxF;IACA;IACA,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAC9C;IACA,QAAQ,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;IACpE,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;AACnE;IACA,QAAQ,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;IAChE,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;AAC/D;IACA,QAAQ,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;AACzC;IACA,QAAQ,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;AACjH;IACA,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;IACtF,QAAQ,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IAC/E,QAAQ,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7F;IACA,QAAQ,EAAE,CAAC,qBAAqB,CAAC,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;IAC5F,QAAQ,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,yBAAyB,EAAE,CAAC,EAAE,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;AAC/G;IACA,QAAQ,EAAE,CAAC,sBAAsB,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;IAC7C,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IAC1D,QAAQ,EAAE,CAAC,oBAAoB,EAAE,CAAC;AAClC;IACA,QAAQ,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,yBAAyB,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IACjE,QAAQ,EAAE,CAAC,qBAAqB,CAAC,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;AAC9D;IACA,QAAQ,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;AAC1C;IACA,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;IAC3F,QAAQ,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,EAAE,oBAAoB,CAAC,CAAC;IACtE,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC7C;IACA;AACA;IACA,QAAQ,IAAI,cAAc,EAAE,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAC1D,QAAQ,IAAI,UAAU,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AACvD;IACA,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,uBAAuB,CAAC,WAAW,EAAE,SAAS,EAAE;IACpD,QAAQ,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;IACzE,QAAQ,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACpE,QAAQ,SAAS,CAAC,oBAAoB,GAAG,IAAI,CAAC,+BAA+B,CAAC,WAAW,CAAC,CAAC;IAC3F,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE;IACtD,QAAQ,IAAI,MAAM,GAAG,CAAC,CAAC;IACvB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC3D,YAAY,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IACrD,YAAY,MAAM,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACvE,YAAY,IAAI,WAAW,EAAE,WAAW,CAAC,wBAAwB,CAAC,WAAW,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC;IAC7G,YAAY,IAAI,OAAO,EAAE,WAAW,CAAC,oBAAoB,CAAC,OAAO,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC;IACjG,YAAY,IAAI,MAAM,EAAE,WAAW,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC;IAC9F,YAAY,MAAM,IAAI,WAAW,CAAC,aAAa,EAAE,CAAC;IAClD,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,iBAAiB,CAAC,OAAO,EAAE;IAC/B,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAChD,QAAQ,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IAC9D,QAAQ,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;IAC3D,QAAQ,IAAI,UAAU,CAAC;IACvB,QAAQ,IAAI,cAAc,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7C,QAAQ,UAAU,GAAG,IAAI,UAAU,CAAC,UAAU,GAAG,cAAc,CAAC,CAAC;IACjE,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC7C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IACxC,gBAAgB,UAAU,CAAC,CAAC,GAAG,cAAc,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IAClG,aAAa;IACb,YAAY,IAAI,OAAO,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;IAChE,SAAS;IACT,QAAQ,OAAO,UAAU,CAAC;IAC1B,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,cAAc,GAAG,WAAW;AAChC;IACA,QAAQ,MAAM,SAAS,GAAG,EAAE,CAAC;AAC7B;IACA,QAAQ,OAAO,SAAS,WAAW,EAAE,SAAS,EAAE;IAChD,YAAY,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IACjE,YAAY,SAAS,CAAC,WAAW,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,oBAAoB,CAAC,CAAC;IAClH,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,wBAAwB,GAAG,WAAW;AAC1C;IACA,QAAQ,MAAM,SAAS,GAAG,EAAE,CAAC;AAC7B;IACA,QAAQ,OAAO,SAAS,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE;IAC5D,YAAY,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IACjE,YAAY,SAAS,CAAC,WAAW,CAAC,wBAAwB,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,CAAC,oBAAoB,CAAC,CAAC;IACxI,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,GAAG,WAAW;AAC/B;IACA,QAAQ,MAAM,SAAS,GAAG,EAAE,CAAC;AAC7B;IACA,QAAQ,OAAO,SAAS,WAAW,EAAE,QAAQ,EAAE;IAC/C,YAAY,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IACjE,YAAY,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,oBAAoB,CAAC,CAAC;IAChH,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,sBAAsB,CAAC,WAAW,EAAE;IACxC,QAAQ,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,qCAAqC,CAAC,WAAW,CAAC,CAAC,CAAC;IAC1F,KAAK;AACL;IACA,IAAI,2BAA2B,CAAC,WAAW,EAAE;IAC7C,QAAQ,OAAO,IAAI,CAAC,qCAAqC,CAAC,WAAW,CAAC,CAAC;IACvE,KAAK;AACL;IACA,IAAI,+BAA+B,CAAC,WAAW,EAAE;IACjD,QAAQ,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,qCAAqC,CAAC,WAAW,CAAC,CAAC,CAAC;IACnG,KAAK;AACL;IACA,IAAI,kBAAkB,CAAC,WAAW,EAAE;IACpC,QAAQ,OAAO,IAAI,CAAC,oCAAoC,CAAC,WAAW,CAAC,CAAC;IACtE,KAAK;AACL;IACA,IAAI,OAAO,qBAAqB,CAAC,MAAM,EAAE;IACzC,QAAQ,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC/C,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC;IAClC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;IACrC,YAAY,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IACvE,SAAS;IACT,QAAQ,OAAO,cAAc,CAAC;IAC9B,KAAK;IACL;;ACp7BA,qBAAe,k9BAAk9B;;ICA19B,MAAM,SAAS,CAAC;AACvB;IACA,IAAI,OAAO,aAAa,GAAG,CAAC,IAAI,EAAE,CAAC;IACnC,IAAI,OAAO,cAAc,GAAG,KAAK,CAAC;IAClC,IAAI,OAAO,aAAa,GAAG,CAAC,CAAC;IAC7B,IAAI,OAAO,WAAW,GAAG,CAAC,CAAC;AAC3B;IACA;;ICJA,SAAS,UAAU,CAAC,IAAI,EAAE;AAC1B;IACA,IAAI,IAAI,YAAY,CAAC;IACrB,IAAI,IAAI,UAAU,CAAC;IACnB,IAAI,IAAI,eAAe,CAAC;IACxB,IAAI,IAAI,UAAU,CAAC;IACnB,IAAI,IAAI,mBAAmB,CAAC;IAC5B,IAAI,IAAI,mBAAmB,CAAC;IAC5B,IAAI,IAAI,0BAA0B,CAAC;IACnC,IAAI,IAAI,qBAAqB,CAAC;IAC9B,IAAI,IAAI,iBAAiB,CAAC;IAC1B,IAAI,IAAI,aAAa,CAAC;IACtB,IAAI,IAAI,mBAAmB,CAAC;IAC5B,IAAI,IAAI,UAAU,CAAC;AACnB;IACA,IAAI,IAAI,SAAS,CAAC;AAClB;IACA,IAAI,SAAS,IAAI,CAAC,cAAc,EAAE,gBAAgB,EAAE,aAAa;IACjE,kBAAkB,uBAAuB,EAAE,iBAAiB,EAAE,wBAAwB,EAAE;IACxF,QAAQ,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;AAChD;IACA,QAAQ,IAAI,CAAC,eAAe,EAAE;IAC9B,YAAY,MAAM,aAAa,GAAG,IAAI,WAAW,CAAC,UAAU,EAAE,mBAAmB,EAAE,iBAAiB,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IACrH,YAAY,aAAa,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACjD,YAAY,IAAI,uBAAuB,EAAE;IACzC,gBAAgB,MAAM,oBAAoB,GAAG,IAAI,WAAW,CAAC,UAAU,EAAE,0BAA0B;IACnG,6DAA6D,wBAAwB,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;IACtG,gBAAgB,oBAAoB,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;IACnE,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,UAAU,EAAE,UAAU,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAC/E,QAAQ,IAAI,UAAU,CAAC,UAAU,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC/E,QAAQ,IAAI,WAAW,CAAC,UAAU,EAAE,iBAAiB,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAChG,QAAQ,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,aAAa,EAAE,0BAA0B;IACvG,yCAAyC,qBAAqB,EAAE,iBAAiB,EAAE,mBAAmB;IACtG,yCAAyC,mBAAmB,EAAE,SAAS,CAAC,aAAa,EAAE,cAAc;IACrG,yCAAyC,gBAAgB,EAAE,UAAU,EAAE,uBAAuB,CAAC,CAAC;AAChG;IACA,QAAQ,MAAM,WAAW,GAAG;IAC5B,YAAY,UAAU,EAAE,IAAI;IAC5B,YAAY,gBAAgB,EAAE,cAAc;IAC5C,YAAY,kBAAkB,EAAE,gBAAgB;IAChD,YAAY,UAAU,EAAE,CAAC;IACzB,SAAS,CAAC;IACV,QAAQ,MAAM,eAAe,GAAG,EAAE,CAAC;IACnC,QAAQ,IAAI,CAAC,eAAe,EAAE;IAC9B,YAAY,MAAM,aAAa,GAAG,IAAI,WAAW,CAAC,UAAU,EAAE,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;IACrG,YAAY,MAAM,gBAAgB,GAAG,IAAI,WAAW,CAAC,gBAAgB,CAAC,CAAC;IACvE,YAAY,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAChD,YAAY,WAAW,CAAC,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC;IAChE,YAAY,eAAe,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC1D,SAAS;IACT,QAAQ,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;AAC9C;IACA,QAAQ,WAAW,CAAC,QAAQ,GAAG,WAAW,GAAG,aAAa,CAAC;AAC3D;IACA,QAAQ,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;IACvD,KAAK;AACL;IACA,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK;IAC5B,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE;IAC5B,YAAY,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IACrC,YAAY,IAAI,UAAU,CAAC,UAAU,EAAE,aAAa,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IACnG,YAAY,IAAI,CAAC,WAAW,CAAC;IAC7B,gBAAgB,mBAAmB,EAAE,IAAI;IACzC,aAAa,CAAC,CAAC;IACf,SAAS,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE;IAChC,YAAY,MAAM,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;IAClE,YAAY,MAAM,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC;IAC9D,YAAY,MAAM,uBAAuB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC;AAChF;IACA,YAAY,IAAI,iBAAiB,CAAC;IAClC,YAAY,IAAI,wBAAwB,CAAC;IACzC,YAAY,IAAI,CAAC,eAAe,EAAE;IAClC,gBAAgB,iBAAiB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;IAC9D,gBAAgB,IAAI,uBAAuB,EAAE,wBAAwB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC;IACzG,aAAa;IACb,YAAY,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,uBAAuB;IAC3F,gBAAgB,iBAAiB,EAAE,wBAAwB,CAAC,CAAC;IAC7D,SAAS,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE;IAChC;IACA,YAAY,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;AAC9C;IACA,YAAY,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;IAChD,YAAY,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;AAC1D;IACA,YAAY,MAAM,uBAAuB,GAAG,SAAS,CAAC,WAAW,GAAG,CAAC,CAAC;AACtE;IACA,YAAY,MAAM,eAAe,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAChF;IACA,YAAY,MAAM,8BAA8B,GAAG,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;IACtF,YAAY,MAAM,wBAAwB,GAAG,UAAU,GAAG,uBAAuB,CAAC;IAClF,YAAY,MAAM,+BAA+B,GAAG,EAAE,GAAG,SAAS,CAAC,aAAa,CAAC;IACjF,YAAY,MAAM,qCAAqC,GAAG,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;IAC7F,YAAY,MAAM,gCAAgC,GAAG,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;IACxF,YAAY,MAAM,8BAA8B,GAAG,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;IACtF,YAAY,MAAM,wCAAwC,GAAG,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC,WAAW,GAAG,CAAC,CAAC;IACjH,YAAY,MAAM,WAAW,GAAG,SAAS,CAAC,cAAc,GAAG,EAAE,CAAC;AAC9D;IACA,YAAY,MAAM,mBAAmB,GAAG,8BAA8B;IACtE,wCAAwC,wBAAwB;IAChE,wCAAwC,+BAA+B;IACvE,wCAAwC,qCAAqC;IAC7E,wCAAwC,gCAAgC;IACxE,wCAAwC,8BAA8B;IACtE,wCAAwC,wCAAwC;IAChF,wCAAwC,WAAW,CAAC;IACpD,YAAY,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAAG,SAAS,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;IACvG,YAAY,MAAM,gBAAgB,GAAG;IACrC,gBAAgB,MAAM,EAAE,EAAE;IAC1B,gBAAgB,GAAG,EAAE;IACrB,oBAAoB,MAAM,EAAE,IAAI,WAAW,CAAC,MAAM,CAAC;IACnD,wBAAwB,OAAO,EAAE,kBAAkB,GAAG,CAAC;IACvD,wBAAwB,OAAO,EAAE,kBAAkB,GAAG,CAAC;IACvD,wBAAwB,MAAM,EAAE,IAAI;IACpC,qBAAqB,CAAC;IACtB,iBAAiB;IACjB,aAAa,CAAC;IACd,YAAY,WAAW,CAAC,OAAO,CAAC,eAAe,CAAC;IAChD,aAAa,IAAI,CAAC,CAAC,UAAU,KAAK;IAClC,gBAAgB,OAAO,WAAW,CAAC,WAAW,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;IAC7E,aAAa,CAAC;IACd,aAAa,IAAI,CAAC,CAAC,QAAQ,KAAK;IAChC,gBAAgB,YAAY,GAAG,QAAQ,CAAC;IACxC,gBAAgB,mBAAmB,GAAG,CAAC,CAAC;IACxC,gBAAgB,aAAa,GAAG,mBAAmB,GAAG,8BAA8B,CAAC;IACrF,gBAAgB,mBAAmB,GAAG,aAAa,GAAG,wBAAwB,CAAC;IAC/E,gBAAgB,0BAA0B,GAAG,mBAAmB,GAAG,+BAA+B,CAAC;IACnG,gBAAgB,qBAAqB,GAAG,0BAA0B,GAAG,qCAAqC,CAAC;IAC3G,gBAAgB,iBAAiB,GAAG,qBAAqB,GAAG,gCAAgC,CAAC;IAC7F,gBAAgB,mBAAmB,GAAG,iBAAiB,GAAG,wCAAwC,CAAC;IACnG,gBAAgB,UAAU,GAAG,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;IAChE,gBAAgB,IAAI,eAAe,EAAE;IACrC,oBAAoB,IAAI,CAAC,WAAW,CAAC;IACrC,wBAAwB,yBAAyB,EAAE,IAAI;IACvD,wBAAwB,qBAAqB,EAAE,UAAU;IACzD,wBAAwB,qBAAqB,EAAE,mBAAmB;IAClE,wBAAwB,qBAAqB,EAAE,UAAU;IACzD,wBAAwB,qBAAqB,EAAE,mBAAmB;IAClE,wBAAwB,4BAA4B,EAAE,UAAU;IAChE,wBAAwB,4BAA4B,EAAE,0BAA0B;IAChF,qBAAqB,CAAC,CAAC;IACvB,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,WAAW,CAAC;IACrC,wBAAwB,yBAAyB,EAAE,IAAI;IACvD,qBAAqB,CAAC,CAAC;IACvB,iBAAiB;IACjB,aAAa,CAAC,CAAC;IACf,SAAS;IACT,KAAK,CAAC;IACN,CAAC;AACD;IACO,SAAS,gBAAgB,CAAC,UAAU,EAAE,eAAe,EAAE;IAC9D,IAAI,MAAM,MAAM,GAAG,IAAI,MAAM;IAC7B,QAAQ,GAAG,CAAC,eAAe;IAC3B,YAAY,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,EAAE;IAC9D,gBAAgB,IAAI,EAAE,wBAAwB;IAC9C,aAAa,CAAC;IACd,SAAS;IACT,KAAK,CAAC;AACN;IACA,IAAI,MAAM,sBAAsB,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;IACpD,IAAI,MAAM,eAAe,GAAG,IAAI,UAAU,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAC1E,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC5D,QAAQ,eAAe,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAClE,KAAK;AACL;IACA,IAAI,MAAM,CAAC,WAAW,CAAC;IACvB,QAAQ,MAAM,EAAE;IAChB,YAAY,iBAAiB,EAAE,eAAe,CAAC,MAAM;IACrD,YAAY,YAAY,EAAE,UAAU;IACpC,YAAY,iBAAiB,EAAE,eAAe;IAC9C;IACA,YAAY,WAAW,EAAE;IACzB,gBAAgB,eAAe,EAAE,SAAS,CAAC,aAAa;IACxD,gBAAgB,aAAa,EAAE,SAAS,CAAC,WAAW;IACpD,gBAAgB,eAAe,EAAE,SAAS,CAAC,aAAa;IACxD,gBAAgB,gBAAgB,EAAE,SAAS,CAAC,cAAc;IAC1D,aAAa;IACb,SAAS;IACT,KAAK,CAAC,CAAC;IACP,IAAI,OAAO,MAAM,CAAC;IAClB;;IC7KA,MAAM,gBAAgB,GAAG,EAAE,CAAC;IAC5B,MAAM,mCAAmC,GAAG,GAAG,CAAC;AAChD;IACA;IACA;IACA;IACA;IACO,MAAM,MAAM,CAAC;AACpB;IACA,IAAI,WAAW,CAAC,OAAO,GAAG,EAAE,EAAE;AAC9B;IACA;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACxE;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,OAAO,CAAC,qBAAqB,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACxF,QAAQ,IAAI,CAAC,qBAAqB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAClG;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,mBAAmB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAClF,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC9F;IACA;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,KAAK,CAAC;AACtD;IACA;IACA,QAAQ,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,CAAC,cAAc,KAAK,IAAI,EAAE,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;IACnH,QAAQ,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;IACzE,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrE;IACA;IACA,QAAQ,IAAI,OAAO,CAAC,kBAAkB,KAAK,SAAS,EAAE,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACxF,QAAQ,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;AAC7D;IACA;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;AAC/C;IACA;IACA;IACA,QAAQ,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,IAAI,KAAK,CAAC;IAC9E,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,sBAAsB,GAAG,CAAC,GAAG,MAAM,CAAC,gBAAgB,CAAC;AAC1F;IACA;IACA,QAAQ,IAAI,OAAO,CAAC,6BAA6B,KAAK,SAAS,IAAI,OAAO,CAAC,6BAA6B,KAAK,IAAI,EAAE;IACnH,YAAY,OAAO,CAAC,6BAA6B,GAAG,IAAI,CAAC;IACzD,SAAS;IACT,QAAQ,IAAI,CAAC,6BAA6B,GAAG,OAAO,CAAC,6BAA6B,CAAC;AACnF;IACA;IACA,QAAQ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IACnC;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IACzC;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AACrC;IACA;IACA;IACA,QAAQ,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;IAC7D,QAAQ,IAAI,IAAI,CAAC,kBAAkB,KAAK,IAAI,IAAI,IAAI,CAAC,kBAAkB,KAAK,KAAK,EAAE;IACnF,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;IACjE,iBAAiB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IAChD,SAAS;AACT;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,OAAO,CAAC,sBAAsB,KAAK,KAAK,IAAI,OAAO,CAAC,sBAAsB,KAAK,IAAI,EAAE,OAAO,CAAC,sBAAsB,GAAG,IAAI,CAAC;IACvI,QAAQ,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;AACrE;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC7B;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,6BAA6B,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;AAC3H;IACA,QAAQ,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IACpC,QAAQ,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IACtC,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC9B;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAChC;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC/B,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IACjC,QAAQ,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;IAClC,QAAQ,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;IAC5C,QAAQ,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;IAC5C,QAAQ,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC;AACnD;IACA,QAAQ,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IAC3C,QAAQ,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;AAC/C;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AACzC;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,QAAQ,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;AACjC;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IAC5B,QAAQ,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;AAC9B;IACA,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACxD,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACpD;IACA,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACjD,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC1F,QAAQ,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;AACnC;IACA,QAAQ,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC;IACnF,QAAQ,IAAI,CAAC,qBAAqB,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC;AACvF;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IACjC,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,IAAI,GAAG;AACX;IACA,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE,OAAO;AACrC;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;IAC/B,YAAY,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;IAC7C,gBAAgB,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACjE,gBAAgB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;IACtD,gBAAgB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;IACvD,gBAAgB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;IAC7D,gBAAgB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5D,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,IAAI,QAAQ,CAAC,IAAI,CAAC;IAC3F,aAAa;IACb,SAAS;AACT;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;AACnD;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IACvC,YAAY,IAAI,CAAC,MAAM,GAAG,IAAIA,gBAAK,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC3H,YAAY,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAClE,YAAY,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACzD,YAAY,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;IAC3D,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;IACzC,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAIA,gBAAK,CAAC,aAAa,CAAC;IACpD,gBAAgB,SAAS,EAAE,KAAK;IAChC,gBAAgB,SAAS,EAAE,OAAO;IAClC,aAAa,CAAC,CAAC;IACf,YAAY,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC/D,YAAY,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;IAC3C,YAAY,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAIA,gBAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;IAC1E,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;AAC1E;IACA,YAAY,MAAM,cAAc,GAAG,IAAI,cAAc,CAAC,MAAM;IAC5D,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC3D,gBAAgB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC9E,aAAa,CAAC,CAAC;IACf,YAAY,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrD,YAAY,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACnE,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,IAAI,IAAIA,gBAAK,CAAC,KAAK,EAAE,CAAC;IACrD,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvD,QAAQ,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;IAC3C,QAAQ,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;AAC7C;IACA,QAAQ,IAAI,IAAI,CAAC,kBAAkB,EAAE;IACrC,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACrF,YAAY,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACpD,YAAY,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,GAAG,CAAC;IAC5C,YAAY,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;IACxD,YAAY,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,GAAG,CAAC;IAC9C,YAAY,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC;IAC/C,YAAY,IAAI,CAAC,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC;IAC/C,YAAY,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAChE,YAAY,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IACjG,YAAY,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IACjG,YAAY,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IAC7F,YAAY,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;IACjF,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,cAAc,EAAE,CAAC;IAC9B,QAAQ,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AAC3D;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAChC,KAAK;AACL;IACA,IAAI,SAAS,GAAG,WAAW;AAC3B;IACA,QAAQ,MAAM,OAAO,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,MAAM,eAAe,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACpD;IACA,QAAQ,OAAO,SAAS,CAAC,EAAE;IAC3B,YAAY,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClC,YAAY,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAChE,YAAY,cAAc,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;IACpE,YAAY,eAAe,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;IACtE,YAAY,QAAQ,CAAC,CAAC,IAAI;IAC1B,gBAAgB,KAAK,WAAW;IAChC,oBAAoB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;IACtE,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,YAAY;IACjC,oBAAoB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;IACvE,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/D,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACnE,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IACnD,oBAAoB,IAAI,IAAI,CAAC,QAAQ,EAAE;IACvC,wBAAwB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;IAC/D,qBAAqB,MAAM;IAC3B,wBAAwB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IAC9D,qBAAqB;IACrB,gBAAgB,MAAM;IACtB,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,WAAW,CAAC,KAAK,EAAE;IACvB,QAAQ,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7D,KAAK;AACL;IACA,IAAI,WAAW,GAAG;IAClB,QAAQ,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACxD,QAAQ,IAAI,CAAC,aAAa,GAAG,cAAc,EAAE,CAAC;IAC9C,KAAK;AACL;IACA,IAAI,SAAS,GAAG,WAAW;AAC3B;IACA,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAChD;IACA,QAAQ,OAAO,SAAS,KAAK,EAAE;IAC/B,YAAY,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7E,YAAY,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACjD,YAAY,MAAM,QAAQ,GAAG,WAAW,GAAG,IAAI,CAAC,aAAa,GAAG,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAChG,YAAY,IAAI,QAAQ,EAAE;IAC1B,gBAAgB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,YAAY,CAAC,KAAK,EAAE;IACxB,QAAQ,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7D,QAAQ,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACxC,KAAK;AACL;IACA,IAAI,wBAAwB,GAAG,WAAW;AAC1C;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,MAAM,eAAe,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACpD,QAAQ,MAAM,OAAO,GAAG,EAAE,CAAC;AAC3B;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;IACjD,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC3D,gBAAgB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IACnC,gBAAgB,IAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;IACjH,gBAAgB,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3E,gBAAgB,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;IACxC,oBAAoB,MAAM,iBAAiB,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAChE,oBAAoB,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACtF,oBAAoB,IAAI,eAAe,CAAC,MAAM,EAAE,GAAG,mCAAmC,EAAE;IACxF,wBAAwB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC7E,wBAAwB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACtE,wBAAwB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;IAC9D,wBAAwB,IAAI,CAAC,kCAAkC,GAAG,cAAc,EAAE,CAAC;IACnF,qBAAqB;IACrB,iBAAiB;IACjB,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,mBAAmB,CAAC,aAAa,EAAE;IACvC,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE;IAC9B,YAAY,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;IAC3D,YAAY,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;IAC5D,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACjD,SAAS;IACT,KAAK;AACL;IACA,IAAI,cAAc,GAAG;IACrB,QAAQ,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACvD,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;IACnD,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IAC9C,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,GAAG,SAAS,CAAC;IACzD,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,mBAAmB,CAAC;IAC1D,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;IAC1C,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;IAC7C,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,GAAG,OAAO,CAAC;IAClD,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,GAAG,MAAM,CAAC;IAC/C,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,SAAS,GAAG,MAAM,CAAC;AAChD;IACA,QAAQ,MAAM,MAAM,GAAG;IACvB,YAAY,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;IACjD,YAAY,CAAC,gBAAgB,EAAE,cAAc,CAAC;IAC9C,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC;IACrC,YAAY,CAAC,iBAAiB,EAAE,gBAAgB,CAAC;IACjD,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC;IAC1B,YAAY,CAAC,eAAe,EAAE,cAAc,CAAC;IAC7C,YAAY,CAAC,YAAY,EAAE,kBAAkB,CAAC;IAC9C,YAAY,CAAC,WAAW,EAAE,UAAU,CAAC;IACrC,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACxD,QAAQ,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;AAC1C;IACA,QAAQ,KAAK,IAAI,WAAW,IAAI,MAAM,EAAE;IACxC,YAAY,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACtD,YAAY,GAAG,CAAC,KAAK,CAAC,OAAO,GAAG,WAAW,CAAC;AAC5C;IACA,YAAY,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC5D,YAAY,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,YAAY,CAAC;IACnD,YAAY,SAAS,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;IAC5C,YAAY,SAAS,CAAC,SAAS,GAAG,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACxD;IACA,YAAY,MAAM,UAAU,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC7D,YAAY,UAAU,CAAC,KAAK,CAAC,OAAO,GAAG,YAAY,CAAC;IACpD,YAAY,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;IAC5C,YAAY,UAAU,CAAC,SAAS,GAAG,GAAG,CAAC;AACvC;IACA,YAAY,MAAM,QAAQ,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC3D,YAAY,QAAQ,CAAC,KAAK,CAAC,OAAO,GAAG,YAAY,CAAC;IAClD,YAAY,QAAQ,CAAC,SAAS,GAAG,EAAE,CAAC;AACpC;IACA,YAAY,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;AAC3D;IACA,YAAY,GAAG,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IACvC,YAAY,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;IACxC,YAAY,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;AACtC;IACA,YAAY,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IACvC,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;IAC9C,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IAC9C,QAAQ,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACvE,KAAK;AACL;IACA,IAAI,uBAAuB,GAAG,WAAW;AACzC;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACrD;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO;IACxC,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;IAC9D,YAAY,IAAI,UAAU,GAAG,CAAC,EAAE;IAChC,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC3D,gBAAgB,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAClF,0CAA0C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC;IAC5F,0CAA0C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5G,0CAA0C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC;IAC5F,gBAAgB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,gBAAgB,EAAE,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAClH,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,QAAQ,CAAC,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE;IACjC,QAAQ,IAAI,OAAO,CAAC,kBAAkB,KAAK,KAAK,EAAE,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACpF,QAAQ,IAAI,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IACnE,QAAQ,MAAM,gBAAgB,GAAG,CAAC,OAAO,EAAE,YAAY,KAAK;IAC5D,YAAY,IAAI,OAAO,CAAC,kBAAkB,EAAE;IAC5C,gBAAgB,IAAI,OAAO,IAAI,GAAG,EAAE;IACpC,oBAAoB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACzE,iBAAiB,MAAM;IACvB,oBAAoB,MAAM,MAAM,GAAG,YAAY,GAAG,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9E,oBAAoB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IAC3E,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;IAC7F,SAAS,CAAC;IACV,QAAQ,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,OAAO,CAAC,0BAA0B,EAAE,gBAAgB,CAAC,CAAC;IACnH,QAAQ,OAAO,IAAI,gBAAgB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;IACzD,YAAY,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW,KAAK;IAC9C,gBAAgB,IAAI,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC3E,gBAAgB,IAAI,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;IAClF,gBAAgB,MAAM,kBAAkB,GAAG;IAC3C,oBAAoB,UAAU,EAAE,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW;IACvE,oBAAoB,UAAU,EAAE,OAAO,CAAC,QAAQ;IAChD,oBAAoB,OAAO,EAAE,OAAO,CAAC,KAAK;IAC1C,oBAAoB,4BAA4B,EAAE,OAAO,CAAC,0BAA0B;IACpF,iBAAiB,CAAC;IAClB,gBAAgB,IAAI,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,kBAAkB,CAAC,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,IAAI,CAAC,MAAM;IACjH,oBAAoB,IAAI,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;IAC1F,oBAAoB,OAAO,EAAE,CAAC;IAC9B,iBAAiB,CAAC,CAAC;IACnB,aAAa,CAAC;IACd,aAAa,KAAK,CAAC,MAAM;IACzB,gBAAgB,IAAI,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC3E,gBAAgB,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,wCAAwC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACrF,aAAa,CAAC,CAAC;IACf,SAAS,EAAE,WAAW,CAAC,YAAY,CAAC,CAAC;IACrC,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,SAAS,CAAC,KAAK,EAAE,kBAAkB,GAAG,IAAI,EAAE,UAAU,GAAG,SAAS,EAAE;IACxE,QAAQ,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC;IACvC,QAAQ,MAAM,eAAe,GAAG,EAAE,CAAC;IACnC,QAAQ,IAAI,kBAAkB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC3D,QAAQ,MAAM,gBAAgB,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,KAAK;IACvE,YAAY,eAAe,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;IACjD,YAAY,IAAI,YAAY,GAAG,CAAC,CAAC;IACjC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,YAAY,IAAI,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACxF,YAAY,YAAY,GAAG,YAAY,GAAG,SAAS,CAAC;IACpD,YAAY,YAAY,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,YAAY,IAAI,kBAAkB,EAAE;IACpC,gBAAgB,IAAI,YAAY,IAAI,GAAG,EAAE;IACzC,oBAAoB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACzE,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;IACnF,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,UAAU,EAAE,UAAU,CAAC,YAAY,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;IAClF,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,YAAY,GAAG,EAAE,CAAC;IAChC,QAAQ,MAAM,aAAa,GAAG,EAAE,CAAC;IACjC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC/C,YAAY,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,0BAA0B;IAC7G,2DAA2D,gBAAgB,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3F,YAAY,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC;IACzD,YAAY,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IACnD,SAAS;IACT,QAAQ,MAAM,YAAY,GAAG,MAAM;IACnC,YAAY,KAAK,IAAI,YAAY,IAAI,aAAa,EAAE;IACpD,gBAAgB,YAAY,EAAE,CAAC;IAC/B,aAAa;IACb,SAAS,CAAC;IACV,QAAQ,OAAO,IAAI,gBAAgB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;IACzD,YAAY,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;IACrC,aAAa,IAAI,CAAC,CAAC,YAAY,KAAK;IACpC,gBAAgB,IAAI,kBAAkB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IACnE,gBAAgB,IAAI,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC;IAC1E,gBAAgB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,KAAK,EAAE,kBAAkB,CAAC,CAAC,IAAI,CAAC,MAAM;IACzF,oBAAoB,IAAI,UAAU,EAAE,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;IAC1E,oBAAoB,OAAO,EAAE,CAAC;IAC9B,iBAAiB,CAAC,CAAC;IACnB,aAAa,CAAC;IACd,aAAa,KAAK,CAAC,MAAM;IACzB,gBAAgB,IAAI,kBAAkB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IACnE,gBAAgB,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,sDAAsD,CAAC,CAAC,CAAC,CAAC;IAC5F,aAAa,CAAC,CAAC;IACf,SAAS,EAAE,YAAY,CAAC,CAAC;IACzB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,qBAAqB,CAAC,IAAI,EAAE,0BAA0B,GAAG,CAAC,EAAE,UAAU,GAAG,SAAS,EAAE;IACxF,QAAQ,MAAM,gBAAgB,GAAG,CAAC,OAAO,EAAE,YAAY,KAAK;IAC5D,YAAY,IAAI,UAAU,EAAE,UAAU,CAAC,OAAO,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;IAC7E,SAAS,CAAC;IACV,QAAQ,IAAI,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE;IACjD,YAAY,OAAO,IAAI,WAAW,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,gBAAgB,EAAE,CAAC,EAAE,0BAA0B,CAAC,CAAC;IACxG,SAAS,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;IAC1C,YAAY,OAAO,IAAI,SAAS,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,gBAAgB,EAAE,CAAC,EAAE,0BAA0B,CAAC,CAAC;IACtG,SAAS,MAAM;IACf,YAAY,OAAO,gBAAgB,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,4DAA4D,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7H,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,GAAG,WAAW;AACjC;IACA,QAAQ,IAAI,WAAW,CAAC;IACxB,QAAQ,IAAI,SAAS,GAAG,CAAC,CAAC;AAC1B;IACA,QAAQ,OAAO,SAAS,YAAY,EAAE,kBAAkB,GAAG,EAAE,EAAE,kBAAkB,GAAG,IAAI,EAAE;IAC1F,YAAY,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;IACnD,YAAY,SAAS,EAAE,CAAC;IACxB,YAAY,MAAM,WAAW,GAAG,MAAM;IACtC,gBAAgB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;IAChD,oBAAoB,IAAI,kBAAkB,EAAE;IAC5C,wBAAwB,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IACnD,wBAAwB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC;IAC/E,qBAAqB;IACrB,oBAAoB,MAAM,CAAC,UAAU,CAAC,MAAM;IAC5C,wBAAwB,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;IACzE,wBAAwB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC/C,wBAAwB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IACjD,wBAAwB,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,kBAAkB,CAAC,CAAC;IACrF,wBAAwB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM;IACxE,4BAA4B,SAAS,EAAE,CAAC;IACxC,4BAA4B,IAAI,SAAS,KAAK,CAAC,EAAE;IACjD,gCAAgC,IAAI,kBAAkB,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IACnF,gCAAgC,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;IACtE,6BAA6B;IAC7B,4BAA4B,OAAO,EAAE,CAAC;IACtC,yBAAyB,CAAC,CAAC;IAC3B,qBAAqB,EAAE,CAAC,CAAC,CAAC;IAC1B,iBAAiB,CAAC,CAAC;IACnB,aAAa,CAAC;IACd,YAAY,IAAI,CAAC,WAAW,EAAE;IAC9B,gBAAgB,WAAW,GAAG,WAAW,EAAE,CAAC;IAC5C,aAAa,MAAM;IACnB,gBAAgB,WAAW,GAAG,WAAW,CAAC,IAAI,CAAC,MAAM;IACrD,oBAAoB,OAAO,WAAW,EAAE,CAAC;IACzC,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,YAAY,OAAO,WAAW,CAAC;IAC/B,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,qBAAqB,CAAC,YAAY,EAAE,kBAAkB,EAAE;IAC5D,QAAQ,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,IAAI,EAAE,CAAC;IAClE,QAAQ,MAAM,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,IAAI,EAAE,CAAC;IAC9E,QAAQ,eAAe,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC;IAC9C,QAAQ,qBAAqB,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,CAAC;IAC1D,QAAQ,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,EAAE,qBAAqB,EAAE,IAAI,CAAC,CAAC;IAC3E,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrE,QAAQ,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7C,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,SAAS,EAAE;IAC/B,QAAQ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;IACxC,YAAY,MAAM,UAAU,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;IACzD,YAAY,MAAM,UAAU,GAAG,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC;IACzF,YAAY,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK;IAC1C,gBAAgB,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE;IACrC,oBAAoB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7C,oBAAoB,IAAI,IAAI,CAAC,sBAAsB,EAAE;IACrD,wBAAwB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAClH,qBAAqB,MAAM;IAC3B,wBAAwB,MAAM,aAAa,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAChH,wBAAwB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACnG,qBAAqB;IACrB,oBAAoB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;IACxD,iBAAiB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;IAChD,oBAAoB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7C,iBAAiB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE;IAC3D,oBAAoB,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;IAC3E,oBAAoB,UAAU,CAAC,WAAW,CAAC;IAC3C,wBAAwB,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,MAAM;IAChF,qBAAqB,CAAC,CAAC;IACvB,oBAAoB,IAAI,IAAI,CAAC,sBAAsB,EAAE;IACrD,wBAAwB,IAAI,CAAC,uBAAuB,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB;IACjG,uEAAuE,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;IAC/G,wBAAwB,IAAI,CAAC,uBAAuB,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB;IACjG,uEAAuE,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAU,CAAC,CAAC;IAC/G,wBAAwB,IAAI,CAAC,8BAA8B,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B;IAC9G,6EAA6E,CAAC,CAAC,IAAI,CAAC,0BAA0B,EAAE,UAAU,CAAC,CAAC;IAC5H,qBAAqB,MAAM;IAC3B,wBAAwB,IAAI,CAAC,uBAAuB,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,CAAC;IACnF,wBAAwB,IAAI,CAAC,8BAA8B,GAAG,IAAI,UAAU,CAAC,UAAU,CAAC,CAAC;IACzF,qBAAqB;IACrB,oBAAoB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7F,iBAAiB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE;IACrD,oBAAoB,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAC7D,oBAAoB,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAC;IACpF,oBAAoB,MAAM,sBAAsB,GAAG,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC;IACtF,oBAAoB,MAAM,wBAAwB,GAAG,iBAAiB,CAAC,YAAY,CAAC,IAAI,CAAC;IACzF,oBAAoB,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,sBAAsB,CAAC,CAAC,GAAG,KAAK,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAC5H,oBAAoB,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,wBAAwB,CAAC,CAAC,GAAG,KAAK,GAAG,wBAAwB,CAAC,CAAC,CAAC,CAAC;IACnI,oBAAoB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjD,oBAAoB,OAAO,EAAE,CAAC;IAC9B,iBAAiB;IACjB,aAAa,CAAC;IACd,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,KAAK,GAAG;IACZ,QAAQ,IAAI,IAAI,CAAC,cAAc,EAAE;IACjC,YAAY,qBAAqB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC7D,YAAY,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IAC9C,SAAS,MAAM;IACf,YAAY,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IACrF,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,IAAI,GAAG;IACX,QAAQ,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,qBAAqB,EAAE;IAC/D,YAAY,oBAAoB,EAAE,CAAC;IACnC,YAAY,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IAC/C,SAAS;IACT,KAAK;AACL;IACA,IAAI,gBAAgB,GAAG;IACvB,QAAQ,IAAI,IAAI,CAAC,cAAc,EAAE;IACjC,YAAY,qBAAqB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC7D,SAAS;IACT,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;IACtB,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;IACtB,KAAK;AACL;IACA,IAAI,MAAM,GAAG,WAAW;AACxB;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,OAAO;IAC7E,YAAY,MAAM,cAAc,GAAG,CAAC,KAAK,KAAK;IAC9C,gBAAgB,KAAK,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,EAAE;IAClD,oBAAoB,IAAI,KAAK,CAAC,OAAO,EAAE,OAAO,IAAI,CAAC;IACnD,iBAAiB;IACjB,gBAAgB,OAAO,KAAK,CAAC;IAC7B,aAAa,CAAC;IACd,YAAY,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;IAC1D,YAAY,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;IAC5C,YAAY,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC1F,YAAY,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9D,YAAY,IAAI,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAChI,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACxG,YAAY,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,aAAa,CAAC;IACpD,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE;IAC7B,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACxE,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,OAAO;IACzE,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IAClD,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACvC,QAAQ,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAChC,QAAQ,IAAI,CAAC,SAAS,EAAE,CAAC;IACzB,QAAQ,IAAI,CAAC,sBAAsB,EAAE,CAAC;IACtC,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAClC,KAAK;AACL;IACA,IAAI,mBAAmB,CAAC,QAAQ,EAAE,MAAM,EAAE;IAC1C,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtE,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;IACzD,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;IACpB,KAAK;AACL;IACA,IAAI,SAAS,GAAG,WAAW;AAC3B;IACA,QAAQ,IAAI,YAAY,GAAG,cAAc,EAAE,CAAC;IAC5C,QAAQ,IAAI,UAAU,GAAG,CAAC,CAAC;AAC3B;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACjD,YAAY,MAAM,SAAS,GAAG,WAAW,GAAG,YAAY,CAAC;IACzD,YAAY,IAAI,SAAS,IAAI,GAAG,EAAE;IAClC,gBAAgB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC7C,gBAAgB,UAAU,GAAG,CAAC,CAAC;IAC/B,gBAAgB,YAAY,GAAG,WAAW,CAAC;IAC3C,aAAa,MAAM;IACnB,gBAAgB,UAAU,EAAE,CAAC;IAC7B,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,4BAA4B,GAAG,WAAW;AAC9C;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,MAAM,mBAAmB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACxD;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IACvD,YAAY,IAAI,mBAAmB,CAAC,CAAC,KAAK,gBAAgB,CAAC,CAAC,IAAI,mBAAmB,CAAC,CAAC,KAAK,gBAAgB,CAAC,CAAC,EAAE;IAC9G,gBAAgB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IAC/C,oBAAoB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,mBAAmB,CAAC,CAAC,GAAG,mBAAmB,CAAC,CAAC,CAAC;IACvF,oBAAoB,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;IACzD,iBAAiB;IACjB,gBAAgB,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAC3D,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,sBAAsB,GAAG,WAAW;AACxC;IACA,QAAQ,IAAI,cAAc,CAAC;AAC3B;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACjD,YAAY,IAAI,CAAC,cAAc,EAAE,cAAc,GAAG,WAAW,CAAC;IAC9D,YAAY,MAAM,SAAS,GAAG,WAAW,GAAG,cAAc,CAAC;AAC3D;IACA,YAAY,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;IACrD,YAAY,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;AAC9C;IACA,YAAY,cAAc,GAAG,WAAW,CAAC;IACzC,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,sBAAsB,GAAG,WAAW;AACxC;IACA,QAAQ,IAAI,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,IAAI,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,IAAI,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAC/C;IACA,QAAQ,OAAO,SAAS,WAAW,EAAE;IACrC,YAAY,IAAI,IAAI,CAAC,yBAAyB,EAAE;IAChD,gBAAgB,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;IACvG,gBAAgB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;IAC/F,gBAAgB,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IACpF,gBAAgB,MAAM,aAAa,GAAG,aAAa,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;IAC/E,gBAAgB,MAAM,CAAC,IAAI,aAAa,GAAG,aAAa,IAAI,WAAW,GAAG,IAAI,CAAC,kCAAkC,CAAC,CAAC,CAAC;IACpH,gBAAgB,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAChG,gBAAgB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACrD,gBAAgB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC5D,gBAAgB,IAAI,CAAC,IAAI,GAAG,EAAE;IAC9B,oBAAoB,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;IAC3D,iBAAiB;IACjB,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,iBAAiB,GAAG,WAAW;AACnC;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,IAAI,gBAAgB,GAAG,KAAK,CAAC;AACrC;IACA,QAAQ,OAAO,SAAS,SAAS,EAAE;IACnC,YAAY,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IACvD,YAAY,MAAM,WAAW,GAAG,IAAI,CAAC;IACrC,YAAY,MAAM,YAAY,GAAG,GAAG,CAAC;IACrC,YAAY,IAAI,IAAI,CAAC,yBAAyB,EAAE;IAChD,gBAAgB,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;IAChE,gBAAgB,MAAM,yBAAyB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,EAAE,GAAG,CAAC,CAAC;IAC1G,gBAAgB,IAAI,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,yBAAyB,GAAG,WAAW,GAAG,SAAS,EAAE,GAAG,CAAC,CAAC;IAC/G,gBAAgB,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;IAC9E,gBAAgB,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IACzG,gBAAgB,gBAAgB,GAAG,IAAI,CAAC;IACxC,aAAa,MAAM;IACnB,gBAAgB,IAAI,yBAAyB,CAAC;IAC9C,gBAAgB,IAAI,gBAAgB,EAAE,yBAAyB,GAAG,GAAG,CAAC;IACtE,qBAAqB,yBAAyB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,EAAE,GAAG,CAAC,CAAC;IACzG,gBAAgB,IAAI,yBAAyB,GAAG,CAAC,EAAE;IACnD,oBAAoB,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAC7G,oBAAoB,IAAI,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,yBAAyB,GAAG,YAAY,GAAG,SAAS,EAAE,GAAG,CAAC,CAAC;IACpH,oBAAoB,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;IAClF,oBAAoB,IAAI,qBAAqB,KAAK,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;IACxG,iBAAiB;IACjB,gBAAgB,gBAAgB,GAAG,KAAK,CAAC;IACzC,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,gBAAgB,GAAG,WAAW;AAClC;IACA,QAAQ,MAAM,OAAO,GAAG,EAAE,CAAC;IAC3B,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACrD;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,IAAI,CAAC,cAAc,EAAE;IACrC,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC3D,gBAAgB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IACnC,gBAAgB,IAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;IACjH,gBAAgB,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3E,gBAAgB,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;IACxC,oBAAoB,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IACnE,oBAAoB,IAAI,CAAC,WAAW,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACjG,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IACpE,iBAAiB;IACjB,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IAChE,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,eAAe,GAAG,WAAW;AACjC;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACrD;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;IACvC,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;IAC9D,YAAY,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;AACvD;IACA,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;IACnD,YAAY,MAAM,eAAe,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxH,YAAY,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,SAAS,GAAG,eAAe,CAAC;AAC3E;IACA,YAAY,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IACtD,YAAY,MAAM,kBAAkB,GAAG,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpI,YAAY,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,SAAS,GAAG,kBAAkB,CAAC;AAC5E;IACA,YAAY,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;IAC5C,YAAY,MAAM,cAAc,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpH,YAAY,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS,GAAG,cAAc,CAAC;AACpE;IACA,YAAY,IAAI,IAAI,CAAC,cAAc,EAAE;IACrC,gBAAgB,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC;IACvE,gBAAgB,MAAM,eAAe,GAAG,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5H,gBAAgB,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,SAAS,GAAG,eAAe,CAAC;IAC/E,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,SAAS,GAAG,KAAK,CAAC;IACrE,aAAa;AACb;IACA,YAAY,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC;IAChE,YAAY,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,SAAS,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;AACzG;IACA,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,GAAG,UAAU,GAAG,GAAG,CAAC;IACvE,YAAY,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,SAAS;IAC1D,gBAAgB,CAAC,EAAE,IAAI,CAAC,gBAAgB,CAAC,eAAe,EAAE,UAAU,CAAC,EAAE,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAClG;IACA,YAAY,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS,GAAG,CAAC,EAAE,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1F,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,kBAAkB,GAAG;IACzB,QAAQ,IAAI,IAAI,CAAC,gBAAgB,EAAE;IACnC,YAAY,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;IAC7D,YAAY,IAAI,CAAC,WAAW,CAAC,6BAA6B,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACjG,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;IAC9D,SAAS;IACT,KAAK;AACL;IACA,IAAI,eAAe,GAAG,WAAW;AACjC;IACA,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC9C,QAAQ,MAAM,mBAAmB,GAAG,EAAE,CAAC;IACvC,QAAQ,MAAM,eAAe,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxD,QAAQ,MAAM,eAAe,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACpD,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,MAAM,WAAW,GAAG,EAAE,CAAC;IAC/B,QAAQ,IAAI,QAAQ,GAAG,CAAC,CAAC;AACzB;IACA,QAAQ,MAAM,YAAY,GAAG;IAC7B,YAAY;IACZ,gBAAgB,gBAAgB,EAAE,IAAI;IACtC,gBAAgB,eAAe,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC;IACvD,aAAa;IACb,YAAY;IACZ,gBAAgB,gBAAgB,EAAE,IAAI;IACtC,gBAAgB,eAAe,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;IACnD,aAAa;IACb,YAAY;IACZ,gBAAgB,gBAAgB,EAAE,GAAG;IACrC,gBAAgB,eAAe,EAAE,CAAC,GAAG,CAAC;IACtC,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,OAAO,SAAS,KAAK,GAAG,KAAK,EAAE,cAAc,GAAG,KAAK,EAAE;IAC/D,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE,OAAO;IACzC,YAAY,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,OAAO;AAC7E;IACA,YAAY,IAAI,SAAS,GAAG,CAAC,CAAC;IAC9B,YAAY,IAAI,YAAY,GAAG,CAAC,CAAC;IACjC,YAAY,IAAI,uBAAuB,GAAG,KAAK,CAAC;IAChD,YAAY,IAAI,uBAAuB,GAAG,KAAK,CAAC;AAChD;IACA,YAAY,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC9E,YAAY,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACzD,YAAY,YAAY,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,CAAC;AACnG;IACA,YAAY,IAAI,CAAC,KAAK,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,GAAG,CAAC,EAAE;IACpE,gBAAgB,IAAI,SAAS,IAAI,IAAI,EAAE,uBAAuB,GAAG,IAAI,CAAC;IACtE,gBAAgB,IAAI,YAAY,IAAI,GAAG,EAAE,uBAAuB,GAAG,IAAI,CAAC;IACxE,gBAAgB,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,EAAE,OAAO;IACjF,aAAa;AACb;IACA,YAAY,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IACpC,YAAY,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,CAAC;AACjF;IACA,YAAY,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC;IAC7D,YAAY,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAChE,YAAY,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;AAC3D;IACA,YAAY,IAAI,IAAI,CAAC,kBAAkB,KAAK,WAAW,CAAC,MAAM,IAAI,CAAC,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;IACtG,gBAAgB,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,8BAA8B,CAAC,CAAC;IACrG,aAAa;IACb,YAAY,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;IAC1C,gBAAgB,KAAK,IAAI,WAAW,IAAI,YAAY,EAAE;IACtD,oBAAoB,IAAI,SAAS,GAAG,WAAW,CAAC,cAAc,EAAE;IAChE,wBAAwB,KAAK,IAAI,YAAY,IAAI,WAAW,CAAC,aAAa,EAAE;IAC5E,4BAA4B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC,CAAC,CAAC;IAC/F,yBAAyB;IACzB,wBAAwB,MAAM;IAC9B,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACxD,aAAa;IACb,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACnF;IACA,YAAY,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5D,YAAY,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5D,YAAY,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5D,YAAY,MAAM,WAAW,GAAG;IAChC,gBAAgB,eAAe,EAAE,SAAS,CAAC,qBAAqB,CAAC,SAAS,CAAC;IAC3E,gBAAgB,gBAAgB,EAAE,mBAAmB;IACrD,gBAAgB,kBAAkB,EAAE,IAAI,CAAC,gBAAgB;IACzD,gBAAgB,gBAAgB,EAAE,SAAS;IAC3C,gBAAgB,yBAAyB,EAAE,IAAI,CAAC,kBAAkB;IAClE,aAAa,CAAC;IACd,YAAY,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;IAC9C,gBAAgB,WAAW,CAAC,aAAa,GAAG,IAAI,CAAC,uBAAuB,CAAC;IACzE,gBAAgB,IAAI,IAAI,CAAC,kBAAkB,EAAE;IAC7C,oBAAoB,WAAW,CAAC,oBAAoB,GAAG,IAAI,CAAC,8BAA8B,CAAC;IAC3F,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;IACxC,gBAAgB,MAAM,EAAE,WAAW;IACnC,aAAa,CAAC,CAAC;AACf;IACA,YAAY,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;IAC1C,gBAAgB,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC3D,gBAAgB,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAClD,aAAa;IACb,YAAY,QAAQ,EAAE,CAAC;IACvB,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA,IAAI,uBAAuB,GAAG,WAAW;AACzC;IACA,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC;IAClC,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACjD,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACjD,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC/C,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAChD,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,MAAM,OAAO,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpD;IACA,QAAQ,MAAM,OAAO,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,QAAQ,MAAM,QAAQ,GAAG,CAAC,IAAI,KAAK;IACnC,YAAY,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;IACjE,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,uBAAuB,GAAG,GAAG,CAAC;AAC5C;IACA,QAAQ,OAAO,SAAS,cAAc,EAAE;AACxC;IACA,YAAY,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IACvD,YAAY,MAAM,iBAAiB,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,GAAGA,gBAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC7H,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,GAAG,GAAG,iBAAiB,CAAC,CAAC;IACtF,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,GAAG,GAAG,iBAAiB,CAAC,CAAC;IACtF,YAAY,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACrD,YAAY,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACrD,YAAY,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC;IAC/D,YAAY,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;AAC7D;IACA,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;IAC5D,YAAY,IAAI,eAAe,GAAG,CAAC,CAAC;IACpC,YAAY,IAAI,gBAAgB,GAAG,CAAC,CAAC;IACrC,YAAY,MAAM,SAAS,GAAG,SAAS,CAAC,gBAAgB,CAAC,MAAM,CAAC;IAChE,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IAChD,gBAAgB,MAAM,IAAI,GAAG,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC3D,gBAAgB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;IACvE,gBAAgB,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC;IAC3D,gBAAgB,UAAU,CAAC,SAAS,EAAE,CAAC;AACvC;IACA,gBAAgB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IAClE,gBAAgB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;AAClE;IACA,gBAAgB,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACnE,gBAAgB,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AACnE;IACA,gBAAgB,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC1C,gBAAgB,MAAM,SAAS,GAAG,gBAAgB,IAAI,YAAY,GAAG,EAAE,CAAC,CAAC;IACzE,gBAAgB,MAAM,SAAS,GAAG,gBAAgB,IAAI,YAAY,GAAG,EAAE,CAAC,CAAC;IACzE,gBAAgB,IAAI,CAAC,cAAc,KAAK,CAAC,SAAS,IAAI,SAAS,IAAI,cAAc,GAAG,uBAAuB,KAAK,cAAc,GAAG,EAAE,CAAC,EAAE;IACtI,oBAAoB,SAAS;IAC7B,iBAAiB;IACjB,gBAAgB,gBAAgB,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7D,gBAAgB,cAAc,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC;IACvD,gBAAgB,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IAC1D,gBAAgB,eAAe,EAAE,CAAC;IAClC,aAAa;AACb;IACA,YAAY,cAAc,CAAC,MAAM,GAAG,eAAe,CAAC;IACpD,YAAY,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;IAC1C,gBAAgB,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IAC7E,qBAAqB,OAAO,CAAC,CAAC;IAC9B,aAAa,CAAC,CAAC;AACf;IACA,YAAY,IAAI,iBAAiB,GAAG,gBAAgB,GAAG,SAAS,CAAC,WAAW,CAAC;IAC7E,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;IACtD,gBAAgB,MAAM,IAAI,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IAC/C,gBAAgB,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAChE,gBAAgB,MAAM,eAAe,GAAG,cAAc,GAAG,SAAS,CAAC,WAAW,CAAC;IAC/E,gBAAgB,IAAI,QAAQ,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,iBAAiB,GAAG,eAAe,EAAE,cAAc,CAAC,CAAC;IACzI,gBAAgB,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChD,gBAAgB,iBAAiB,IAAI,eAAe,CAAC;IACrD,aAAa;AACb;IACA,YAAY,OAAO,gBAAgB,CAAC;IACpC,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,YAAY,GAAG;IACnB,QAAQ,OAAO,IAAI,CAAC,SAAS,CAAC;IAC9B,KAAK;AACL;IACA,IAAI,QAAQ,GAAG;IACf,QAAQ,OAAO,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACpD,KAAK;IACL;;ICpkCA;IACA;IACA;IACA;IACO,MAAM,YAAY,SAASA,gBAAK,CAAC,KAAK,CAAC;AAC9C;IACA,IAAI,WAAW,CAAC,OAAO,GAAG,EAAE,EAAE;IAC9B,QAAQ,KAAK,EAAE,CAAC;AAChB;IACA,QAAQ,OAAO,CAAC,cAAc,GAAG,KAAK,CAAC;IACvC,QAAQ,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;IAC3C,QAAQ,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;IACnC,QAAQ,OAAO,CAAC,sBAAsB,GAAG,KAAK,CAAC;IAC/C,QAAQ,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;IAClC,QAAQ,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;IACnC,QAAQ,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;AACrC;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;AAC1C;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,kBAAkB,EAAE,CAAC;IAC9D,QAAQ,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACpC,QAAQ,IAAI,CAAC,YAAY,CAAC,cAAc,GAAG,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/F;IACA,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,CAAC,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE;IACzC,QAAQ,IAAI,OAAO,CAAC,kBAAkB,KAAK,KAAK,EAAE,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACpF,QAAQ,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAChE,QAAQ,WAAW,CAAC,IAAI,CAAC,MAAM;IAC/B,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAC5C,SAAS,CAAC,CAAC;IACX,QAAQ,OAAO,WAAW,CAAC;IAC3B,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,kBAAkB,CAAC,KAAK,EAAE,kBAAkB,EAAE;IAClD,QAAQ,IAAI,kBAAkB,KAAK,KAAK,EAAE,kBAAkB,GAAG,IAAI,CAAC;IACpE,QAAQ,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,kBAAkB,CAAC,CAAC;IAC7E,QAAQ,WAAW,CAAC,IAAI,CAAC,MAAM;IAC/B,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAC5C,SAAS,CAAC,CAAC;IACX,QAAQ,OAAO,WAAW,CAAC;IAC3B,KAAK;AACL;IACA,IAAI,OAAO,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE;IAC3D,QAAQ,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACxC,KAAK;AACL;IACA,IAAI,OAAO,kBAAkB,GAAG;IAChC,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3D,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,iBAAiB,EAAE,CAAC;IACvD,QAAQ,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;IACpC,QAAQ,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;IACpC,QAAQ,MAAM,IAAI,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACxD,QAAQ,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IACnC,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA;;;;;;;;;;;;;;;;"}